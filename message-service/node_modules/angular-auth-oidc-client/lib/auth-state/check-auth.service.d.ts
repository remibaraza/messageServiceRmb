import { Observable } from 'rxjs';
import { AuthStateService } from '../auth-state/auth-state.service';
import { AutoLoginService } from '../auto-login/auto-login.service';
import { CallbackService } from '../callback/callback.service';
import { PeriodicallyTokenCheckService } from '../callback/periodically-token-check.service';
import { RefreshSessionService } from '../callback/refresh-session.service';
import { OpenIdConfiguration } from '../config/openid-configuration';
import { CheckSessionService } from '../iframe/check-session.service';
import { SilentRenewService } from '../iframe/silent-renew.service';
import { LoggerService } from '../logging/logger.service';
import { LoginResponse } from '../login/login-response';
import { PopUpService } from '../login/popup/popup.service';
import { PublicEventsService } from '../public-events/public-events.service';
import { StoragePersistenceService } from '../storage/storage-persistence.service';
import { UserService } from '../user-data/user.service';
import { CurrentUrlService } from '../utils/url/current-url.service';
import * as i0 from "@angular/core";
export declare class CheckAuthService {
    private readonly checkSessionService;
    private readonly currentUrlService;
    private readonly silentRenewService;
    private readonly userService;
    private readonly loggerService;
    private readonly authStateService;
    private readonly callbackService;
    private readonly refreshSessionService;
    private readonly periodicallyTokenCheckService;
    private readonly popupService;
    private readonly autoLoginService;
    private readonly storagePersistenceService;
    private readonly publicEventsService;
    constructor(checkSessionService: CheckSessionService, currentUrlService: CurrentUrlService, silentRenewService: SilentRenewService, userService: UserService, loggerService: LoggerService, authStateService: AuthStateService, callbackService: CallbackService, refreshSessionService: RefreshSessionService, periodicallyTokenCheckService: PeriodicallyTokenCheckService, popupService: PopUpService, autoLoginService: AutoLoginService, storagePersistenceService: StoragePersistenceService, publicEventsService: PublicEventsService);
    checkAuth(configuration: OpenIdConfiguration, allConfigs: OpenIdConfiguration[], url?: string): Observable<LoginResponse>;
    checkAuthMultiple(allConfigs: OpenIdConfiguration[], url?: string): Observable<LoginResponse[]>;
    checkAuthIncludingServer(configuration: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): Observable<LoginResponse>;
    private checkAuthWithConfig;
    private startCheckSessionAndValidation;
    private getConfigurationWithUrlState;
    private composeMultipleLoginResults;
    static ɵfac: i0.ɵɵFactoryDeclaration<CheckAuthService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CheckAuthService>;
}
