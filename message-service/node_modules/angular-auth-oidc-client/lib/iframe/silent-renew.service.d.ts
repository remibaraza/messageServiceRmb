import { Observable } from 'rxjs';
import { AuthStateService } from '../auth-state/auth-state.service';
import { ImplicitFlowCallbackService } from '../callback/implicit-flow-callback.service';
import { IntervalService } from '../callback/interval.service';
import { CallbackContext } from '../flows/callback-context';
import { FlowsDataService } from '../flows/flows-data.service';
import { FlowsService } from '../flows/flows.service';
import { ResetAuthDataService } from '../flows/reset-auth-data.service';
import { LoggerService } from '../logging/logger.service';
import { FlowHelper } from '../utils/flowHelper/flow-helper.service';
import { OpenIdConfiguration } from './../config/openid-configuration';
import { IFrameService } from './existing-iframe.service';
import * as i0 from "@angular/core";
export declare class SilentRenewService {
    private readonly iFrameService;
    private readonly flowsService;
    private readonly resetAuthDataService;
    private readonly flowsDataService;
    private readonly authStateService;
    private readonly loggerService;
    private readonly flowHelper;
    private readonly implicitFlowCallbackService;
    private readonly intervalService;
    private readonly refreshSessionWithIFrameCompletedInternal$;
    get refreshSessionWithIFrameCompleted$(): Observable<CallbackContext>;
    constructor(iFrameService: IFrameService, flowsService: FlowsService, resetAuthDataService: ResetAuthDataService, flowsDataService: FlowsDataService, authStateService: AuthStateService, loggerService: LoggerService, flowHelper: FlowHelper, implicitFlowCallbackService: ImplicitFlowCallbackService, intervalService: IntervalService);
    getOrCreateIframe(config: OpenIdConfiguration): HTMLIFrameElement;
    isSilentRenewConfigured(configuration: OpenIdConfiguration): boolean;
    codeFlowCallbackSilentRenewIframe(urlParts: any, config: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): Observable<CallbackContext>;
    silentRenewEventHandler(e: CustomEvent, config: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): void;
    private getExistingIframe;
    static ɵfac: i0.ɵɵFactoryDeclaration<SilentRenewService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SilentRenewService>;
}
