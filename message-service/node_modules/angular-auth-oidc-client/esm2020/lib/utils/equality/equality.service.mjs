import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class EqualityService {
    isStringEqualOrNonOrderedArrayEqual(value1, value2) {
        if (this.isNullOrUndefined(value1)) {
            return false;
        }
        if (this.isNullOrUndefined(value2)) {
            return false;
        }
        if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {
            return false;
        }
        if (this.bothValuesAreStrings(value1, value2)) {
            return value1 === value2;
        }
        return this.arraysHaveEqualContent(value1, value2);
    }
    areEqual(value1, value2) {
        if (!value1 || !value2) {
            return false;
        }
        if (this.bothValuesAreArrays(value1, value2)) {
            return this.arraysStrictEqual(value1, value2);
        }
        if (this.bothValuesAreStrings(value1, value2)) {
            return value1 === value2;
        }
        if (this.bothValuesAreObjects(value1, value2)) {
            return JSON.stringify(value1).toLowerCase() === JSON.stringify(value2).toLowerCase();
        }
        if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {
            if (Array.isArray(value1) && this.valueIsString(value2)) {
                return value1[0] === value2;
            }
            if (Array.isArray(value2) && this.valueIsString(value1)) {
                return value2[0] === value1;
            }
        }
        return value1 === value2;
    }
    oneValueIsStringAndTheOtherIsArray(value1, value2) {
        return (Array.isArray(value1) && this.valueIsString(value2)) || (Array.isArray(value2) && this.valueIsString(value1));
    }
    bothValuesAreObjects(value1, value2) {
        return this.valueIsObject(value1) && this.valueIsObject(value2);
    }
    bothValuesAreStrings(value1, value2) {
        return this.valueIsString(value1) && this.valueIsString(value2);
    }
    bothValuesAreArrays(value1, value2) {
        return Array.isArray(value1) && Array.isArray(value2);
    }
    valueIsString(value) {
        return typeof value === 'string' || value instanceof String;
    }
    valueIsObject(value) {
        return typeof value === 'object';
    }
    arraysStrictEqual(arr1, arr2) {
        if (arr1.length !== arr2.length) {
            return false;
        }
        for (let i = arr1.length; i--;) {
            if (arr1[i] !== arr2[i]) {
                return false;
            }
        }
        return true;
    }
    arraysHaveEqualContent(arr1, arr2) {
        if (arr1.length !== arr2.length) {
            return false;
        }
        return arr1.some((v) => arr2.includes(v));
    }
    isNullOrUndefined(val) {
        return val === null || val === undefined;
    }
}
EqualityService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: EqualityService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
EqualityService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: EqualityService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: EqualityService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,