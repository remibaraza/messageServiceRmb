import { Injectable } from '@angular/core';
import { LogLevel } from './log-level';
import * as i0 from "@angular/core";
import * as i1 from "./abstract-logger.service";
export class LoggerService {
    constructor(abstractLoggerService) {
        this.abstractLoggerService = abstractLoggerService;
    }
    logError(configuration, message, ...args) {
        if (this.loggingIsTurnedOff(configuration)) {
            return;
        }
        const { configId } = configuration;
        const messageToLog = this.isObject(message) ? JSON.stringify(message) : message;
        if (!!args && !!args.length) {
            this.abstractLoggerService.logError(`[ERROR] ${configId} - ${messageToLog}`, ...args);
        }
        else {
            this.abstractLoggerService.logError(`[ERROR] ${configId} - ${messageToLog}`);
        }
    }
    logWarning(configuration, message, ...args) {
        if (!this.logLevelIsSet(configuration)) {
            return;
        }
        if (this.loggingIsTurnedOff(configuration)) {
            return;
        }
        if (!this.currentLogLevelIsEqualOrSmallerThan(configuration, LogLevel.Warn)) {
            return;
        }
        const { configId } = configuration;
        const messageToLog = this.isObject(message) ? JSON.stringify(message) : message;
        if (!!args && !!args.length) {
            this.abstractLoggerService.logWarning(`[WARN] ${configId} - ${messageToLog}`, ...args);
        }
        else {
            this.abstractLoggerService.logWarning(`[WARN] ${configId} - ${messageToLog}`);
        }
    }
    logDebug(configuration, message, ...args) {
        if (!this.logLevelIsSet(configuration)) {
            return;
        }
        if (this.loggingIsTurnedOff(configuration)) {
            return;
        }
        if (!this.currentLogLevelIsEqualOrSmallerThan(configuration, LogLevel.Debug)) {
            return;
        }
        const { configId } = configuration;
        const messageToLog = this.isObject(message) ? JSON.stringify(message) : message;
        if (!!args && !!args.length) {
            this.abstractLoggerService.logDebug(`[DEBUG] ${configId} - ${messageToLog}`, ...args);
        }
        else {
            this.abstractLoggerService.logDebug(`[DEBUG] ${configId} - ${messageToLog}`);
        }
    }
    currentLogLevelIsEqualOrSmallerThan(configuration, logLevelToCompare) {
        const { logLevel } = configuration || {};
        return logLevel <= logLevelToCompare;
    }
    logLevelIsSet(configuration) {
        const { logLevel } = configuration || {};
        if (logLevel === null) {
            return false;
        }
        if (logLevel === undefined) {
            return false;
        }
        return true;
    }
    loggingIsTurnedOff(configuration) {
        const { logLevel } = configuration || {};
        return logLevel === LogLevel.None;
    }
    isObject(possibleObject) {
        return Object.prototype.toString.call(possibleObject) === '[object Object]';
    }
}
LoggerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: LoggerService, deps: [{ token: i1.AbstractLoggerService }], target: i0.ɵɵFactoryTarget.Injectable });
LoggerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: LoggerService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: LoggerService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.AbstractLoggerService }]; } });
//# sourceMappingURL=data:application/json;base64,