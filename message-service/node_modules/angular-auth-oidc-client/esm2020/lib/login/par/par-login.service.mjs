import { Injectable } from '@angular/core';
import { of, throwError } from 'rxjs';
import { switchMap, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../logging/logger.service";
import * as i2 from "../response-type-validation/response-type-validation.service";
import * as i3 from "../../utils/url/url.service";
import * as i4 from "../../utils/redirect/redirect.service";
import * as i5 from "../../config/auth-well-known/auth-well-known.service";
import * as i6 from "../popup/popup.service";
import * as i7 from "../../auth-state/check-auth.service";
import * as i8 from "./par.service";
export class ParLoginService {
    constructor(loggerService, responseTypeValidationService, urlService, redirectService, authWellKnownService, popupService, checkAuthService, parService) {
        this.loggerService = loggerService;
        this.responseTypeValidationService = responseTypeValidationService;
        this.urlService = urlService;
        this.redirectService = redirectService;
        this.authWellKnownService = authWellKnownService;
        this.popupService = popupService;
        this.checkAuthService = checkAuthService;
        this.parService = parService;
    }
    loginPar(configuration, authOptions) {
        if (!this.responseTypeValidationService.hasConfigValidResponseType(configuration)) {
            this.loggerService.logError(configuration, 'Invalid response type!');
            return;
        }
        this.loggerService.logDebug(configuration, 'BEGIN Authorize OIDC Flow, no auth data');
        const { urlHandler, customParams } = authOptions || {};
        this.authWellKnownService
            .queryAndStoreAuthWellKnownEndPoints(configuration)
            .pipe(switchMap(() => this.parService.postParRequest(configuration, customParams)))
            .subscribe((response) => {
            this.loggerService.logDebug(configuration, 'par response: ', response);
            const url = this.urlService.getAuthorizeParUrl(response.requestUri, configuration);
            this.loggerService.logDebug(configuration, 'par request url: ', url);
            if (!url) {
                this.loggerService.logError(configuration, `Could not create URL with param ${response.requestUri}: '${url}'`);
                return;
            }
            if (urlHandler) {
                urlHandler(url);
            }
            else {
                this.redirectService.redirectTo(url);
            }
        });
    }
    loginWithPopUpPar(configuration, allConfigs, authOptions, popupOptions) {
        const { configId } = configuration;
        if (!this.responseTypeValidationService.hasConfigValidResponseType(configuration)) {
            const errorMessage = 'Invalid response type!';
            this.loggerService.logError(configuration, errorMessage);
            return throwError(() => new Error(errorMessage));
        }
        this.loggerService.logDebug(configuration, 'BEGIN Authorize OIDC Flow with popup, no auth data');
        const { customParams } = authOptions || {};
        return this.authWellKnownService.queryAndStoreAuthWellKnownEndPoints(configuration).pipe(switchMap(() => this.parService.postParRequest(configuration, customParams)), switchMap((response) => {
            this.loggerService.logDebug(configuration, 'par response: ', response);
            const url = this.urlService.getAuthorizeParUrl(response.requestUri, configuration);
            this.loggerService.logDebug(configuration, 'par request url: ', url);
            if (!url) {
                const errorMessage = `Could not create URL with param ${response.requestUri}: 'url'`;
                this.loggerService.logError(configuration, errorMessage);
                return throwError(() => new Error(errorMessage));
            }
            this.popupService.openPopUp(url, popupOptions);
            return this.popupService.result$.pipe(take(1), switchMap((result) => {
                const { userClosed, receivedUrl } = result;
                if (userClosed) {
                    return of({
                        isAuthenticated: false,
                        errorMessage: 'User closed popup',
                        userData: null,
                        idToken: null,
                        accessToken: null,
                        configId,
                    });
                }
                return this.checkAuthService.checkAuth(configuration, allConfigs, receivedUrl);
            }));
        }));
    }
}
ParLoginService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: ParLoginService, deps: [{ token: i1.LoggerService }, { token: i2.ResponseTypeValidationService }, { token: i3.UrlService }, { token: i4.RedirectService }, { token: i5.AuthWellKnownService }, { token: i6.PopUpService }, { token: i7.CheckAuthService }, { token: i8.ParService }], target: i0.ɵɵFactoryTarget.Injectable });
ParLoginService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: ParLoginService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: ParLoginService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LoggerService }, { type: i2.ResponseTypeValidationService }, { type: i3.UrlService }, { type: i4.RedirectService }, { type: i5.AuthWellKnownService }, { type: i6.PopUpService }, { type: i7.CheckAuthService }, { type: i8.ParService }]; } });
//# sourceMappingURL=data:application/json;base64,