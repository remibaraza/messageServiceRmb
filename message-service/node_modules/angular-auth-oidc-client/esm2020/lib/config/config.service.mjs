import { Injectable } from '@angular/core';
import { forkJoin, of } from 'rxjs';
import { concatMap, map } from 'rxjs/operators';
import { EventTypes } from '../public-events/event-types';
import { DEFAULT_CONFIG } from './default-config';
import * as i0 from "@angular/core";
import * as i1 from "../logging/logger.service";
import * as i2 from "../public-events/public-events.service";
import * as i3 from "../storage/storage-persistence.service";
import * as i4 from "./validation/config-validation.service";
import * as i5 from "../utils/platform-provider/platform.provider";
import * as i6 from "./auth-well-known/auth-well-known.service";
import * as i7 from "./loader/config-loader";
export class ConfigurationService {
    constructor(loggerService, publicEventsService, storagePersistenceService, configValidationService, platformProvider, authWellKnownService, loader) {
        this.loggerService = loggerService;
        this.publicEventsService = publicEventsService;
        this.storagePersistenceService = storagePersistenceService;
        this.configValidationService = configValidationService;
        this.platformProvider = platformProvider;
        this.authWellKnownService = authWellKnownService;
        this.loader = loader;
        this.configsInternal = {};
    }
    hasManyConfigs() {
        return Object.keys(this.configsInternal).length > 1;
    }
    getAllConfigurations() {
        return Object.values(this.configsInternal);
    }
    getOpenIDConfiguration(configId) {
        if (this.configsAlreadySaved()) {
            return of(this.getConfig(configId));
        }
        return this.getOpenIDConfigurations(configId).pipe(map((result) => result.currentConfig));
    }
    getOpenIDConfigurations(configId) {
        return this.loadConfigs().pipe(concatMap((allConfigs) => this.prepareAndSaveConfigs(allConfigs)), map((allPreparedConfigs) => ({
            allConfigs: allPreparedConfigs,
            currentConfig: this.getConfig(configId),
        })));
    }
    hasAtLeastOneConfig() {
        return Object.keys(this.configsInternal).length > 0;
    }
    saveConfig(readyConfig) {
        const { configId } = readyConfig;
        this.configsInternal[configId] = readyConfig;
    }
    loadConfigs() {
        return this.loader.loadConfigs();
    }
    configsAlreadySaved() {
        return this.hasAtLeastOneConfig();
    }
    getConfig(configId) {
        if (!!configId) {
            return this.configsInternal[configId] || null;
        }
        const [, value] = Object.entries(this.configsInternal)[0] || [[null, null]];
        return value || null;
    }
    prepareAndSaveConfigs(passedConfigs) {
        if (!this.configValidationService.validateConfigs(passedConfigs)) {
            return of(null);
        }
        this.createUniqueIds(passedConfigs);
        const allHandleConfigs$ = passedConfigs.map((x) => this.handleConfig(x));
        return forkJoin(allHandleConfigs$);
    }
    createUniqueIds(passedConfigs) {
        passedConfigs.forEach((config, index) => {
            if (!config.configId) {
                config.configId = `${index}-${config.clientId}`;
            }
        });
    }
    handleConfig(passedConfig) {
        if (!this.configValidationService.validateConfig(passedConfig)) {
            this.loggerService.logError(passedConfig, 'Validation of config rejected with errors. Config is NOT set.');
            return of(null);
        }
        if (!passedConfig.authWellknownEndpointUrl) {
            passedConfig.authWellknownEndpointUrl = passedConfig.authority;
        }
        const usedConfig = this.prepareConfig(passedConfig);
        this.saveConfig(usedConfig);
        const configWithAuthWellKnown = this.enhanceConfigWithWellKnownEndpoint(usedConfig);
        this.publicEventsService.fireEvent(EventTypes.ConfigLoaded, configWithAuthWellKnown);
        return of(usedConfig);
    }
    enhanceConfigWithWellKnownEndpoint(configuration) {
        const alreadyExistingAuthWellKnownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);
        if (!!alreadyExistingAuthWellKnownEndpoints) {
            configuration.authWellknownEndpoints = alreadyExistingAuthWellKnownEndpoints;
            return configuration;
        }
        const passedAuthWellKnownEndpoints = configuration.authWellknownEndpoints;
        if (!!passedAuthWellKnownEndpoints) {
            this.authWellKnownService.storeWellKnownEndpoints(configuration, passedAuthWellKnownEndpoints);
            configuration.authWellknownEndpoints = passedAuthWellKnownEndpoints;
            return configuration;
        }
        return configuration;
    }
    prepareConfig(configuration) {
        const openIdConfigurationInternal = { ...DEFAULT_CONFIG, ...configuration };
        this.setSpecialCases(openIdConfigurationInternal);
        return openIdConfigurationInternal;
    }
    setSpecialCases(currentConfig) {
        if (!this.platformProvider.isBrowser()) {
            currentConfig.startCheckSession = false;
            currentConfig.silentRenew = false;
            currentConfig.useRefreshToken = false;
            currentConfig.usePushedAuthorisationRequests = false;
        }
    }
}
ConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: ConfigurationService, deps: [{ token: i1.LoggerService }, { token: i2.PublicEventsService }, { token: i3.StoragePersistenceService }, { token: i4.ConfigValidationService }, { token: i5.PlatformProvider }, { token: i6.AuthWellKnownService }, { token: i7.StsConfigLoader }], target: i0.ɵɵFactoryTarget.Injectable });
ConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: ConfigurationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: ConfigurationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LoggerService }, { type: i2.PublicEventsService }, { type: i3.StoragePersistenceService }, { type: i4.ConfigValidationService }, { type: i5.PlatformProvider }, { type: i6.AuthWellKnownService }, { type: i7.StsConfigLoader }]; } });
//# sourceMappingURL=data:application/json;base64,