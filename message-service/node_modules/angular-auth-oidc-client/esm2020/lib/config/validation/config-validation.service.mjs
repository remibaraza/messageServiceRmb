import { Injectable } from '@angular/core';
import { allRules } from './rules';
import { allMultipleConfigRules } from './rules/index';
import * as i0 from "@angular/core";
import * as i1 from "../../logging/logger.service";
export class ConfigValidationService {
    constructor(loggerService) {
        this.loggerService = loggerService;
    }
    validateConfigs(passedConfigs) {
        return this.validateConfigsInternal(passedConfigs ?? [], allMultipleConfigRules);
    }
    validateConfig(passedConfig) {
        return this.validateConfigInternal(passedConfig, allRules);
    }
    validateConfigsInternal(passedConfigs, allRulesToUse) {
        const allValidationResults = allRulesToUse.map((rule) => rule(passedConfigs));
        let overallErrorCount = 0;
        passedConfigs.forEach((passedConfig) => {
            const errorCount = this.processValidationResultsAndGetErrorCount(allValidationResults, passedConfig);
            overallErrorCount += errorCount;
        });
        return overallErrorCount === 0;
    }
    validateConfigInternal(passedConfig, allRulesToUse) {
        const allValidationResults = allRulesToUse.map((rule) => rule(passedConfig));
        const errorCount = this.processValidationResultsAndGetErrorCount(allValidationResults, passedConfig);
        return errorCount === 0;
    }
    processValidationResultsAndGetErrorCount(allValidationResults, config) {
        const allMessages = allValidationResults.filter((x) => x.messages.length > 0);
        const allErrorMessages = this.getAllMessagesOfType('error', allMessages);
        const allWarnings = this.getAllMessagesOfType('warning', allMessages);
        allErrorMessages.forEach((message) => this.loggerService.logError(config, message));
        allWarnings.forEach((message) => this.loggerService.logWarning(config, message));
        return allErrorMessages.length;
    }
    getAllMessagesOfType(type, results) {
        const allMessages = results.filter((x) => x.level === type).map((result) => result.messages);
        return allMessages.reduce((acc, val) => acc.concat(val), []);
    }
}
ConfigValidationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: ConfigValidationService, deps: [{ token: i1.LoggerService }], target: i0.ɵɵFactoryTarget.Injectable });
ConfigValidationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: ConfigValidationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: ConfigValidationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LoggerService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLXZhbGlkYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYXV0aC1vaWRjLWNsaWVudC9zcmMvbGliL2NvbmZpZy92YWxpZGF0aW9uL2NvbmZpZy12YWxpZGF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBR3ZELE1BQU0sT0FBTyx1QkFBdUI7SUFDbEMsWUFBNkIsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7SUFBRyxDQUFDO0lBRTdELGVBQWUsQ0FBQyxhQUFvQztRQUNsRCxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxhQUFhLElBQUksRUFBRSxFQUFFLHNCQUFzQixDQUFDLENBQUM7SUFDbkYsQ0FBQztJQUVELGNBQWMsQ0FBQyxZQUFpQztRQUM5QyxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVPLHVCQUF1QixDQUFDLGFBQW9DLEVBQUUsYUFBb0I7UUFDeEYsTUFBTSxvQkFBb0IsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUU5RSxJQUFJLGlCQUFpQixHQUFHLENBQUMsQ0FBQztRQUUxQixhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQUU7WUFDckMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLHdDQUF3QyxDQUFDLG9CQUFvQixFQUFFLFlBQVksQ0FBQyxDQUFDO1lBRXJHLGlCQUFpQixJQUFJLFVBQVUsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8saUJBQWlCLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTyxzQkFBc0IsQ0FBQyxZQUFpQyxFQUFFLGFBQW9CO1FBQ3BGLE1BQU0sb0JBQW9CLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFFN0UsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLHdDQUF3QyxDQUFDLG9CQUFvQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRXJHLE9BQU8sVUFBVSxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRU8sd0NBQXdDLENBQUMsb0JBQTRDLEVBQUUsTUFBMkI7UUFDeEgsTUFBTSxXQUFXLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5RSxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDekUsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUV0RSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3BGLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRWpGLE9BQU8sZ0JBQWdCLENBQUMsTUFBTSxDQUFDO0lBQ2pDLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxJQUFXLEVBQUUsT0FBK0I7UUFDdkUsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU3RixPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELENBQUM7O29IQWhEVSx1QkFBdUI7d0hBQXZCLHVCQUF1QjsyRkFBdkIsdUJBQXVCO2tCQURuQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMb2dnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vbG9nZ2luZy9sb2dnZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IE9wZW5JZENvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi9vcGVuaWQtY29uZmlndXJhdGlvbic7XHJcbmltcG9ydCB7IExldmVsLCBSdWxlVmFsaWRhdGlvblJlc3VsdCB9IGZyb20gJy4vcnVsZSc7XHJcbmltcG9ydCB7IGFsbFJ1bGVzIH0gZnJvbSAnLi9ydWxlcyc7XHJcbmltcG9ydCB7IGFsbE11bHRpcGxlQ29uZmlnUnVsZXMgfSBmcm9tICcuL3J1bGVzL2luZGV4JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIENvbmZpZ1ZhbGlkYXRpb25TZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGxvZ2dlclNlcnZpY2U6IExvZ2dlclNlcnZpY2UpIHt9XHJcblxyXG4gIHZhbGlkYXRlQ29uZmlncyhwYXNzZWRDb25maWdzOiBPcGVuSWRDb25maWd1cmF0aW9uW10pOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlQ29uZmlnc0ludGVybmFsKHBhc3NlZENvbmZpZ3MgPz8gW10sIGFsbE11bHRpcGxlQ29uZmlnUnVsZXMpO1xyXG4gIH1cclxuXHJcbiAgdmFsaWRhdGVDb25maWcocGFzc2VkQ29uZmlnOiBPcGVuSWRDb25maWd1cmF0aW9uKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUNvbmZpZ0ludGVybmFsKHBhc3NlZENvbmZpZywgYWxsUnVsZXMpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB2YWxpZGF0ZUNvbmZpZ3NJbnRlcm5hbChwYXNzZWRDb25maWdzOiBPcGVuSWRDb25maWd1cmF0aW9uW10sIGFsbFJ1bGVzVG9Vc2U6IGFueVtdKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBhbGxWYWxpZGF0aW9uUmVzdWx0cyA9IGFsbFJ1bGVzVG9Vc2UubWFwKChydWxlKSA9PiBydWxlKHBhc3NlZENvbmZpZ3MpKTtcclxuXHJcbiAgICBsZXQgb3ZlcmFsbEVycm9yQ291bnQgPSAwO1xyXG5cclxuICAgIHBhc3NlZENvbmZpZ3MuZm9yRWFjaCgocGFzc2VkQ29uZmlnKSA9PiB7XHJcbiAgICAgIGNvbnN0IGVycm9yQ291bnQgPSB0aGlzLnByb2Nlc3NWYWxpZGF0aW9uUmVzdWx0c0FuZEdldEVycm9yQ291bnQoYWxsVmFsaWRhdGlvblJlc3VsdHMsIHBhc3NlZENvbmZpZyk7XHJcblxyXG4gICAgICBvdmVyYWxsRXJyb3JDb3VudCArPSBlcnJvckNvdW50O1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIG92ZXJhbGxFcnJvckNvdW50ID09PSAwO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB2YWxpZGF0ZUNvbmZpZ0ludGVybmFsKHBhc3NlZENvbmZpZzogT3BlbklkQ29uZmlndXJhdGlvbiwgYWxsUnVsZXNUb1VzZTogYW55W10pOiBib29sZWFuIHtcclxuICAgIGNvbnN0IGFsbFZhbGlkYXRpb25SZXN1bHRzID0gYWxsUnVsZXNUb1VzZS5tYXAoKHJ1bGUpID0+IHJ1bGUocGFzc2VkQ29uZmlnKSk7XHJcblxyXG4gICAgY29uc3QgZXJyb3JDb3VudCA9IHRoaXMucHJvY2Vzc1ZhbGlkYXRpb25SZXN1bHRzQW5kR2V0RXJyb3JDb3VudChhbGxWYWxpZGF0aW9uUmVzdWx0cywgcGFzc2VkQ29uZmlnKTtcclxuXHJcbiAgICByZXR1cm4gZXJyb3JDb3VudCA9PT0gMDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcHJvY2Vzc1ZhbGlkYXRpb25SZXN1bHRzQW5kR2V0RXJyb3JDb3VudChhbGxWYWxpZGF0aW9uUmVzdWx0czogUnVsZVZhbGlkYXRpb25SZXN1bHRbXSwgY29uZmlnOiBPcGVuSWRDb25maWd1cmF0aW9uKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IGFsbE1lc3NhZ2VzID0gYWxsVmFsaWRhdGlvblJlc3VsdHMuZmlsdGVyKCh4KSA9PiB4Lm1lc3NhZ2VzLmxlbmd0aCA+IDApO1xyXG4gICAgY29uc3QgYWxsRXJyb3JNZXNzYWdlcyA9IHRoaXMuZ2V0QWxsTWVzc2FnZXNPZlR5cGUoJ2Vycm9yJywgYWxsTWVzc2FnZXMpO1xyXG4gICAgY29uc3QgYWxsV2FybmluZ3MgPSB0aGlzLmdldEFsbE1lc3NhZ2VzT2ZUeXBlKCd3YXJuaW5nJywgYWxsTWVzc2FnZXMpO1xyXG5cclxuICAgIGFsbEVycm9yTWVzc2FnZXMuZm9yRWFjaCgobWVzc2FnZSkgPT4gdGhpcy5sb2dnZXJTZXJ2aWNlLmxvZ0Vycm9yKGNvbmZpZywgbWVzc2FnZSkpO1xyXG4gICAgYWxsV2FybmluZ3MuZm9yRWFjaCgobWVzc2FnZSkgPT4gdGhpcy5sb2dnZXJTZXJ2aWNlLmxvZ1dhcm5pbmcoY29uZmlnLCBtZXNzYWdlKSk7XHJcblxyXG4gICAgcmV0dXJuIGFsbEVycm9yTWVzc2FnZXMubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRBbGxNZXNzYWdlc09mVHlwZSh0eXBlOiBMZXZlbCwgcmVzdWx0czogUnVsZVZhbGlkYXRpb25SZXN1bHRbXSk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IGFsbE1lc3NhZ2VzID0gcmVzdWx0cy5maWx0ZXIoKHgpID0+IHgubGV2ZWwgPT09IHR5cGUpLm1hcCgocmVzdWx0KSA9PiByZXN1bHQubWVzc2FnZXMpO1xyXG5cclxuICAgIHJldHVybiBhbGxNZXNzYWdlcy5yZWR1Y2UoKGFjYywgdmFsKSA9PiBhY2MuY29uY2F0KHZhbCksIFtdKTtcclxuICB9XHJcbn1cclxuIl19