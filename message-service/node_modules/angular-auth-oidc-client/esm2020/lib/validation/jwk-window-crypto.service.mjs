import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../utils/crypto/crypto-service";
export class JwkWindowCryptoService {
    constructor(cryptoService) {
        this.cryptoService = cryptoService;
    }
    importVerificationKey(key, algorithm) {
        return this.cryptoService.getCrypto().subtle.importKey('jwk', key, algorithm, false, ['verify']);
    }
    verifyKey(verifyAlgorithm, cryptoKey, signature, signingInput) {
        return this.cryptoService.getCrypto().subtle.verify(verifyAlgorithm, cryptoKey, signature, new TextEncoder().encode(signingInput));
    }
}
JwkWindowCryptoService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: JwkWindowCryptoService, deps: [{ token: i1.CryptoService }], target: i0.ɵɵFactoryTarget.Injectable });
JwkWindowCryptoService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: JwkWindowCryptoService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: JwkWindowCryptoService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.CryptoService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiandrLXdpbmRvdy1jcnlwdG8uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYXV0aC1vaWRjLWNsaWVudC9zcmMvbGliL3ZhbGlkYXRpb24vandrLXdpbmRvdy1jcnlwdG8uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFJM0MsTUFBTSxPQUFPLHNCQUFzQjtJQUNqQyxZQUE2QixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtJQUFHLENBQUM7SUFFN0QscUJBQXFCLENBQUMsR0FBZSxFQUFFLFNBQStHO1FBQ3BKLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDbkcsQ0FBQztJQUVELFNBQVMsQ0FBQyxlQUFpRSxFQUFFLFNBQW9CLEVBQUUsU0FBdUIsRUFBRSxZQUFvQjtRQUM5SSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxJQUFJLFdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFBO0lBQ3BJLENBQUM7O21IQVRVLHNCQUFzQjt1SEFBdEIsc0JBQXNCOzJGQUF0QixzQkFBc0I7a0JBRGxDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENyeXB0b1NlcnZpY2UgfSBmcm9tICcuLi91dGlscy9jcnlwdG8vY3J5cHRvLXNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSndrV2luZG93Q3J5cHRvU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjcnlwdG9TZXJ2aWNlOiBDcnlwdG9TZXJ2aWNlKSB7fVxyXG5cclxuICBpbXBvcnRWZXJpZmljYXRpb25LZXkoa2V5OiBKc29uV2ViS2V5LCBhbGdvcml0aG06IEFsZ29yaXRobUlkZW50aWZpZXIgfCBSc2FIYXNoZWRJbXBvcnRQYXJhbXMgfCBFY0tleUltcG9ydFBhcmFtcyB8IEhtYWNJbXBvcnRQYXJhbXMgfCBBZXNLZXlBbGdvcml0aG0pOiBQcm9taXNlPENyeXB0b0tleT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY3J5cHRvU2VydmljZS5nZXRDcnlwdG8oKS5zdWJ0bGUuaW1wb3J0S2V5KCdqd2snLCBrZXksIGFsZ29yaXRobSwgZmFsc2UsIFsndmVyaWZ5J10pO1xyXG4gIH1cclxuXHJcbiAgdmVyaWZ5S2V5KHZlcmlmeUFsZ29yaXRobTogQWxnb3JpdGhtSWRlbnRpZmllciB8IFJzYVBzc1BhcmFtcyB8IEVjZHNhUGFyYW1zLCBjcnlwdG9LZXk6IENyeXB0b0tleSwgc2lnbmF0dXJlOiBCdWZmZXJTb3VyY2UsIHNpZ25pbmdJbnB1dDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm4gdGhpcy5jcnlwdG9TZXJ2aWNlLmdldENyeXB0bygpLnN1YnRsZS52ZXJpZnkodmVyaWZ5QWxnb3JpdGhtLCBjcnlwdG9LZXksIHNpZ25hdHVyZSwgbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHNpZ25pbmdJbnB1dCkpXHJcbiAgfVxyXG59XHJcbiJdfQ==