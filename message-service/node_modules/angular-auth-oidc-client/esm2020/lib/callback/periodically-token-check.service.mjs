import { Injectable } from '@angular/core';
import { forkJoin, of, throwError } from 'rxjs';
import { catchError, switchMap } from 'rxjs/operators';
import { EventTypes } from '../public-events/event-types';
import * as i0 from "@angular/core";
import * as i1 from "../flows/reset-auth-data.service";
import * as i2 from "../utils/flowHelper/flow-helper.service";
import * as i3 from "../flows/flows-data.service";
import * as i4 from "../logging/logger.service";
import * as i5 from "../user-data/user.service";
import * as i6 from "../auth-state/auth-state.service";
import * as i7 from "../iframe/refresh-session-iframe.service";
import * as i8 from "./refresh-session-refresh-token.service";
import * as i9 from "./interval.service";
import * as i10 from "../storage/storage-persistence.service";
import * as i11 from "../public-events/public-events.service";
import * as i12 from "../config/config.service";
export class PeriodicallyTokenCheckService {
    constructor(resetAuthDataService, flowHelper, flowsDataService, loggerService, userService, authStateService, refreshSessionIframeService, refreshSessionRefreshTokenService, intervalService, storagePersistenceService, publicEventsService, configurationService) {
        this.resetAuthDataService = resetAuthDataService;
        this.flowHelper = flowHelper;
        this.flowsDataService = flowsDataService;
        this.loggerService = loggerService;
        this.userService = userService;
        this.authStateService = authStateService;
        this.refreshSessionIframeService = refreshSessionIframeService;
        this.refreshSessionRefreshTokenService = refreshSessionRefreshTokenService;
        this.intervalService = intervalService;
        this.storagePersistenceService = storagePersistenceService;
        this.publicEventsService = publicEventsService;
        this.configurationService = configurationService;
    }
    startTokenValidationPeriodically(allConfigs, currentConfig) {
        const configsWithSilentRenewEnabled = this.getConfigsWithSilentRenewEnabled(allConfigs);
        if (configsWithSilentRenewEnabled.length <= 0) {
            return;
        }
        if (this.intervalService.isTokenValidationRunning()) {
            return;
        }
        const refreshTimeInSeconds = this.getSmallestRefreshTimeFromConfigs(configsWithSilentRenewEnabled);
        const periodicallyCheck$ = this.intervalService.startPeriodicTokenCheck(refreshTimeInSeconds).pipe(switchMap(() => {
            const objectWithConfigIdsAndRefreshEvent = {};
            configsWithSilentRenewEnabled.forEach((config) => {
                objectWithConfigIdsAndRefreshEvent[config.configId] = this.getRefreshEvent(config, allConfigs);
            });
            return forkJoin(objectWithConfigIdsAndRefreshEvent);
        }));
        this.intervalService.runTokenValidationRunning = periodicallyCheck$
            .pipe(catchError((error) => throwError(() => new Error(error))))
            .subscribe({
            next: (objectWithConfigIds) => {
                for (const [configId, _] of Object.entries(objectWithConfigIds)) {
                    this.configurationService.getOpenIDConfiguration(configId).subscribe((config) => {
                        this.loggerService.logDebug(config, 'silent renew, periodic check finished!');
                        if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {
                            this.flowsDataService.resetSilentRenewRunning(config);
                        }
                    });
                }
            },
            error: (error) => {
                this.loggerService.logError(currentConfig, 'silent renew failed!', error);
            },
        });
    }
    getRefreshEvent(config, allConfigs) {
        const shouldStartRefreshEvent = this.shouldStartPeriodicallyCheckForConfig(config);
        if (!shouldStartRefreshEvent) {
            return of(null);
        }
        const refreshEvent$ = this.createRefreshEventForConfig(config, allConfigs);
        this.publicEventsService.fireEvent(EventTypes.SilentRenewStarted);
        const refreshEventWithErrorHandler$ = refreshEvent$.pipe(catchError((error) => {
            this.loggerService.logError(config, 'silent renew failed!', error);
            this.flowsDataService.resetSilentRenewRunning(config);
            return throwError(() => new Error(error));
        }));
        return refreshEventWithErrorHandler$;
    }
    getSmallestRefreshTimeFromConfigs(configsWithSilentRenewEnabled) {
        const result = configsWithSilentRenewEnabled.reduce((prev, curr) => prev.tokenRefreshInSeconds < curr.tokenRefreshInSeconds ? prev : curr);
        return result.tokenRefreshInSeconds;
    }
    getConfigsWithSilentRenewEnabled(allConfigs) {
        return allConfigs.filter((x) => x.silentRenew);
    }
    createRefreshEventForConfig(configuration, allConfigs) {
        this.loggerService.logDebug(configuration, 'starting silent renew...');
        return this.configurationService.getOpenIDConfiguration(configuration.configId).pipe(switchMap((config) => {
            if (!config?.silentRenew) {
                this.resetAuthDataService.resetAuthorizationData(config, allConfigs);
                return of(null);
            }
            this.flowsDataService.setSilentRenewRunning(config);
            if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {
                // Retrieve Dynamically Set Custom Params for refresh body
                const customParamsRefresh = this.storagePersistenceService.read('storageCustomParamsRefresh', config) || {};
                const { customParamsRefreshTokenRequest } = config;
                const mergedParams = { ...customParamsRefreshTokenRequest, ...customParamsRefresh };
                // Refresh Session using Refresh tokens
                return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(config, allConfigs, mergedParams);
            }
            // Retrieve Dynamically Set Custom Params
            const customParams = this.storagePersistenceService.read('storageCustomParamsAuthRequest', config);
            return this.refreshSessionIframeService.refreshSessionWithIframe(config, allConfigs, customParams);
        }));
    }
    shouldStartPeriodicallyCheckForConfig(config) {
        const idToken = this.authStateService.getIdToken(config);
        const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning(config);
        const isCodeFlowinProgress = this.flowsDataService.isCodeFlowInProgress(config);
        const userDataFromStore = this.userService.getUserDataFromStore(config);
        this.loggerService.logDebug(config, `Checking: silentRenewRunning: ${isSilentRenewRunning}, isCodeFlowInProgress: ${isCodeFlowinProgress} - has idToken: ${!!idToken} - has userData: ${!!userDataFromStore}`);
        const shouldBeExecuted = !!userDataFromStore && !isSilentRenewRunning && !!idToken && !isCodeFlowinProgress;
        if (!shouldBeExecuted) {
            return false;
        }
        const idTokenStillValid = this.authStateService.hasIdTokenExpiredAndRenewCheckIsEnabled(config);
        const accessTokenHasExpired = this.authStateService.hasAccessTokenExpiredIfExpiryExists(config);
        if (!idTokenStillValid && !accessTokenHasExpired) {
            return false;
        }
        return true;
    }
}
PeriodicallyTokenCheckService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: PeriodicallyTokenCheckService, deps: [{ token: i1.ResetAuthDataService }, { token: i2.FlowHelper }, { token: i3.FlowsDataService }, { token: i4.LoggerService }, { token: i5.UserService }, { token: i6.AuthStateService }, { token: i7.RefreshSessionIframeService }, { token: i8.RefreshSessionRefreshTokenService }, { token: i9.IntervalService }, { token: i10.StoragePersistenceService }, { token: i11.PublicEventsService }, { token: i12.ConfigurationService }], target: i0.ɵɵFactoryTarget.Injectable });
PeriodicallyTokenCheckService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: PeriodicallyTokenCheckService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: PeriodicallyTokenCheckService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.ResetAuthDataService }, { type: i2.FlowHelper }, { type: i3.FlowsDataService }, { type: i4.LoggerService }, { type: i5.UserService }, { type: i6.AuthStateService }, { type: i7.RefreshSessionIframeService }, { type: i8.RefreshSessionRefreshTokenService }, { type: i9.IntervalService }, { type: i10.StoragePersistenceService }, { type: i11.PublicEventsService }, { type: i12.ConfigurationService }]; } });
//# sourceMappingURL=data:application/json;base64,