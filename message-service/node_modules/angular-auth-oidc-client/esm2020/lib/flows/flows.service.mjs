import { Injectable } from '@angular/core';
import { concatMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./callback-handling/code-flow-callback-handler.service";
import * as i2 from "./callback-handling/implicit-flow-callback-handler.service";
import * as i3 from "./callback-handling/history-jwt-keys-callback-handler.service";
import * as i4 from "./callback-handling/user-callback-handler.service";
import * as i5 from "./callback-handling/state-validation-callback-handler.service";
import * as i6 from "./callback-handling/refresh-session-callback-handler.service";
import * as i7 from "./callback-handling/refresh-token-callback-handler.service";
export class FlowsService {
    constructor(codeFlowCallbackHandlerService, implicitFlowCallbackHandlerService, historyJwtKeysCallbackHandlerService, userHandlerService, stateValidationCallbackHandlerService, refreshSessionCallbackHandlerService, refreshTokenCallbackHandlerService) {
        this.codeFlowCallbackHandlerService = codeFlowCallbackHandlerService;
        this.implicitFlowCallbackHandlerService = implicitFlowCallbackHandlerService;
        this.historyJwtKeysCallbackHandlerService = historyJwtKeysCallbackHandlerService;
        this.userHandlerService = userHandlerService;
        this.stateValidationCallbackHandlerService = stateValidationCallbackHandlerService;
        this.refreshSessionCallbackHandlerService = refreshSessionCallbackHandlerService;
        this.refreshTokenCallbackHandlerService = refreshTokenCallbackHandlerService;
    }
    processCodeFlowCallback(urlToCheck, config, allConfigs) {
        return this.codeFlowCallbackHandlerService.codeFlowCallback(urlToCheck, config).pipe(concatMap((callbackContext) => this.codeFlowCallbackHandlerService.codeFlowCodeRequest(callbackContext, config)), concatMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs)), concatMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, config, allConfigs)), concatMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext, config, allConfigs)));
    }
    processSilentRenewCodeFlowCallback(firstContext, config, allConfigs) {
        return this.codeFlowCallbackHandlerService.codeFlowCodeRequest(firstContext, config).pipe(concatMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs)), concatMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, config, allConfigs)), concatMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext, config, allConfigs)));
    }
    processImplicitFlowCallback(config, allConfigs, hash) {
        return this.implicitFlowCallbackHandlerService.implicitFlowCallback(config, allConfigs, hash).pipe(concatMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs)), concatMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, config, allConfigs)), concatMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext, config, allConfigs)));
    }
    processRefreshToken(config, allConfigs, customParamsRefresh) {
        return this.refreshSessionCallbackHandlerService.refreshSessionWithRefreshTokens(config).pipe(concatMap((callbackContext) => this.refreshTokenCallbackHandlerService.refreshTokensRequestTokens(callbackContext, config, customParamsRefresh)), concatMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs)), concatMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, config, allConfigs)), concatMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext, config, allConfigs)));
    }
}
FlowsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: FlowsService, deps: [{ token: i1.CodeFlowCallbackHandlerService }, { token: i2.ImplicitFlowCallbackHandlerService }, { token: i3.HistoryJwtKeysCallbackHandlerService }, { token: i4.UserCallbackHandlerService }, { token: i5.StateValidationCallbackHandlerService }, { token: i6.RefreshSessionCallbackHandlerService }, { token: i7.RefreshTokenCallbackHandlerService }], target: i0.ɵɵFactoryTarget.Injectable });
FlowsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: FlowsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: FlowsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.CodeFlowCallbackHandlerService }, { type: i2.ImplicitFlowCallbackHandlerService }, { type: i3.HistoryJwtKeysCallbackHandlerService }, { type: i4.UserCallbackHandlerService }, { type: i5.StateValidationCallbackHandlerService }, { type: i6.RefreshSessionCallbackHandlerService }, { type: i7.RefreshTokenCallbackHandlerService }]; } });
//# sourceMappingURL=data:application/json;base64,