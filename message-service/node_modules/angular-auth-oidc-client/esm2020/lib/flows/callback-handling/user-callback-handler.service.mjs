import { Injectable } from '@angular/core';
import { of, throwError } from 'rxjs';
import { catchError, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../logging/logger.service";
import * as i2 from "../../auth-state/auth-state.service";
import * as i3 from "../flows-data.service";
import * as i4 from "../../user-data/user.service";
import * as i5 from "../reset-auth-data.service";
export class UserCallbackHandlerService {
    constructor(loggerService, authStateService, flowsDataService, userService, resetAuthDataService) {
        this.loggerService = loggerService;
        this.authStateService = authStateService;
        this.flowsDataService = flowsDataService;
        this.userService = userService;
        this.resetAuthDataService = resetAuthDataService;
    }
    // STEP 5 userData
    callbackUser(callbackContext, configuration, allConfigs) {
        const { isRenewProcess, validationResult, authResult, refreshToken } = callbackContext;
        const { autoUserInfo, renewUserInfoAfterTokenRenew } = configuration;
        if (!autoUserInfo) {
            if (!isRenewProcess || renewUserInfoAfterTokenRenew) {
                // userData is set to the id_token decoded, auto get user data set to false
                if (validationResult.decodedIdToken) {
                    this.userService.setUserDataToStore(validationResult.decodedIdToken, configuration, allConfigs);
                }
            }
            if (!isRenewProcess && !refreshToken) {
                this.flowsDataService.setSessionState(authResult.session_state, configuration);
            }
            this.publishAuthState(validationResult, isRenewProcess);
            return of(callbackContext);
        }
        return this.userService
            .getAndPersistUserDataInStore(configuration, allConfigs, isRenewProcess, validationResult.idToken, validationResult.decodedIdToken)
            .pipe(switchMap((userData) => {
            if (!!userData) {
                if (!refreshToken) {
                    this.flowsDataService.setSessionState(authResult.session_state, configuration);
                }
                this.publishAuthState(validationResult, isRenewProcess);
                return of(callbackContext);
            }
            else {
                this.resetAuthDataService.resetAuthorizationData(configuration, allConfigs);
                this.publishUnauthenticatedState(validationResult, isRenewProcess);
                const errorMessage = `Called for userData but they were ${userData}`;
                this.loggerService.logWarning(configuration, errorMessage);
                return throwError(() => new Error(errorMessage));
            }
        }), catchError((err) => {
            const errorMessage = `Failed to retrieve user info with error:  ${err}`;
            this.loggerService.logWarning(configuration, errorMessage);
            return throwError(() => new Error(errorMessage));
        }));
    }
    publishAuthState(stateValidationResult, isRenewProcess) {
        this.authStateService.updateAndPublishAuthState({
            isAuthenticated: true,
            validationResult: stateValidationResult.state,
            isRenewProcess,
        });
    }
    publishUnauthenticatedState(stateValidationResult, isRenewProcess) {
        this.authStateService.updateAndPublishAuthState({
            isAuthenticated: false,
            validationResult: stateValidationResult.state,
            isRenewProcess,
        });
    }
}
UserCallbackHandlerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: UserCallbackHandlerService, deps: [{ token: i1.LoggerService }, { token: i2.AuthStateService }, { token: i3.FlowsDataService }, { token: i4.UserService }, { token: i5.ResetAuthDataService }], target: i0.ɵɵFactoryTarget.Injectable });
UserCallbackHandlerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: UserCallbackHandlerService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: UserCallbackHandlerService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LoggerService }, { type: i2.AuthStateService }, { type: i3.FlowsDataService }, { type: i4.UserService }, { type: i5.ResetAuthDataService }]; } });
//# sourceMappingURL=data:application/json;base64,