{"version":3,"file":"angular-auth-oidc-client.mjs","sources":["../../../projects/angular-auth-oidc-client/src/lib/api/http-base.service.ts","../../../projects/angular-auth-oidc-client/src/lib/api/data.service.ts","../../../projects/angular-auth-oidc-client/src/lib/public-events/event-types.ts","../../../projects/angular-auth-oidc-client/src/lib/logging/log-level.ts","../../../projects/angular-auth-oidc-client/src/lib/logging/abstract-logger.service.ts","../../../projects/angular-auth-oidc-client/src/lib/logging/logger.service.ts","../../../projects/angular-auth-oidc-client/src/lib/storage/abstract-security-storage.ts","../../../projects/angular-auth-oidc-client/src/lib/storage/browser-storage.service.ts","../../../projects/angular-auth-oidc-client/src/lib/storage/storage-persistence.service.ts","../../../projects/angular-auth-oidc-client/src/lib/public-events/public-events.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/tokenHelper/token-helper.service.ts","../../../projects/angular-auth-oidc-client/src/lib/extractors/jwk.extractor.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/crypto/crypto-service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/jwk-window-crypto.service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/jwt-window-crypto.service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/token-validation.service.ts","../../../projects/angular-auth-oidc-client/src/lib/auth-state/auth-state.service.ts","../../../projects/angular-auth-oidc-client/src/lib/iframe/existing-iframe.service.ts","../../../projects/angular-auth-oidc-client/src/lib/iframe/check-session.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/url/current-url.service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/validation-result.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/url/uri-encoder.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/random/random.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/flows-data.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/flowHelper/flow-helper.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/url/url.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/code-flow-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/user-data/user.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/reset-auth-data.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/implicit-flow-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/signin-key-data.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/history-jwt-keys-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/user-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/state-validation-result.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/equality/equality.service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/state-validation.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/state-validation-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/refresh-session-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/refresh-token-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/flows.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/interval.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/implicit-flow-callback.service.ts","../../../projects/angular-auth-oidc-client/src/lib/iframe/silent-renew.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/code-flow-callback.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/callback.service.ts","../../../projects/angular-auth-oidc-client/src/lib/config/auth-well-known/auth-well-known-data.service.ts","../../../projects/angular-auth-oidc-client/src/lib/config/auth-well-known/auth-well-known.service.ts","../../../projects/angular-auth-oidc-client/src/lib/iframe/refresh-session-iframe.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/refresh-session-refresh-token.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/refresh-session.service.ts","../../../projects/angular-auth-oidc-client/src/lib/config/default-config.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/ensure-authority.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/ensure-clientId.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/ensure-no-duplicated-configs.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/ensure-redirect-url.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/ensure-silentRenewUrl-with-no-refreshtokens.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/use-offline-scope-with-silent-renew.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/index.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/config-validation.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/platform-provider/platform.provider.ts","../../../projects/angular-auth-oidc-client/src/lib/config/loader/config-loader.ts","../../../projects/angular-auth-oidc-client/src/lib/config/config.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/periodically-token-check.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/popup/popup.service.ts","../../../projects/angular-auth-oidc-client/src/lib/auto-login/auto-login.service.ts","../../../projects/angular-auth-oidc-client/src/lib/auth-state/check-auth.service.ts","../../../projects/angular-auth-oidc-client/src/lib/interceptor/closest-matching-route.service.ts","../../../projects/angular-auth-oidc-client/src/lib/logging/console-logger.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/response-type-validation/response-type-validation.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/redirect/redirect.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/par/par.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/par/par-login.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/popup/popup-login.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/standard/standard-login.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/login.service.ts","../../../projects/angular-auth-oidc-client/src/lib/logoff-revoke/logoff-revocation.service.ts","../../../projects/angular-auth-oidc-client/src/lib/oidc.security.service.ts","../../../projects/angular-auth-oidc-client/src/lib/storage/default-sessionstorage.service.ts","../../../projects/angular-auth-oidc-client/src/lib/auth.module.ts","../../../projects/angular-auth-oidc-client/src/lib/auto-login/auto-login-all-routes.guard.ts","../../../projects/angular-auth-oidc-client/src/lib/auto-login/auto-login-partial-routes.guard.ts","../../../projects/angular-auth-oidc-client/src/lib/interceptor/auth.interceptor.ts","../../../projects/angular-auth-oidc-client/src/lib/index.ts","../../../projects/angular-auth-oidc-client/src/public-api.ts","../../../projects/angular-auth-oidc-client/src/angular-auth-oidc-client.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class HttpBaseService {\r\n  constructor(private readonly http: HttpClient) {}\r\n\r\n  get<T>(url: string, params?: { [key: string]: any }): Observable<T> {\r\n    return this.http.get<T>(url, params);\r\n  }\r\n\r\n  post<T>(url: string, body: any, params?: { [key: string]: any }): Observable<T> {\r\n    return this.http.post<T>(url, body, params);\r\n  }\r\n}\r\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { HttpBaseService } from './http-base.service';\r\n\r\nconst NGSW_CUSTOM_PARAM = 'ngsw-bypass';\r\n\r\n@Injectable()\r\nexport class DataService {\r\n  constructor(private readonly httpClient: HttpBaseService) {}\r\n\r\n  get<T>(url: string, config: OpenIdConfiguration, token?: string): Observable<T> {\r\n    const headers = this.prepareHeaders(token);\r\n    const params = this.prepareParams(config);\r\n\r\n    return this.httpClient.get<T>(url, {\r\n      headers,\r\n      params,\r\n    });\r\n  }\r\n\r\n  post<T>(url: string, body: any, config: OpenIdConfiguration, headersParams?: HttpHeaders): Observable<T> {\r\n    const headers = headersParams || this.prepareHeaders();\r\n    const params = this.prepareParams(config);\r\n\r\n    return this.httpClient.post<T>(url, body, { headers, params });\r\n  }\r\n\r\n  private prepareHeaders(token?: string): HttpHeaders {\r\n    let headers = new HttpHeaders();\r\n\r\n    headers = headers.set('Accept', 'application/json');\r\n\r\n    if (!!token) {\r\n      headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  private prepareParams(config: OpenIdConfiguration): HttpParams {\r\n    let params = new HttpParams();\r\n\r\n    const { ngswBypass } = config;\r\n\r\n    if (ngswBypass) {\r\n      params = params.set(NGSW_CUSTOM_PARAM, '');\r\n    }\r\n\r\n    return params;\r\n  }\r\n}\r\n","// eslint-disable-next-line no-shadow\r\nexport enum EventTypes {\r\n  /**\r\n   *  This only works in the AppModule Constructor\r\n   */\r\n  ConfigLoaded,\r\n  CheckingAuth,\r\n  CheckingAuthFinished,\r\n  CheckingAuthFinishedWithError,\r\n  ConfigLoadingFailed,\r\n  CheckSessionReceived,\r\n  UserDataChanged,\r\n  NewAuthenticationResult,\r\n  TokenExpired,\r\n  IdTokenExpired,\r\n  SilentRenewStarted,\r\n}\r\n","export enum LogLevel {\n  None,\n  Debug,\n  Warn,\n  Error,\n}\n","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Implement this class-interface to create a custom logger service.\r\n */\r\n@Injectable()\r\nexport abstract class AbstractLoggerService {\r\n  abstract logError(message: any, ...args: any[]): void;\r\n\r\n  abstract logWarning(message: any, ...args: any[]): void;\r\n\r\n  abstract logDebug(message: any, ...args: any[]): void;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { AbstractLoggerService } from './abstract-logger.service';\r\nimport { LogLevel } from './log-level';\r\n\r\n@Injectable()\r\nexport class LoggerService {\r\n  constructor(private readonly abstractLoggerService: AbstractLoggerService) {}\r\n\r\n  logError(configuration: OpenIdConfiguration, message: any, ...args: any[]): void {\r\n    if (this.loggingIsTurnedOff(configuration)) {\r\n      return;\r\n    }\r\n\r\n    const { configId } = configuration;\r\n    const messageToLog = this.isObject(message) ? JSON.stringify(message) : message;\r\n\r\n    if (!!args && !!args.length) {\r\n      this.abstractLoggerService.logError(`[ERROR] ${configId} - ${messageToLog}`, ...args);\r\n    } else {\r\n      this.abstractLoggerService.logError(`[ERROR] ${configId} - ${messageToLog}`);\r\n    }\r\n  }\r\n\r\n  logWarning(configuration: OpenIdConfiguration, message: any, ...args: any[]): void {\r\n    if (!this.logLevelIsSet(configuration)) {\r\n      return;\r\n    }\r\n\r\n    if (this.loggingIsTurnedOff(configuration)) {\r\n      return;\r\n    }\r\n\r\n    if (!this.currentLogLevelIsEqualOrSmallerThan(configuration, LogLevel.Warn)) {\r\n      return;\r\n    }\r\n\r\n    const { configId } = configuration;\r\n    const messageToLog = this.isObject(message) ? JSON.stringify(message) : message;\r\n\r\n    if (!!args && !!args.length) {\r\n      this.abstractLoggerService.logWarning(`[WARN] ${configId} - ${messageToLog}`, ...args);\r\n    } else {\r\n      this.abstractLoggerService.logWarning(`[WARN] ${configId} - ${messageToLog}`);\r\n    }\r\n  }\r\n\r\n  logDebug(configuration: OpenIdConfiguration, message: any, ...args: any[]): void {\r\n    if (!this.logLevelIsSet(configuration)) {\r\n      return;\r\n    }\r\n\r\n    if (this.loggingIsTurnedOff(configuration)) {\r\n      return;\r\n    }\r\n\r\n    if (!this.currentLogLevelIsEqualOrSmallerThan(configuration, LogLevel.Debug)) {\r\n      return;\r\n    }\r\n\r\n    const { configId } = configuration;\r\n    const messageToLog = this.isObject(message) ? JSON.stringify(message) : message;\r\n\r\n    if (!!args && !!args.length) {\r\n      this.abstractLoggerService.logDebug(`[DEBUG] ${configId} - ${messageToLog}`, ...args);\r\n    } else {\r\n      this.abstractLoggerService.logDebug(`[DEBUG] ${configId} - ${messageToLog}`);\r\n    }\r\n  }\r\n\r\n  private currentLogLevelIsEqualOrSmallerThan(configuration: OpenIdConfiguration, logLevelToCompare: LogLevel): boolean {\r\n    const { logLevel } = configuration || {};\r\n\r\n    return logLevel <= logLevelToCompare;\r\n  }\r\n\r\n  private logLevelIsSet(configuration: OpenIdConfiguration): boolean {\r\n    const { logLevel } = configuration || {};\r\n\r\n    if (logLevel === null) {\r\n      return false;\r\n    }\r\n\r\n    if (logLevel === undefined) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private loggingIsTurnedOff(configuration: OpenIdConfiguration): boolean {\r\n    const { logLevel } = configuration || {};\r\n\r\n    return logLevel === LogLevel.None;\r\n  }\r\n\r\n  private isObject(possibleObject: any): boolean {\r\n    return Object.prototype.toString.call(possibleObject) === '[object Object]';\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Implement this class-interface to create a custom storage.\r\n */\r\n@Injectable()\r\nexport abstract class AbstractSecurityStorage {\r\n  /**\r\n   * This method must contain the logic to read the storage.\r\n   *\r\n   * @return The value of the given key\r\n   */\r\n  abstract read(key: string): any;\r\n\r\n  /**\r\n   * This method must contain the logic to write the storage.\r\n   *\r\n   * @param key The key to write a value for\r\n   * @param value The value for the given key\r\n   */\r\n  abstract write(key: string, value: any): void;\r\n\r\n  /**\r\n   * This method must contain the logic to remove an item from the storage.\r\n   *\r\n   * @param key The value for the key to be removed\r\n   */\r\n  abstract remove(key: string): void;\r\n\r\n  /**\r\n   * This method must contain the logic to remove all items from the storage.\r\n   */\r\n  abstract clear(): void;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { AbstractSecurityStorage } from './abstract-security-storage';\r\n\r\n@Injectable()\r\nexport class BrowserStorageService {\r\n  constructor(private readonly loggerService: LoggerService, private readonly abstractSecurityStorage: AbstractSecurityStorage) {}\r\n\r\n  read(key: string, configuration: OpenIdConfiguration): any {\r\n    const { configId } = configuration;\r\n\r\n    if (!this.hasStorage()) {\r\n      this.loggerService.logDebug(configuration, `Wanted to read '${key}' but Storage was undefined`);\r\n\r\n      return null;\r\n    }\r\n\r\n    const storedConfig = this.abstractSecurityStorage.read(configId);\r\n\r\n    if (!storedConfig) {\r\n      return null;\r\n    }\r\n\r\n    return JSON.parse(storedConfig);\r\n  }\r\n\r\n  write(value: any, configuration: OpenIdConfiguration): boolean {\r\n    const { configId } = configuration;\r\n\r\n    if (!this.hasStorage()) {\r\n      this.loggerService.logDebug(configuration, `Wanted to write '${value}' but Storage was falsy`);\r\n\r\n      return false;\r\n    }\r\n\r\n    value = value || null;\r\n\r\n    this.abstractSecurityStorage.write(configId, JSON.stringify(value));\r\n\r\n    return true;\r\n  }\r\n\r\n  remove(key: string, configuration: OpenIdConfiguration): boolean {\r\n    if (!this.hasStorage()) {\r\n      this.loggerService.logDebug(configuration, `Wanted to remove '${key}' but Storage was falsy`);\r\n\r\n      return false;\r\n    }\r\n\r\n    // const storage = this.getStorage(configuration);\r\n    // if (!storage) {\r\n    //   this.loggerService.logDebug(configuration, `Wanted to write '${key}' but Storage was falsy`);\r\n\r\n    //   return false;\r\n    // }\r\n\r\n    this.abstractSecurityStorage.remove(key);\r\n\r\n    return true;\r\n  }\r\n\r\n  // TODO THIS STORAGE WANTS AN ID BUT CLEARS EVERYTHING\r\n  clear(configuration: OpenIdConfiguration): boolean {\r\n    if (!this.hasStorage()) {\r\n      this.loggerService.logDebug(configuration, `Wanted to clear storage but Storage was falsy`);\r\n\r\n      return false;\r\n    }\r\n\r\n    // const storage = this.getStorage(configuration);\r\n    // if (!storage) {\r\n    //   this.loggerService.logDebug(configuration, `Wanted to clear storage but Storage was falsy`);\r\n\r\n    //   return false;\r\n    // }\r\n\r\n    this.abstractSecurityStorage.clear();\r\n\r\n    return true;\r\n  }\r\n\r\n  private hasStorage(): boolean {\r\n    return typeof Storage !== 'undefined';\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { OpenIdConfiguration } from './../config/openid-configuration';\r\nimport { BrowserStorageService } from './browser-storage.service';\r\n\r\nexport type StorageKeys =\r\n  | 'authnResult'\r\n  | 'authzData'\r\n  | 'access_token_expires_at'\r\n  | 'authWellKnownEndPoints'\r\n  | 'userData'\r\n  | 'authNonce'\r\n  | 'codeVerifier'\r\n  | 'authStateControl'\r\n  | 'reusable_refresh_token'\r\n  | 'session_state'\r\n  | 'storageSilentRenewRunning'\r\n  | 'storageCodeFlowInProgress'\r\n  | 'storageCustomParamsAuthRequest'\r\n  | 'storageCustomParamsRefresh'\r\n  | 'storageCustomParamsEndSession'\r\n  | 'redirect'\r\n  | 'configIds'\r\n  | 'jwtKeys';\r\n\r\n@Injectable()\r\nexport class StoragePersistenceService {\r\n  constructor(private readonly browserStorageService: BrowserStorageService) {}\r\n\r\n  read(key: StorageKeys, config: OpenIdConfiguration): any {\r\n    const storedConfig = this.browserStorageService.read(key, config) || {};\r\n\r\n    return storedConfig[key];\r\n  }\r\n\r\n  write(key: StorageKeys, value: any, config: OpenIdConfiguration): boolean {\r\n    const storedConfig = this.browserStorageService.read(key, config) || {};\r\n\r\n    storedConfig[key] = value;\r\n\r\n    return this.browserStorageService.write(storedConfig, config);\r\n  }\r\n\r\n  remove(key: StorageKeys, config: OpenIdConfiguration): void {\r\n    const storedConfig = this.browserStorageService.read(key, config) || {};\r\n\r\n    delete storedConfig[key];\r\n\r\n    this.browserStorageService.write(storedConfig, config);\r\n  }\r\n\r\n  clear(config: OpenIdConfiguration): void {\r\n    this.browserStorageService.clear(config);\r\n  }\r\n\r\n  resetStorageFlowData(config: OpenIdConfiguration): void {\r\n    this.remove('session_state', config);\r\n    this.remove('storageSilentRenewRunning', config);\r\n    this.remove('storageCodeFlowInProgress', config);\r\n    this.remove('codeVerifier', config);\r\n    this.remove('userData', config);\r\n    this.remove('storageCustomParamsAuthRequest', config);\r\n    this.remove('access_token_expires_at', config);\r\n    this.remove('storageCustomParamsRefresh', config);\r\n    this.remove('storageCustomParamsEndSession', config);\r\n    this.remove('reusable_refresh_token', config);\r\n  }\r\n\r\n  resetAuthStateInStorage(config: OpenIdConfiguration): void {\r\n    this.remove('authzData', config);\r\n    this.remove('reusable_refresh_token', config);\r\n    this.remove('authnResult', config);\r\n  }\r\n\r\n  getAccessToken(config: OpenIdConfiguration): string {\r\n    return this.read('authzData', config);\r\n  }\r\n\r\n  getIdToken(config: OpenIdConfiguration): string {\r\n    return this.read('authnResult', config)?.id_token;\r\n  }\r\n\r\n  getRefreshToken(config: OpenIdConfiguration): string {\r\n    let refreshToken = this.read('authnResult', config)?.refresh_token;\r\n\r\n    if (!refreshToken && config.allowUnsafeReuseRefreshToken) {\r\n      return this.read('reusable_refresh_token', config);\r\n    }\r\n\r\n    return refreshToken;\r\n  }\r\n\r\n  getAuthenticationResult(config: OpenIdConfiguration): any {\r\n    return this.read('authnResult', config);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, ReplaySubject } from 'rxjs';\r\nimport { EventTypes } from './event-types';\r\nimport { OidcClientNotification } from './notification';\r\n\r\n@Injectable()\r\nexport class PublicEventsService {\r\n  private readonly notify = new ReplaySubject<OidcClientNotification<any>>(1);\r\n\r\n  /**\r\n   * Fires a new event.\r\n   *\r\n   * @param type The event type.\r\n   * @param value The event value.\r\n   */\r\n  fireEvent<T>(type: EventTypes, value?: T): void {\r\n    this.notify.next({ type, value });\r\n  }\r\n\r\n  /**\r\n   * Wires up the event notification observable.\r\n   */\r\n  registerForEvents(): Observable<OidcClientNotification<any>> {\r\n    return this.notify.asObservable();\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\n\r\nconst PARTS_OF_TOKEN = 3;\r\n\r\n@Injectable()\r\nexport class TokenHelperService {\r\n  constructor(private readonly loggerService: LoggerService, @Inject(DOCUMENT) private readonly document: Document) {}\r\n\r\n  getTokenExpirationDate(dataIdToken: any): Date {\r\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'exp')) {\r\n      return new Date(new Date().toUTCString());\r\n    }\r\n\r\n    const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n\r\n    date.setUTCSeconds(dataIdToken.exp);\r\n\r\n    return date;\r\n  }\r\n\r\n  getSigningInputFromToken(token: any, encoded: boolean, configuration: OpenIdConfiguration): string {\r\n    if (!this.tokenIsValid(token, configuration)) {\r\n      return '';\r\n    }\r\n\r\n    const header: string = this.getHeaderFromToken(token, encoded, configuration);\r\n    const payload: string = this.getPayloadFromToken(token, encoded, configuration);\r\n\r\n    return [header, payload].join('.');\r\n  }\r\n\r\n  getHeaderFromToken(token: any, encoded: boolean, configuration: OpenIdConfiguration): any {\r\n    if (!this.tokenIsValid(token, configuration)) {\r\n      return {};\r\n    }\r\n\r\n    return this.getPartOfToken(token, 0, encoded);\r\n  }\r\n\r\n  getPayloadFromToken(token: any, encoded: boolean, configuration: OpenIdConfiguration): any {\r\n    if (!this.tokenIsValid(token, configuration)) {\r\n      return {};\r\n    }\r\n\r\n    return this.getPartOfToken(token, 1, encoded);\r\n  }\r\n\r\n  getSignatureFromToken(token: any, encoded: boolean, configuration: OpenIdConfiguration): any {\r\n    if (!this.tokenIsValid(token, configuration)) {\r\n      return {};\r\n    }\r\n\r\n    return this.getPartOfToken(token, 2, encoded);\r\n  }\r\n\r\n  private getPartOfToken(token: string, index: number, encoded: boolean): any {\r\n    const partOfToken = this.extractPartOfToken(token, index);\r\n\r\n    if (encoded) {\r\n      return partOfToken;\r\n    }\r\n\r\n    const result = this.urlBase64Decode(partOfToken);\r\n\r\n    return JSON.parse(result);\r\n  }\r\n\r\n  private urlBase64Decode(str: string): string {\r\n    let output = str.replace(/-/g, '+').replace(/_/g, '/');\r\n\r\n    switch (output.length % 4) {\r\n      case 0:\r\n        break;\r\n      case 2:\r\n        output += '==';\r\n        break;\r\n      case 3:\r\n        output += '=';\r\n        break;\r\n      default:\r\n        throw Error('Illegal base64url string!');\r\n    }\r\n\r\n    const decoded =\r\n      typeof this.document.defaultView !== 'undefined'\r\n        ? this.document.defaultView.atob(output)\r\n        : Buffer.from(output, 'base64').toString('binary');\r\n\r\n    try {\r\n      // Going backwards: from byte stream, to percent-encoding, to original string.\r\n      return decodeURIComponent(\r\n        decoded\r\n          .split('')\r\n          .map((c: string) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n          .join('')\r\n      );\r\n    } catch (err) {\r\n      return decoded;\r\n    }\r\n  }\r\n\r\n  private tokenIsValid(token: string, configuration: OpenIdConfiguration): boolean {\r\n    if (!token) {\r\n      this.loggerService.logError(configuration, `token '${token}' is not valid --> token falsy`);\r\n\r\n      return false;\r\n    }\r\n\r\n    if (!(token as string).includes('.')) {\r\n      this.loggerService.logError(configuration, `token '${token}' is not valid --> no dots included`);\r\n\r\n      return false;\r\n    }\r\n\r\n    const parts = token.split('.');\r\n\r\n    if (parts.length !== PARTS_OF_TOKEN) {\r\n      this.loggerService.logError(configuration, `token '${token}' is not valid --> token has to have exactly ${PARTS_OF_TOKEN - 1} dots`);\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private extractPartOfToken(token: string, index: number): string {\r\n    return token.split('.')[index];\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class JwkExtractor {\r\n  static InvalidArgumentError = {\r\n    name: JwkExtractor.buildErrorName('InvalidArgumentError'),\r\n    message: 'Array of keys was empty. Unable to extract'\r\n  };\r\n\r\n  static NoMatchingKeysError = {\r\n    name: JwkExtractor.buildErrorName('NoMatchingKeysError'),\r\n    message: 'No key found matching the spec'\r\n  };\r\n\r\n  static SeveralMatchingKeysError = {\r\n    name: JwkExtractor.buildErrorName('SeveralMatchingKeysError'),\r\n    message: 'More than one key found. Please use spec to filter'\r\n  };\r\n\r\n  private static buildErrorName(name: string): string {\r\n    return JwkExtractor.name + ': ' + name;\r\n  }\r\n\r\n  extractJwk(keys: JsonWebKey[], spec?: {kid?: string, use?: string, kty?: string}, throwOnEmpty = true): JsonWebKey[] {\r\n    if (0 === keys.length) {\r\n      throw JwkExtractor.InvalidArgumentError;\r\n    }\r\n\r\n    let foundKeys = keys\r\n      .filter((k) => spec?.kid ? k['kid'] === spec.kid : true)\r\n      .filter((k) => spec?.use ? k['use'] === spec.use : true)\r\n      .filter((k) => spec?.kty ? k['kty'] === spec.kty : true);\r\n\r\n    if (foundKeys.length === 0 && throwOnEmpty) {\r\n      throw JwkExtractor.NoMatchingKeysError;\r\n    }\r\n\r\n    if (foundKeys.length > 1 && (null === spec || undefined === spec)) {\r\n      throw JwkExtractor.SeveralMatchingKeysError;\r\n    }\r\n\r\n    return foundKeys;\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n@Injectable()\nexport class CryptoService {\n  constructor(@Inject(DOCUMENT) private readonly doc: any) {}\n\n  getCrypto(): any {\n    // support for IE,  (window.crypto || window.msCrypto)\n    return this.doc.defaultView.crypto || (this.doc.defaultView as any).msCrypto;\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { CryptoService } from '../utils/crypto/crypto-service';\r\n\r\n@Injectable()\r\nexport class JwkWindowCryptoService {\r\n  constructor(private readonly cryptoService: CryptoService) {}\r\n\r\n  importVerificationKey(key: JsonWebKey, algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm): Promise<CryptoKey> {\r\n    return this.cryptoService.getCrypto().subtle.importKey('jwk', key, algorithm, false, ['verify']);\r\n  }\r\n\r\n  verifyKey(verifyAlgorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams, cryptoKey: CryptoKey, signature: BufferSource, signingInput: string): Promise<boolean> {\r\n    return this.cryptoService.getCrypto().subtle.verify(verifyAlgorithm, cryptoKey, signature, new TextEncoder().encode(signingInput))\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { from, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { CryptoService } from '../utils/crypto/crypto-service';\r\n\r\n@Injectable()\r\nexport class JwtWindowCryptoService {\r\n  constructor(private readonly cryptoService: CryptoService) {}\r\n\r\n  generateCodeChallenge(codeVerifier: string): Observable<string> {\r\n    return this.calcHash(codeVerifier).pipe(map((challengeRaw: string) => this.base64UrlEncode(challengeRaw)));\r\n  }\r\n\r\n  generateAtHash(accessToken: string, algorithm: string): Observable<string> {\r\n    return this.calcHash(accessToken, algorithm).pipe(\r\n      map((tokenHash) => {\r\n        let substr: string = tokenHash.substr(0, tokenHash.length / 2);\r\n        const tokenHashBase64: string = btoa(substr);\r\n\r\n        return tokenHashBase64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\r\n      })\r\n    );\r\n  }\r\n\r\n  private calcHash(valueToHash: string, algorithm = 'SHA-256'): Observable<string> {\r\n    const msgBuffer: Uint8Array = new TextEncoder().encode(valueToHash);\r\n\r\n    return from(this.cryptoService.getCrypto().subtle.digest(algorithm, msgBuffer)).pipe(\r\n      map((hashBuffer: ArrayBuffer) => {\r\n        const hashArray: number[] = Array.from(new Uint8Array(hashBuffer));\r\n\r\n        return this.toHashString(hashArray);\r\n      })\r\n    );\r\n  }\r\n\r\n  private toHashString(byteArray: number[]): string {\r\n    let result = '';\r\n\r\n    for (let e of byteArray) {\r\n      result += String.fromCharCode(e);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  private base64UrlEncode(str): string {\r\n    const base64: string = btoa(str);\r\n\r\n    return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { base64url } from 'rfc4648';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport { map, mergeMap, tap } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { TokenHelperService } from '../utils/tokenHelper/token-helper.service';\r\nimport { JwtWindowCryptoService } from './jwt-window-crypto.service';\r\nimport { JwkExtractor } from '../extractors/jwk.extractor';\r\nimport { JwkWindowCryptoService } from './jwk-window-crypto.service';\r\n\r\n// http://openid.net/specs/openid-connect-implicit-1_0.html\r\n\r\n// id_token\r\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n// MUST exactly match the value of the iss (issuer) Claim.\r\n//\r\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\r\n// or if it contains additional audiences not trusted by the Client.\r\n//\r\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\r\n//\r\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\r\n//\r\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\r\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n//\r\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect\r\n// Core 1.0\r\n// [OpenID.Core] specification.\r\n//\r\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\r\n// for clock skew).\r\n//\r\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n//\r\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\r\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\r\n// is Client specific.\r\n//\r\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\r\n// The meaning and processing of acr Claim Values is out of scope for this document.\r\n//\r\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\r\n// if it determines too much time has elapsed since the last End- User authentication.\r\n\r\n// Access Token Validation\r\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present\r\n// in the ID Token.\r\n\r\n@Injectable()\r\nexport class TokenValidationService {\r\n  static refreshTokenNoncePlaceholder = '--RefreshToken--';\r\n\r\n  keyAlgorithms: string[] = ['HS256', 'HS384', 'HS512', 'RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'PS256', 'PS384', 'PS512'];\r\n\r\n  constructor(\r\n    private readonly tokenHelperService: TokenHelperService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly jwkExtractor: JwkExtractor,\r\n    private readonly jwkWindowCryptoService: JwkWindowCryptoService,\r\n    private readonly jwtWindowCryptoService: JwtWindowCryptoService,\r\n    @Inject(DOCUMENT) private readonly document: any\r\n  ) {}\r\n\r\n  // id_token C7: The current time MUST be before the time represented by the exp Claim\r\n  // (possibly allowing for some small leeway to account for clock skew).\r\n  hasIdTokenExpired(\r\n    token: string,\r\n    configuration: OpenIdConfiguration,\r\n    offsetSeconds?: number,\r\n    disableIdTokenValidation?: boolean\r\n  ): boolean {\r\n    const decoded = this.tokenHelperService.getPayloadFromToken(token, false, configuration);\r\n\r\n    return !this.validateIdTokenExpNotExpired(decoded, configuration, offsetSeconds, disableIdTokenValidation);\r\n  }\r\n\r\n  // id_token C7: The current time MUST be before the time represented by the exp Claim\r\n  // (possibly allowing for some small leeway to account for clock skew).\r\n  validateIdTokenExpNotExpired(\r\n    decodedIdToken: string,\r\n    configuration: OpenIdConfiguration,\r\n    offsetSeconds?: number,\r\n    disableIdTokenValidation?: boolean\r\n  ): boolean {\r\n    if (disableIdTokenValidation) {\r\n      return true;\r\n    }\r\n\r\n    const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(decodedIdToken);\r\n\r\n    offsetSeconds = offsetSeconds || 0;\r\n\r\n    if (!tokenExpirationDate) {\r\n      return false;\r\n    }\r\n\r\n    const tokenExpirationValue = tokenExpirationDate.valueOf();\r\n    const nowWithOffset = this.calculateNowWithOffset(offsetSeconds);\r\n    const tokenNotExpired = tokenExpirationValue > nowWithOffset;\r\n\r\n    this.loggerService.logDebug(\r\n      configuration,\r\n      `Has idToken expired: ${!tokenNotExpired} --> expires in ${this.millisToMinutesAndSeconds(\r\n        tokenExpirationValue - nowWithOffset\r\n      )} , ${new Date(tokenExpirationValue).toLocaleTimeString()} > ${new Date(nowWithOffset).toLocaleTimeString()}`\r\n    );\r\n\r\n    return tokenNotExpired;\r\n  }\r\n\r\n  validateAccessTokenNotExpired(accessTokenExpiresAt: Date, configuration: OpenIdConfiguration, offsetSeconds?: number): boolean {\r\n    // value is optional, so if it does not exist, then it has not expired\r\n    if (!accessTokenExpiresAt) {\r\n      return true;\r\n    }\r\n\r\n    offsetSeconds = offsetSeconds || 0;\r\n    const accessTokenExpirationValue = accessTokenExpiresAt.valueOf();\r\n    const nowWithOffset = this.calculateNowWithOffset(offsetSeconds);\r\n    const tokenNotExpired = accessTokenExpirationValue > nowWithOffset;\r\n\r\n    this.loggerService.logDebug(\r\n      configuration,\r\n      `Has accessToken expired: ${!tokenNotExpired} --> expires in ${this.millisToMinutesAndSeconds(\r\n        accessTokenExpirationValue - nowWithOffset\r\n      )} , ${new Date(accessTokenExpirationValue).toLocaleTimeString()} > ${new Date(nowWithOffset).toLocaleTimeString()}`\r\n    );\r\n\r\n    return tokenNotExpired;\r\n  }\r\n\r\n  // iss\r\n  // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the\r\n  // https scheme that contains scheme, host,\r\n  // and optionally, port number and path components and no query or fragment components.\r\n  //\r\n  // sub\r\n  // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\r\n  // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\r\n  // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\r\n  //\r\n  // aud\r\n  // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an\r\n  // audience value.\r\n  // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\r\n  // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\r\n  //\r\n  // exp\r\n  // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\r\n  // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\r\n  // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\r\n  // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until\r\n  // the date/ time.\r\n  // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\r\n  //\r\n  // iat\r\n  // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from\r\n  // 1970- 01 - 01T00: 00: 00Z as measured\r\n  // in UTC until the date/ time.\r\n  validateRequiredIdToken(dataIdToken: any, configuration: OpenIdConfiguration): boolean {\r\n    let validated = true;\r\n\r\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'iss')) {\r\n      validated = false;\r\n      this.loggerService.logWarning(configuration, 'iss is missing, this is required in the id_token');\r\n    }\r\n\r\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'sub')) {\r\n      validated = false;\r\n      this.loggerService.logWarning(configuration, 'sub is missing, this is required in the id_token');\r\n    }\r\n\r\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'aud')) {\r\n      validated = false;\r\n      this.loggerService.logWarning(configuration, 'aud is missing, this is required in the id_token');\r\n    }\r\n\r\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'exp')) {\r\n      validated = false;\r\n      this.loggerService.logWarning(configuration, 'exp is missing, this is required in the id_token');\r\n    }\r\n\r\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'iat')) {\r\n      validated = false;\r\n      this.loggerService.logWarning(configuration, 'iat is missing, this is required in the id_token');\r\n    }\r\n\r\n    return validated;\r\n  }\r\n\r\n  // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n  // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n  validateIdTokenIatMaxOffset(\r\n    dataIdToken: any,\r\n    maxOffsetAllowedInSeconds: number,\r\n    disableIatOffsetValidation: boolean,\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    if (disableIatOffsetValidation) {\r\n      return true;\r\n    }\r\n\r\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'iat')) {\r\n      return false;\r\n    }\r\n\r\n    const dateTimeIatIdToken = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n\r\n    dateTimeIatIdToken.setUTCSeconds(dataIdToken.iat);\r\n    maxOffsetAllowedInSeconds = maxOffsetAllowedInSeconds || 0;\r\n\r\n    const nowInUtc = new Date(new Date().toUTCString());\r\n    const diff = nowInUtc.valueOf() - dateTimeIatIdToken.valueOf();\r\n    const maxOffsetAllowedInMilliseconds = maxOffsetAllowedInSeconds * 1000;\r\n\r\n    this.loggerService.logDebug(configuration, `validate id token iat max offset ${diff} < ${maxOffsetAllowedInMilliseconds}`);\r\n\r\n    if (diff > 0) {\r\n      return diff < maxOffsetAllowedInMilliseconds;\r\n    }\r\n\r\n    return -diff < maxOffsetAllowedInMilliseconds;\r\n  }\r\n\r\n  // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\r\n  // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\r\n  // The precise method for detecting replay attacks is Client specific.\r\n\r\n  // However the nonce claim SHOULD not be present for the refresh_token grant type\r\n  // https://bitbucket.org/openid/connect/issues/1025/ambiguity-with-how-nonce-is-handled-on\r\n  // The current spec is ambiguous and KeyCloak does send it.\r\n  validateIdTokenNonce(dataIdToken: any, localNonce: any, ignoreNonceAfterRefresh: boolean, configuration: OpenIdConfiguration): boolean {\r\n    const isFromRefreshToken =\r\n      (dataIdToken.nonce === undefined || ignoreNonceAfterRefresh) && localNonce === TokenValidationService.refreshTokenNoncePlaceholder;\r\n\r\n    if (!isFromRefreshToken && dataIdToken.nonce !== localNonce) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        'Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + localNonce\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n  // MUST exactly match the value of the iss (issuer) Claim.\r\n  validateIdTokenIss(dataIdToken: any, authWellKnownEndpointsIssuer: any, configuration: OpenIdConfiguration): boolean {\r\n    if ((dataIdToken.iss as string) !== (authWellKnownEndpointsIssuer as string)) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        'Validate_id_token_iss failed, dataIdToken.iss: ' +\r\n          dataIdToken.iss +\r\n          ' authWellKnownEndpoints issuer:' +\r\n          authWellKnownEndpointsIssuer\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n  // by the iss (issuer) Claim as an audience.\r\n  // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\r\n  // not trusted by the Client.\r\n  validateIdTokenAud(dataIdToken: any, aud: any, configuration: OpenIdConfiguration): boolean {\r\n    if (Array.isArray(dataIdToken.aud)) {\r\n      const result = dataIdToken.aud.includes(aud);\r\n\r\n      if (!result) {\r\n        this.loggerService.logDebug(\r\n          configuration,\r\n          'Validate_id_token_aud array failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud\r\n        );\r\n\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    } else if (dataIdToken.aud !== aud) {\r\n      this.loggerService.logDebug(configuration, 'Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  validateIdTokenAzpExistsIfMoreThanOneAud(dataIdToken: any): boolean {\r\n    if (!dataIdToken) {\r\n      return false;\r\n    }\r\n\r\n    if (Array.isArray(dataIdToken.aud) && dataIdToken.aud.length > 1 && !dataIdToken.azp) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\r\n  validateIdTokenAzpValid(dataIdToken: any, clientId: string): boolean {\r\n    if (!dataIdToken?.azp) {\r\n      return true;\r\n    }\r\n\r\n    if (dataIdToken.azp === clientId) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  validateStateFromHashCallback(state: any, localState: any, configuration: OpenIdConfiguration): boolean {\r\n    if ((state as string) !== (localState as string)) {\r\n      this.loggerService.logDebug(configuration, 'ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + localState);\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\r\n  // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n  // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\r\n  // OpenID Connect Core 1.0 [OpenID.Core] specification.\r\n  validateSignatureIdToken(idToken: string, jwtkeys: any, configuration: OpenIdConfiguration): Observable<boolean> {\r\n    if (!jwtkeys || !jwtkeys.keys) {\r\n      return of(false);\r\n    }\r\n\r\n    const headerData = this.tokenHelperService.getHeaderFromToken(idToken, false, configuration);\r\n\r\n    if (Object.keys(headerData).length === 0 && headerData.constructor === Object) {\r\n      this.loggerService.logWarning(configuration, 'id token has no header data');\r\n\r\n      return of(false);\r\n    }\r\n\r\n    const kid: string = headerData.kid;\r\n    let alg: string = headerData.alg;\r\n\r\n    let keys: JsonWebKey[] = jwtkeys.keys;\r\n    let foundKeys: JsonWebKey[];\r\n    let key: JsonWebKey;\r\n\r\n    if (!this.keyAlgorithms.includes(alg)) {\r\n      this.loggerService.logWarning(configuration, 'alg not supported', alg);\r\n\r\n      return of(false);\r\n    }\r\n\r\n    const kty = this.alg2kty(alg);\r\n    const use = 'sig';\r\n\r\n    try {\r\n      foundKeys = kid ?\r\n        this.jwkExtractor.extractJwk(keys, {kid, kty, use}, false) :\r\n        this.jwkExtractor.extractJwk(keys, {kty, use}, false);\r\n\r\n      if (foundKeys.length === 0) {\r\n        foundKeys = kid ?\r\n          this.jwkExtractor.extractJwk(keys, {kid, kty}) :\r\n          this.jwkExtractor.extractJwk(keys, {kty});\r\n      }\r\n\r\n      key = foundKeys[0];\r\n    } catch (e: any) {\r\n      this.loggerService.logError(configuration, e);\r\n\r\n      return of(false);\r\n    }\r\n\r\n    const algorithm: RsaHashedImportParams | EcKeyImportParams = this.getImportAlg(alg);\r\n\r\n    const signingInput = this.tokenHelperService.getSigningInputFromToken(idToken, true, configuration);\r\n    const rawSignature = this.tokenHelperService.getSignatureFromToken(idToken, true, configuration);\r\n\r\n    const agent: string = this.document.defaultView.navigator.userAgent.toLowerCase();\r\n\r\n    if (agent.indexOf('firefox') > -1 && key.kty === 'EC') {\r\n      key.alg = '';\r\n    }\r\n\r\n    return from(this.jwkWindowCryptoService.importVerificationKey(key, algorithm)).pipe(\r\n      mergeMap((cryptoKey: CryptoKey) => {\r\n        const signature: Uint8Array = base64url.parse(rawSignature, { loose: true });\r\n\r\n        const verifyAlgorithm: RsaHashedImportParams | EcdsaParams = this.getVerifyAlg(alg);\r\n\r\n        return from(this.jwkWindowCryptoService.verifyKey(verifyAlgorithm, cryptoKey, signature, signingInput));\r\n      }),\r\n      tap((isValid: boolean) => {\r\n        if (!isValid) {\r\n          this.loggerService.logWarning(configuration, 'incorrect Signature, validation failed for id_token');\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private getImportAlg(alg: string): RsaHashedImportParams | EcKeyImportParams {\r\n    switch (alg.charAt(0)) {\r\n      case 'R':\r\n        if (alg.includes('256')) {\r\n          return {\r\n            name: 'RSASSA-PKCS1-v1_5',\r\n            hash: 'SHA-256',\r\n          };\r\n        } else if (alg.includes('384')) {\r\n          return {\r\n            name: 'RSASSA-PKCS1-v1_5',\r\n            hash: 'SHA-384',\r\n          };\r\n        } else if (alg.includes('512')) {\r\n          return {\r\n            name: 'RSASSA-PKCS1-v1_5',\r\n            hash: 'SHA-512',\r\n          };\r\n        } else {\r\n          return null;\r\n        }\r\n      case 'E':\r\n        if (alg.includes('256')) {\r\n          return {\r\n            name: 'ECDSA',\r\n            namedCurve: 'P-256',\r\n          };\r\n        } else if (alg.includes('384')) {\r\n          return {\r\n            name: 'ECDSA',\r\n            namedCurve: 'P-384',\r\n          };\r\n        } else {\r\n          return null;\r\n        }\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  private getVerifyAlg(alg: string): RsaHashedImportParams | EcdsaParams {\r\n    switch (alg.charAt(0)) {\r\n      case 'R':\r\n        return {\r\n          name: 'RSASSA-PKCS1-v1_5',\r\n          hash: 'SHA-256',\r\n        };\r\n      case 'E':\r\n        if (alg.includes('256')) {\r\n          return {\r\n            name: 'ECDSA',\r\n            hash: 'SHA-256',\r\n          };\r\n        } else if (alg.includes('384')) {\r\n          return {\r\n            name: 'ECDSA',\r\n            hash: 'SHA-384',\r\n          };\r\n        } else {\r\n          return null;\r\n        }\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  private alg2kty(alg: string): string {\r\n    switch (alg.charAt(0)) {\r\n      case 'R':\r\n        return 'RSA';\r\n\r\n      case 'E':\r\n        return 'EC';\r\n\r\n      default:\r\n        throw new Error('Cannot infer kty from alg: ' + alg);\r\n    }\r\n  }\r\n\r\n  // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\r\n  //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\r\n  ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\r\n  ////    if (!header_data.hasOwnProperty('kid')) {\r\n  ////        // no kid defined in Jose header\r\n  ////        if (jwtkeys.keys.length != 1) {\r\n  ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\r\n  ////            return false;\r\n  ////        }\r\n  ////    }\r\n\r\n  ////    return true;\r\n  //// }\r\n\r\n  // Access Token Validation\r\n  // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n  // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n  // access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n  // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\r\n  // is present in the ID Token.\r\n  validateIdTokenAtHash(accessToken: string, atHash: string, idTokenAlg: string, configuration: OpenIdConfiguration): Observable<boolean> {\r\n    this.loggerService.logDebug(configuration, 'at_hash from the server:' + atHash);\r\n\r\n    // 'sha256' 'sha384' 'sha512'\r\n    let sha = 'SHA-256';\r\n\r\n    if (idTokenAlg.includes('384')) {\r\n      sha = 'SHA-384';\r\n    } else if (idTokenAlg.includes('512')) {\r\n      sha = 'SHA-512';\r\n    }\r\n\r\n    return this.jwtWindowCryptoService.generateAtHash('' + accessToken, sha).pipe(\r\n      mergeMap((hash: string) => {\r\n        this.loggerService.logDebug(configuration, 'at_hash client validation not decoded:' + hash);\r\n        if (hash === atHash) {\r\n          return of(true); // isValid;\r\n        } else {\r\n          return this.jwtWindowCryptoService.generateAtHash('' + decodeURIComponent(accessToken), sha).pipe(\r\n            map((newHash: string) => {\r\n              this.loggerService.logDebug(configuration, '-gen access--' + hash);\r\n\r\n              return newHash === atHash;\r\n            })\r\n          );\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private millisToMinutesAndSeconds(millis: number): string {\r\n    const minutes = Math.floor(millis / 60000);\r\n    const seconds = ((millis % 60000) / 1000).toFixed(0);\r\n\r\n    return minutes + ':' + (+seconds < 10 ? '0' : '') + seconds;\r\n  }\r\n\r\n  private calculateNowWithOffset(offsetSeconds: number): number {\r\n    return new Date(new Date().toUTCString()).valueOf() + offsetSeconds * 1000;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { AuthResult } from '../flows/callback-context';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { EventTypes } from '../public-events/event-types';\r\nimport { PublicEventsService } from '../public-events/public-events.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { TokenValidationService } from '../validation/token-validation.service';\r\nimport { AuthenticatedResult } from './auth-result';\r\nimport { AuthStateResult } from './auth-state';\r\n\r\nconst DEFAULT_AUTHRESULT = { isAuthenticated: false, allConfigsAuthenticated: [] };\r\n\r\n@Injectable()\r\nexport class AuthStateService {\r\n  private readonly authenticatedInternal$ = new BehaviorSubject<AuthenticatedResult>(DEFAULT_AUTHRESULT);\r\n\r\n  get authenticated$(): Observable<AuthenticatedResult> {\r\n    return this.authenticatedInternal$.asObservable().pipe(distinctUntilChanged());\r\n  }\r\n\r\n  constructor(\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly publicEventsService: PublicEventsService,\r\n    private readonly tokenValidationService: TokenValidationService\r\n  ) {}\r\n\r\n  setAuthenticatedAndFireEvent(allConfigs: OpenIdConfiguration[]): void {\r\n    const result = this.composeAuthenticatedResult(allConfigs);\r\n\r\n    this.authenticatedInternal$.next(result);\r\n  }\r\n\r\n  setUnauthenticatedAndFireEvent(currentConfig: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): void {\r\n    this.storagePersistenceService.resetAuthStateInStorage(currentConfig);\r\n\r\n    const result = this.composeUnAuthenticatedResult(allConfigs);\r\n\r\n    this.authenticatedInternal$.next(result);\r\n  }\r\n\r\n  updateAndPublishAuthState(authenticationResult: AuthStateResult): void {\r\n    this.publicEventsService.fireEvent<AuthStateResult>(EventTypes.NewAuthenticationResult, authenticationResult);\r\n  }\r\n\r\n  setAuthorizationData(\r\n    accessToken: string,\r\n    authResult: AuthResult,\r\n    currentConfig: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): void {\r\n    this.loggerService.logDebug(currentConfig, `storing the accessToken '${accessToken}'`);\r\n\r\n    this.storagePersistenceService.write('authzData', accessToken, currentConfig);\r\n    this.persistAccessTokenExpirationTime(authResult, currentConfig);\r\n    this.setAuthenticatedAndFireEvent(allConfigs);\r\n  }\r\n\r\n  getAccessToken(configuration: OpenIdConfiguration): string {\r\n    if (!this.isAuthenticated(configuration)) {\r\n      return null;\r\n    }\r\n\r\n    const token = this.storagePersistenceService.getAccessToken(configuration);\r\n\r\n    return this.decodeURIComponentSafely(token);\r\n  }\r\n\r\n  getIdToken(configuration: OpenIdConfiguration): string {\r\n    if (!this.isAuthenticated(configuration)) {\r\n      return null;\r\n    }\r\n\r\n    const token = this.storagePersistenceService.getIdToken(configuration);\r\n\r\n    return this.decodeURIComponentSafely(token);\r\n  }\r\n\r\n  getRefreshToken(configuration: OpenIdConfiguration): string {\r\n    if (!this.isAuthenticated(configuration)) {\r\n      return null;\r\n    }\r\n\r\n    const token = this.storagePersistenceService.getRefreshToken(configuration);\r\n\r\n    return this.decodeURIComponentSafely(token);\r\n  }\r\n\r\n  getAuthenticationResult(configuration: OpenIdConfiguration): any {\r\n    if (!this.isAuthenticated(configuration)) {\r\n      return null;\r\n    }\r\n\r\n    return this.storagePersistenceService.getAuthenticationResult(configuration);\r\n  }\r\n\r\n  areAuthStorageTokensValid(configuration: OpenIdConfiguration): boolean {\r\n    if (!this.isAuthenticated(configuration)) {\r\n      return false;\r\n    }\r\n\r\n    if (this.hasIdTokenExpiredAndRenewCheckIsEnabled(configuration)) {\r\n      this.loggerService.logDebug(configuration, 'persisted idToken is expired');\r\n\r\n      return false;\r\n    }\r\n\r\n    if (this.hasAccessTokenExpiredIfExpiryExists(configuration)) {\r\n      this.loggerService.logDebug(configuration, 'persisted accessToken is expired');\r\n\r\n      return false;\r\n    }\r\n\r\n    this.loggerService.logDebug(configuration, 'persisted idToken and accessToken are valid');\r\n\r\n    return true;\r\n  }\r\n\r\n  hasIdTokenExpiredAndRenewCheckIsEnabled(configuration: OpenIdConfiguration): boolean {\r\n    const { renewTimeBeforeTokenExpiresInSeconds, enableIdTokenExpiredValidationInRenew, disableIdTokenValidation } = configuration;\r\n\r\n    if (!enableIdTokenExpiredValidationInRenew) {\r\n      return false;\r\n    }\r\n    const tokenToCheck = this.storagePersistenceService.getIdToken(configuration);\r\n\r\n    const idTokenExpired = this.tokenValidationService.hasIdTokenExpired(tokenToCheck, configuration, renewTimeBeforeTokenExpiresInSeconds, disableIdTokenValidation);\r\n\r\n    if (idTokenExpired) {\r\n      this.publicEventsService.fireEvent<boolean>(EventTypes.IdTokenExpired, idTokenExpired);\r\n    }\r\n\r\n    return idTokenExpired;\r\n  }\r\n\r\n  hasAccessTokenExpiredIfExpiryExists(configuration: OpenIdConfiguration): boolean {\r\n    const { renewTimeBeforeTokenExpiresInSeconds } = configuration;\r\n    const accessTokenExpiresIn = this.storagePersistenceService.read('access_token_expires_at', configuration);\r\n    const accessTokenHasNotExpired = this.tokenValidationService.validateAccessTokenNotExpired(\r\n      accessTokenExpiresIn,\r\n      configuration,\r\n      renewTimeBeforeTokenExpiresInSeconds\r\n    );\r\n\r\n    const hasExpired = !accessTokenHasNotExpired;\r\n\r\n    if (hasExpired) {\r\n      this.publicEventsService.fireEvent<boolean>(EventTypes.TokenExpired, hasExpired);\r\n    }\r\n\r\n    return hasExpired;\r\n  }\r\n\r\n  isAuthenticated(configuration: OpenIdConfiguration): boolean {\r\n    const hasAccessToken = !!this.storagePersistenceService.getAccessToken(configuration);\r\n    const hasIdToken = !!this.storagePersistenceService.getIdToken(configuration);\r\n\r\n    return hasAccessToken && hasIdToken;\r\n  }\r\n\r\n  private decodeURIComponentSafely(token: string): string {\r\n    if (token) {\r\n      return decodeURIComponent(token);\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  private persistAccessTokenExpirationTime(authResult: any, configuration: OpenIdConfiguration): void {\r\n    if (authResult?.expires_in) {\r\n      const accessTokenExpiryTime = new Date(new Date().toUTCString()).valueOf() + authResult.expires_in * 1000;\r\n\r\n      this.storagePersistenceService.write('access_token_expires_at', accessTokenExpiryTime, configuration);\r\n    }\r\n  }\r\n\r\n  private composeAuthenticatedResult(allConfigs: OpenIdConfiguration[]): AuthenticatedResult {\r\n    if (allConfigs.length === 1) {\r\n      const { configId } = allConfigs[0];\r\n\r\n      return { isAuthenticated: true, allConfigsAuthenticated: [{ configId, isAuthenticated: true }] };\r\n    }\r\n\r\n    return this.checkAllConfigsIfTheyAreAuthenticated(allConfigs);\r\n  }\r\n\r\n  private composeUnAuthenticatedResult(allConfigs: OpenIdConfiguration[]): AuthenticatedResult {\r\n    if (allConfigs.length === 1) {\r\n      const { configId } = allConfigs[0];\r\n\r\n      return { isAuthenticated: false, allConfigsAuthenticated: [{ configId, isAuthenticated: false }] };\r\n    }\r\n\r\n    return this.checkAllConfigsIfTheyAreAuthenticated(allConfigs);\r\n  }\r\n\r\n  private checkAllConfigsIfTheyAreAuthenticated(allConfigs: OpenIdConfiguration[]): AuthenticatedResult {\r\n    const allConfigsAuthenticated = allConfigs.map((config) => ({\r\n      configId: config.configId,\r\n      isAuthenticated: this.isAuthenticated(config),\r\n    }));\r\n\r\n    const isAuthenticated = allConfigsAuthenticated.every((x) => !!x.isAuthenticated);\r\n\r\n    return { allConfigsAuthenticated, isAuthenticated };\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { LoggerService } from '../logging/logger.service';\r\n\r\n@Injectable()\r\nexport class IFrameService {\r\n  constructor(@Inject(DOCUMENT) private readonly doc: any, private readonly loggerService: LoggerService) {}\r\n\r\n  getExistingIFrame(identifier: string): HTMLIFrameElement | null {\r\n    const iFrameOnParent = this.getIFrameFromParentWindow(identifier);\r\n\r\n    if (this.isIFrameElement(iFrameOnParent)) {\r\n      return iFrameOnParent;\r\n    }\r\n\r\n    const iFrameOnSelf = this.getIFrameFromWindow(identifier);\r\n\r\n    if (this.isIFrameElement(iFrameOnSelf)) {\r\n      return iFrameOnSelf;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  addIFrameToWindowBody(identifier: string, config: OpenIdConfiguration): HTMLIFrameElement {\r\n    const sessionIframe = this.doc.createElement('iframe');\r\n\r\n    sessionIframe.id = identifier;\r\n    sessionIframe.title = identifier;\r\n    this.loggerService.logDebug(config, sessionIframe);\r\n    sessionIframe.style.display = 'none';\r\n    this.doc.body.appendChild(sessionIframe);\r\n\r\n    return sessionIframe;\r\n  }\r\n\r\n  private getIFrameFromParentWindow(identifier: string): HTMLIFrameElement | null {\r\n    try {\r\n      const iFrameElement = this.doc.defaultView.parent.document.getElementById(identifier);\r\n\r\n      if (this.isIFrameElement(iFrameElement)) {\r\n        return iFrameElement;\r\n      }\r\n\r\n      return null;\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private getIFrameFromWindow(identifier: string): HTMLIFrameElement | null {\r\n    const iFrameElement = this.doc.getElementById(identifier);\r\n\r\n    if (this.isIFrameElement(iFrameElement)) {\r\n      return iFrameElement;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private isIFrameElement(element: HTMLElement | null): element is HTMLIFrameElement {\r\n    return !!element && element instanceof HTMLIFrameElement;\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable, NgZone } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { EventTypes } from '../public-events/event-types';\r\nimport { PublicEventsService } from '../public-events/public-events.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { OpenIdConfiguration } from './../config/openid-configuration';\r\nimport { IFrameService } from './existing-iframe.service';\r\n\r\nconst IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';\r\n\r\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\r\n\r\n@Injectable()\r\nexport class CheckSessionService {\r\n  private checkSessionReceived = false;\r\n\r\n  private scheduledHeartBeatRunning: any;\r\n\r\n  private lastIFrameRefresh = 0;\r\n\r\n  private outstandingMessages = 0;\r\n\r\n  private readonly heartBeatInterval = 3000;\r\n\r\n  private readonly iframeRefreshInterval = 60000;\r\n\r\n  private readonly checkSessionChangedInternal$ = new BehaviorSubject<boolean>(false);\r\n\r\n  get checkSessionChanged$(): Observable<boolean> {\r\n    return this.checkSessionChangedInternal$.asObservable();\r\n  }\r\n\r\n  constructor(\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly iFrameService: IFrameService,\r\n    private readonly eventService: PublicEventsService,\r\n    private readonly zone: NgZone,\r\n    @Inject(DOCUMENT) private readonly document: any\r\n  ) {}\r\n\r\n  isCheckSessionConfigured(configuration: OpenIdConfiguration): boolean {\r\n    const { startCheckSession } = configuration;\r\n\r\n    return startCheckSession;\r\n  }\r\n\r\n  start(configuration: OpenIdConfiguration): void {\r\n    if (!!this.scheduledHeartBeatRunning) {\r\n      return;\r\n    }\r\n\r\n    const { clientId } = configuration;\r\n\r\n    this.pollServerSession(clientId, configuration);\r\n  }\r\n\r\n  stop(): void {\r\n    if (!this.scheduledHeartBeatRunning) {\r\n      return;\r\n    }\r\n\r\n    this.clearScheduledHeartBeat();\r\n    this.checkSessionReceived = false;\r\n  }\r\n\r\n  serverStateChanged(configuration: OpenIdConfiguration): boolean {\r\n    const { startCheckSession } = configuration;\r\n\r\n    return startCheckSession && this.checkSessionReceived;\r\n  }\r\n\r\n  getExistingIframe(): HTMLIFrameElement {\r\n    return this.iFrameService.getExistingIFrame(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\r\n  }\r\n\r\n  private init(configuration: OpenIdConfiguration): Observable<any> {\r\n    if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {\r\n      return of(undefined);\r\n    }\r\n\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\r\n\r\n    if (!authWellKnownEndPoints) {\r\n      this.loggerService.logWarning(configuration, 'CheckSession - init check session: authWellKnownEndpoints is undefined. Returning.');\r\n\r\n      return of();\r\n    }\r\n\r\n    const existingIframe = this.getOrCreateIframe(configuration);\r\n    const checkSessionIframe = authWellKnownEndPoints.checkSessionIframe;\r\n\r\n    if (checkSessionIframe) {\r\n      existingIframe.contentWindow.location.replace(checkSessionIframe);\r\n    } else {\r\n      this.loggerService.logWarning(configuration, 'CheckSession - init check session: checkSessionIframe is not configured to run');\r\n    }\r\n\r\n    return new Observable((observer) => {\r\n      existingIframe.onload = (): void => {\r\n        this.lastIFrameRefresh = Date.now();\r\n        observer.next();\r\n        observer.complete();\r\n      };\r\n    });\r\n  }\r\n\r\n  private pollServerSession(clientId: string, configuration: OpenIdConfiguration): void {\r\n    this.outstandingMessages = 0;\r\n\r\n    const pollServerSessionRecur = (): void => {\r\n      this.init(configuration)\r\n        .pipe(take(1))\r\n        .subscribe(() => {\r\n          const existingIframe = this.getExistingIframe();\r\n\r\n          if (existingIframe && clientId) {\r\n            this.loggerService.logDebug(configuration, `CheckSession - clientId : '${clientId}' - existingIframe: '${existingIframe}'`);\r\n            const sessionState = this.storagePersistenceService.read('session_state', configuration);\r\n            const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\r\n\r\n            if (sessionState && authWellKnownEndPoints?.checkSessionIframe) {\r\n              const iframeOrigin = new URL(authWellKnownEndPoints.checkSessionIframe)?.origin;\r\n\r\n              this.outstandingMessages++;\r\n              existingIframe.contentWindow.postMessage(clientId + ' ' + sessionState, iframeOrigin);\r\n            } else {\r\n              this.loggerService.logDebug(\r\n                configuration,\r\n                `CheckSession - session_state is '${sessionState}' - AuthWellKnownEndPoints is '${JSON.stringify(\r\n                  authWellKnownEndPoints,\r\n                  null,\r\n                  2\r\n                )}'`\r\n              );\r\n              this.checkSessionChangedInternal$.next(true);\r\n            }\r\n          } else {\r\n            this.loggerService.logWarning(\r\n              configuration,\r\n              `CheckSession - OidcSecurityCheckSession pollServerSession checkSession IFrame does not exist:\r\n               clientId : '${clientId}' - existingIframe: '${existingIframe}'`\r\n            );\r\n          }\r\n\r\n          // after sending three messages with no response, fail.\r\n          if (this.outstandingMessages > 3) {\r\n            this.loggerService.logError(\r\n              configuration,\r\n              `CheckSession - OidcSecurityCheckSession not receiving check session response messages.\r\n                            Outstanding messages: '${this.outstandingMessages}'. Server unreachable?`\r\n            );\r\n          }\r\n\r\n          this.zone.runOutsideAngular(() => {\r\n            this.scheduledHeartBeatRunning = setTimeout(() => this.zone.run(pollServerSessionRecur), this.heartBeatInterval);\r\n          });\r\n        });\r\n    };\r\n\r\n    pollServerSessionRecur();\r\n  }\r\n\r\n  private clearScheduledHeartBeat(): void {\r\n    clearTimeout(this.scheduledHeartBeatRunning);\r\n    this.scheduledHeartBeatRunning = null;\r\n  }\r\n\r\n  private messageHandler(configuration: OpenIdConfiguration, e: any): void {\r\n    const existingIFrame = this.getExistingIframe();\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\r\n    const startsWith = !!authWellKnownEndPoints?.checkSessionIframe?.startsWith(e.origin);\r\n\r\n    this.outstandingMessages = 0;\r\n\r\n    if (existingIFrame && startsWith && e.source === existingIFrame.contentWindow) {\r\n      if (e.data === 'error') {\r\n        this.loggerService.logWarning(configuration, 'CheckSession - error from check session messageHandler');\r\n      } else if (e.data === 'changed') {\r\n        this.loggerService.logDebug(configuration, `CheckSession - ${e} from check session messageHandler`);\r\n        this.checkSessionReceived = true;\r\n        this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\r\n        this.checkSessionChangedInternal$.next(true);\r\n      } else {\r\n        this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\r\n        this.loggerService.logDebug(configuration, `CheckSession - ${e.data} from check session messageHandler`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private bindMessageEventToIframe(configId: string): void {\r\n    const iframeMessageEvent = this.messageHandler.bind(this, configId);\r\n\r\n    this.document.defaultView.addEventListener('message', iframeMessageEvent, false);\r\n  }\r\n\r\n  private getOrCreateIframe(configuration: OpenIdConfiguration): HTMLIFrameElement {\r\n    const existingIframe = this.getExistingIframe();\r\n\r\n    if (!existingIframe) {\r\n      const frame = this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_CHECK_SESSION_IDENTIFIER, configuration);\r\n      const { configId } = configuration;\r\n\r\n      this.bindMessageEventToIframe(configId);\r\n\r\n      return frame;\r\n    }\r\n\r\n    return existingIframe;\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class CurrentUrlService {\r\n  constructor(@Inject(DOCUMENT) private readonly doc: any) {}\r\n\r\n  getStateParamFromCurrentUrl(): string {\r\n    const currentUrl = this.getCurrentUrl();\r\n    const parsedUrl = new URL(currentUrl);\r\n    const urlParams = new URLSearchParams(parsedUrl.search);\r\n    const stateFromUrl = urlParams.get('state');\r\n\r\n    return stateFromUrl;\r\n  }\r\n\r\n  currentUrlHasStateParam(): boolean {\r\n    return !!this.getStateParamFromCurrentUrl();\r\n  }\r\n\r\n  getCurrentUrl(): string {\r\n    return this.doc.defaultView.location.toString();\r\n  }\r\n}\r\n","export enum ValidationResult {\r\n  NotSet = 'NotSet',\r\n  StatesDoNotMatch = 'StatesDoNotMatch',\r\n  SignatureFailed = 'SignatureFailed',\r\n  IncorrectNonce = 'IncorrectNonce',\r\n  RequiredPropertyMissing = 'RequiredPropertyMissing',\r\n  MaxOffsetExpired = 'MaxOffsetExpired',\r\n  IssDoesNotMatchIssuer = 'IssDoesNotMatchIssuer',\r\n  NoAuthWellKnownEndPoints = 'NoAuthWellKnownEndPoints',\r\n  IncorrectAud = 'IncorrectAud',\r\n  IncorrectIdTokenClaimsAfterRefresh = 'IncorrectIdTokenClaimsAfterRefresh',\r\n  IncorrectAzp = 'IncorrectAzp',\r\n  TokenExpired = 'TokenExpired',\r\n  IncorrectAtHash = 'IncorrectAtHash',\r\n  Ok = 'Ok',\r\n  LoginRequired = 'LoginRequired',\r\n  SecureTokenServerError = 'SecureTokenServerError',\r\n}\r\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport class UriEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { CryptoService } from '../../utils/crypto/crypto-service';\r\nimport { OpenIdConfiguration } from './../../config/openid-configuration';\r\n\r\n@Injectable()\r\nexport class RandomService {\r\n  constructor(private readonly cryptoService: CryptoService, private readonly loggerService: LoggerService) {}\r\n\r\n  createRandom(requiredLength: number, configuration: OpenIdConfiguration): string {\r\n    if (requiredLength <= 0) {\r\n      return '';\r\n    }\r\n\r\n    if (requiredLength > 0 && requiredLength < 7) {\r\n      this.loggerService.logWarning(\r\n        configuration,\r\n        `RandomService called with ${requiredLength} but 7 chars is the minimum, returning 10 chars`\r\n      );\r\n      requiredLength = 10;\r\n    }\r\n\r\n    const length = requiredLength - 6;\r\n    const arr = new Uint8Array(Math.floor(length / 2));\r\n    const crypto = this.cryptoService.getCrypto();\r\n\r\n    if (crypto) {\r\n      crypto.getRandomValues(arr);\r\n    }\r\n\r\n    return Array.from(arr, this.toHex).join('') + this.randomString(7);\r\n  }\r\n\r\n  private toHex(dec): string {\r\n    return ('0' + dec.toString(16)).substr(-2);\r\n  }\r\n\r\n  private randomString(length: number): string {\r\n    let result = '';\r\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n    const values = new Uint32Array(length);\r\n    const crypto = this.cryptoService.getCrypto();\r\n\r\n    if (crypto) {\r\n      crypto.getRandomValues(values);\r\n      for (let i = 0; i < length; i++) {\r\n        result += characters[values[i] % characters.length];\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { OpenIdConfiguration } from './../config/openid-configuration';\r\nimport { RandomService } from './random/random.service';\r\n\r\n@Injectable()\r\nexport class FlowsDataService {\r\n  constructor(\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly randomService: RandomService,\r\n    private readonly loggerService: LoggerService\r\n  ) {}\r\n\r\n  createNonce(configuration: OpenIdConfiguration): string {\r\n    const nonce = this.randomService.createRandom(40, configuration);\r\n\r\n    this.loggerService.logDebug(configuration, 'Nonce created. nonce:' + nonce);\r\n    this.setNonce(nonce, configuration);\r\n\r\n    return nonce;\r\n  }\r\n\r\n  setNonce(nonce: string, configuration: OpenIdConfiguration): void {\r\n    this.storagePersistenceService.write('authNonce', nonce, configuration);\r\n  }\r\n\r\n  getAuthStateControl(configuration: OpenIdConfiguration): any {\r\n    return this.storagePersistenceService.read('authStateControl', configuration);\r\n  }\r\n\r\n  setAuthStateControl(authStateControl: string, configuration: OpenIdConfiguration): boolean {\r\n    return this.storagePersistenceService.write('authStateControl', authStateControl, configuration);\r\n  }\r\n\r\n  getExistingOrCreateAuthStateControl(configuration: OpenIdConfiguration): any {\r\n    let state = this.storagePersistenceService.read('authStateControl', configuration);\r\n\r\n    if (!state) {\r\n      state = this.randomService.createRandom(40, configuration);\r\n      this.storagePersistenceService.write('authStateControl', state, configuration);\r\n    }\r\n\r\n    return state;\r\n  }\r\n\r\n  setSessionState(sessionState: any, configuration: OpenIdConfiguration): void {\r\n    this.storagePersistenceService.write('session_state', sessionState, configuration);\r\n  }\r\n\r\n  resetStorageFlowData(configuration: OpenIdConfiguration): void {\r\n    this.storagePersistenceService.resetStorageFlowData(configuration);\r\n  }\r\n\r\n  getCodeVerifier(configuration: OpenIdConfiguration): any {\r\n    return this.storagePersistenceService.read('codeVerifier', configuration);\r\n  }\r\n\r\n  createCodeVerifier(configuration: OpenIdConfiguration): string {\r\n    const codeVerifier = this.randomService.createRandom(67, configuration);\r\n\r\n    this.storagePersistenceService.write('codeVerifier', codeVerifier, configuration);\r\n\r\n    return codeVerifier;\r\n  }\r\n\r\n  isCodeFlowInProgress(configuration: OpenIdConfiguration): boolean {\r\n    const storageObject = this.getCodeFlowInProgressStorageEntry(configuration);\r\n\r\n    if (!storageObject) {\r\n      return false;\r\n    }\r\n\r\n    return storageObject.state === 'in progress';\r\n  }\r\n\r\n  setCodeFlowInProgress(configuration: OpenIdConfiguration): void {\r\n    const storageObject = {\r\n      state: 'in progress',\r\n    };\r\n\r\n    this.storagePersistenceService.write('storageCodeFlowInProgress', JSON.stringify(storageObject), configuration);\r\n  }\r\n\r\n  resetCodeFlowInProgress(configuration: OpenIdConfiguration): void {\r\n    this.storagePersistenceService.write('storageCodeFlowInProgress', '', configuration);\r\n  }\r\n\r\n  private getCodeFlowInProgressStorageEntry(configuration: OpenIdConfiguration): any {\r\n    const storageEntry = this.storagePersistenceService.read('storageCodeFlowInProgress', configuration);\r\n\r\n    if (!storageEntry) {\r\n      return null;\r\n    }\r\n\r\n    return JSON.parse(storageEntry);\r\n  }\r\n\r\n  isSilentRenewRunning(configuration: OpenIdConfiguration): boolean {\r\n    const { configId, silentRenewTimeoutInSeconds } = configuration;\r\n    const storageObject = this.getSilentRenewRunningStorageEntry(configuration);\r\n\r\n    if (!storageObject) {\r\n      return false;\r\n    }\r\n\r\n    const timeOutInMilliseconds = silentRenewTimeoutInSeconds * 1000;\r\n    const dateOfLaunchedProcessUtc = Date.parse(storageObject.dateOfLaunchedProcessUtc);\r\n    const currentDateUtc = Date.parse(new Date().toISOString());\r\n    const elapsedTimeInMilliseconds = Math.abs(currentDateUtc - dateOfLaunchedProcessUtc);\r\n    const isProbablyStuck = elapsedTimeInMilliseconds > timeOutInMilliseconds;\r\n\r\n    if (isProbablyStuck) {\r\n      this.loggerService.logDebug(configuration, 'silent renew process is probably stuck, state will be reset.', configId);\r\n      this.resetSilentRenewRunning(configuration);\r\n\r\n      return false;\r\n    }\r\n\r\n    return storageObject.state === 'running';\r\n  }\r\n\r\n  setSilentRenewRunning(configuration: OpenIdConfiguration): void {\r\n    const storageObject = {\r\n      state: 'running',\r\n      dateOfLaunchedProcessUtc: new Date().toISOString(),\r\n    };\r\n\r\n    this.storagePersistenceService.write('storageSilentRenewRunning', JSON.stringify(storageObject), configuration);\r\n  }\r\n\r\n  resetSilentRenewRunning(configuration: OpenIdConfiguration): void {\r\n    this.storagePersistenceService.write('storageSilentRenewRunning', '', configuration);\r\n  }\r\n\r\n  private getSilentRenewRunningStorageEntry(configuration: OpenIdConfiguration): any {\r\n    const storageEntry = this.storagePersistenceService.read('storageSilentRenewRunning', configuration);\r\n\r\n    if (!storageEntry) {\r\n      return null;\r\n    }\r\n\r\n    return JSON.parse(storageEntry);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\n\r\n@Injectable()\r\nexport class FlowHelper {\r\n  isCurrentFlowCodeFlow(configuration: OpenIdConfiguration): boolean {\r\n    return this.currentFlowIs('code', configuration);\r\n  }\r\n\r\n  isCurrentFlowAnyImplicitFlow(configuration: OpenIdConfiguration): boolean {\r\n    return this.isCurrentFlowImplicitFlowWithAccessToken(configuration) || this.isCurrentFlowImplicitFlowWithoutAccessToken(configuration);\r\n  }\r\n\r\n  isCurrentFlowCodeFlowWithRefreshTokens(configuration: OpenIdConfiguration): boolean {\r\n    const { useRefreshToken } = configuration;\r\n\r\n    if (this.isCurrentFlowCodeFlow(configuration) && useRefreshToken) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  isCurrentFlowImplicitFlowWithAccessToken(configuration: OpenIdConfiguration): boolean {\r\n    return this.currentFlowIs('id_token token', configuration);\r\n  }\r\n\r\n  currentFlowIs(flowTypes: string[] | string, configuration: OpenIdConfiguration): boolean {\r\n    const { responseType } = configuration;\r\n\r\n    if (Array.isArray(flowTypes)) {\r\n      return flowTypes.some((x) => responseType === x);\r\n    }\r\n\r\n    return responseType === flowTypes;\r\n  }\r\n\r\n  private isCurrentFlowImplicitFlowWithoutAccessToken(configuration: OpenIdConfiguration): boolean {\r\n    return this.currentFlowIs('id_token', configuration);\r\n  }\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AuthOptions } from '../../auth-options';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { FlowsDataService } from '../../flows/flows-data.service';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\r\nimport { JwtWindowCryptoService } from '../../validation/jwt-window-crypto.service';\r\nimport { FlowHelper } from '../flowHelper/flow-helper.service';\r\nimport { UriEncoder } from './uri-encoder';\r\n\r\nconst CALLBACK_PARAMS_TO_CHECK = ['code', 'state', 'token', 'id_token'];\r\nconst AUTH0_ENDPOINT = 'auth0.com';\r\n\r\n@Injectable()\r\nexport class UrlService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly flowHelper: FlowHelper,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly jwtWindowCryptoService: JwtWindowCryptoService\r\n  ) {}\r\n\r\n  getUrlParameter(urlToCheck: any, name: any): string {\r\n    if (!urlToCheck) {\r\n      return '';\r\n    }\r\n\r\n    if (!name) {\r\n      return '';\r\n    }\r\n\r\n    name = name.replace(/[[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n    const regex = new RegExp('[\\\\?&#]' + name + '=([^&#]*)');\r\n    const results = regex.exec(urlToCheck);\r\n\r\n    return results === null ? '' : decodeURIComponent(results[1]);\r\n  }\r\n\r\n  isCallbackFromSts(currentUrl: string): boolean {\r\n    return CALLBACK_PARAMS_TO_CHECK.some((x) => !!this.getUrlParameter(currentUrl, x));\r\n  }\r\n\r\n  getRefreshSessionSilentRenewUrl(\r\n    config: OpenIdConfiguration,\r\n    customParams?: { [key: string]: string | number | boolean }\r\n  ): Observable<string> {\r\n    if (this.flowHelper.isCurrentFlowCodeFlow(config)) {\r\n      return this.createUrlCodeFlowWithSilentRenew(config, customParams);\r\n    }\r\n\r\n    return of(this.createUrlImplicitFlowWithSilentRenew(config, customParams) || '');\r\n  }\r\n\r\n  getAuthorizeParUrl(requestUri: string, configuration: OpenIdConfiguration): string {\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\r\n\r\n    if (!authWellKnownEndPoints) {\r\n      this.loggerService.logError(configuration, 'authWellKnownEndpoints is undefined');\r\n\r\n      return null;\r\n    }\r\n\r\n    const authorizationEndpoint = authWellKnownEndPoints.authorizationEndpoint;\r\n\r\n    if (!authorizationEndpoint) {\r\n      this.loggerService.logError(\r\n        configuration,\r\n        `Can not create an authorize URL when authorizationEndpoint is '${authorizationEndpoint}'`\r\n      );\r\n\r\n      return null;\r\n    }\r\n\r\n    const { clientId } = configuration;\r\n\r\n    if (!clientId) {\r\n      this.loggerService.logError(configuration, `getAuthorizeParUrl could not add clientId because it was: `, clientId);\r\n\r\n      return null;\r\n    }\r\n\r\n    const urlParts = authorizationEndpoint.split('?');\r\n    const authorizationUrl = urlParts[0];\r\n    const existingParams = urlParts[1];\r\n    let params = this.createHttpParams(existingParams);\r\n\r\n    params = params.set('request_uri', requestUri);\r\n    params = params.append('client_id', clientId);\r\n\r\n    return `${authorizationUrl}?${params}`;\r\n  }\r\n\r\n  getAuthorizeUrl(config: OpenIdConfiguration, authOptions?: AuthOptions): Observable<string> {\r\n    if (this.flowHelper.isCurrentFlowCodeFlow(config)) {\r\n      return this.createUrlCodeFlowAuthorize(config, authOptions);\r\n    }\r\n\r\n    return of(this.createUrlImplicitFlowAuthorize(config, authOptions) || '');\r\n  }\r\n\r\n  createEndSessionUrl(\r\n    idTokenHint: string,\r\n    configuration: OpenIdConfiguration,\r\n    customParamsEndSession?: { [p: string]: string | number | boolean }\r\n  ): string {\r\n    // Auth0 needs a special logout url\r\n    // See https://auth0.com/docs/api/authentication#logout\r\n\r\n    if (this.isAuth0Endpoint(configuration)) {\r\n      return this.composeAuth0Endpoint(configuration);\r\n    }\r\n\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\r\n    const endSessionEndpoint = authWellKnownEndPoints?.endSessionEndpoint;\r\n\r\n    if (!endSessionEndpoint) {\r\n      return null;\r\n    }\r\n\r\n    const urlParts = endSessionEndpoint.split('?');\r\n    const authorizationEndSessionUrl = urlParts[0];\r\n    const existingParams = urlParts[1];\r\n    let params = this.createHttpParams(existingParams);\r\n\r\n    if (!!idTokenHint) {\r\n      params = params.set('id_token_hint', idTokenHint);\r\n    }\r\n\r\n    const postLogoutRedirectUri = this.getPostLogoutRedirectUrl(configuration);\r\n\r\n    if (postLogoutRedirectUri) {\r\n      params = params.append('post_logout_redirect_uri', postLogoutRedirectUri);\r\n    }\r\n\r\n    if (customParamsEndSession) {\r\n      params = this.appendCustomParams({ ...customParamsEndSession }, params);\r\n    }\r\n\r\n    return `${authorizationEndSessionUrl}?${params}`;\r\n  }\r\n\r\n  createRevocationEndpointBodyAccessToken(token: any, configuration: OpenIdConfiguration): string {\r\n    const clientId = this.getClientId(configuration);\r\n\r\n    if (!clientId) {\r\n      return null;\r\n    }\r\n\r\n    let params = this.createHttpParams();\r\n\r\n    params = params.set('client_id', clientId);\r\n    params = params.set('token', token);\r\n    params = params.set('token_type_hint', 'access_token');\r\n\r\n    return params.toString();\r\n  }\r\n\r\n  createRevocationEndpointBodyRefreshToken(token: any, configuration: OpenIdConfiguration): string {\r\n    const clientId = this.getClientId(configuration);\r\n\r\n    if (!clientId) {\r\n      return null;\r\n    }\r\n\r\n    let params = this.createHttpParams();\r\n\r\n    params = params.set('client_id', clientId);\r\n    params = params.set('token', token);\r\n    params = params.set('token_type_hint', 'refresh_token');\r\n\r\n    return params.toString();\r\n  }\r\n\r\n  getRevocationEndpointUrl(configuration: OpenIdConfiguration): string {\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\r\n    const revocationEndpoint = authWellKnownEndPoints?.revocationEndpoint;\r\n\r\n    if (!revocationEndpoint) {\r\n      return null;\r\n    }\r\n\r\n    const urlParts = revocationEndpoint.split('?');\r\n\r\n    const revocationEndpointUrl = urlParts[0];\r\n\r\n    return revocationEndpointUrl;\r\n  }\r\n\r\n  createBodyForCodeFlowCodeRequest(\r\n    code: string,\r\n    configuration: OpenIdConfiguration,\r\n    customTokenParams?: { [p: string]: string | number | boolean }\r\n  ): string {\r\n    const clientId = this.getClientId(configuration);\r\n\r\n    if (!clientId) {\r\n      return null;\r\n    }\r\n\r\n    let params = this.createHttpParams();\r\n\r\n    params = params.set('grant_type', 'authorization_code');\r\n    params = params.set('client_id', clientId);\r\n\r\n    if(!configuration.disablePkce) {\r\n      const codeVerifier = this.flowsDataService.getCodeVerifier(configuration);\r\n\r\n      if (!codeVerifier) {\r\n        this.loggerService.logError(configuration, `CodeVerifier is not set `, codeVerifier);\r\n\r\n        return null;\r\n      }\r\n\r\n      params = params.set('code_verifier', codeVerifier);\r\n    }\r\n\r\n    params = params.set('code', code);\r\n\r\n    if (customTokenParams) {\r\n      params = this.appendCustomParams({ ...customTokenParams }, params);\r\n    }\r\n\r\n    const silentRenewUrl = this.getSilentRenewUrl(configuration);\r\n\r\n    if (this.flowsDataService.isSilentRenewRunning(configuration) && silentRenewUrl) {\r\n      params = params.set('redirect_uri', silentRenewUrl);\r\n\r\n      return params.toString();\r\n    }\r\n\r\n    const redirectUrl = this.getRedirectUrl(configuration);\r\n\r\n    if (!redirectUrl) {\r\n      return null;\r\n    }\r\n\r\n    params = params.set('redirect_uri', redirectUrl);\r\n\r\n    return params.toString();\r\n  }\r\n\r\n  createBodyForCodeFlowRefreshTokensRequest(\r\n    refreshToken: string,\r\n    configuration: OpenIdConfiguration,\r\n    customParamsRefresh?: { [key: string]: string | number | boolean }\r\n  ): string {\r\n    const clientId = this.getClientId(configuration);\r\n\r\n    if (!clientId) {\r\n      return null;\r\n    }\r\n\r\n    let params = this.createHttpParams();\r\n\r\n    params = params.set('grant_type', 'refresh_token');\r\n    params = params.set('client_id', clientId);\r\n    params = params.set('refresh_token', refreshToken);\r\n\r\n    if (customParamsRefresh) {\r\n      params = this.appendCustomParams({ ...customParamsRefresh }, params);\r\n    }\r\n\r\n    return params.toString();\r\n  }\r\n\r\n  createBodyForParCodeFlowRequest(\r\n    configuration: OpenIdConfiguration,\r\n    customParamsRequest?: { [key: string]: string | number | boolean }\r\n  ): Observable<string> {\r\n    const redirectUrl = this.getRedirectUrl(configuration);\r\n\r\n    if (!redirectUrl) {\r\n      return of(null);\r\n    }\r\n\r\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configuration);\r\n    const nonce = this.flowsDataService.createNonce(configuration);\r\n\r\n    this.loggerService.logDebug(configuration, 'Authorize created. adding myautostate: ' + state);\r\n\r\n    // code_challenge with \"S256\"\r\n    const codeVerifier = this.flowsDataService.createCodeVerifier(configuration);\r\n\r\n    return this.jwtWindowCryptoService.generateCodeChallenge(codeVerifier).pipe(\r\n      map((codeChallenge: string) => {\r\n        const { clientId, responseType, scope, hdParam, customParamsAuthRequest } = configuration;\r\n        let params = this.createHttpParams('');\r\n\r\n        params = params.set('client_id', clientId);\r\n        params = params.append('redirect_uri', redirectUrl);\r\n        params = params.append('response_type', responseType);\r\n        params = params.append('scope', scope);\r\n        params = params.append('nonce', nonce);\r\n        params = params.append('state', state);\r\n        params = params.append('code_challenge', codeChallenge);\r\n        params = params.append('code_challenge_method', 'S256');\r\n\r\n        if (hdParam) {\r\n          params = params.append('hd', hdParam);\r\n        }\r\n\r\n        if (customParamsAuthRequest) {\r\n          params = this.appendCustomParams({ ...customParamsAuthRequest }, params);\r\n        }\r\n\r\n        if (customParamsRequest) {\r\n          params = this.appendCustomParams({ ...customParamsRequest }, params);\r\n        }\r\n\r\n        return params.toString();\r\n      })\r\n    );\r\n  }\r\n\r\n  private createAuthorizeUrl(\r\n    codeChallenge: string,\r\n    redirectUrl: string,\r\n    nonce: string,\r\n    state: string,\r\n    configuration: OpenIdConfiguration,\r\n    prompt?: string,\r\n    customRequestParams?: { [key: string]: string | number | boolean }\r\n  ): string {\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\r\n    const authorizationEndpoint = authWellKnownEndPoints?.authorizationEndpoint;\r\n\r\n    if (!authorizationEndpoint) {\r\n      this.loggerService.logError(\r\n        configuration,\r\n        `Can not create an authorize URL when authorizationEndpoint is '${authorizationEndpoint}'`\r\n      );\r\n\r\n      return null;\r\n    }\r\n\r\n    const { clientId, responseType, scope, hdParam, customParamsAuthRequest } = configuration;\r\n\r\n    if (!clientId) {\r\n      this.loggerService.logError(configuration, `createAuthorizeUrl could not add clientId because it was: `, clientId);\r\n\r\n      return null;\r\n    }\r\n\r\n    if (!responseType) {\r\n      this.loggerService.logError(configuration, `createAuthorizeUrl could not add responseType because it was: `, responseType);\r\n\r\n      return null;\r\n    }\r\n\r\n    if (!scope) {\r\n      this.loggerService.logError(configuration, `createAuthorizeUrl could not add scope because it was: `, scope);\r\n\r\n      return null;\r\n    }\r\n\r\n    const urlParts = authorizationEndpoint.split('?');\r\n    const authorizationUrl = urlParts[0];\r\n    const existingParams = urlParts[1];\r\n    let params = this.createHttpParams(existingParams);\r\n\r\n    params = params.set('client_id', clientId);\r\n    params = params.append('redirect_uri', redirectUrl);\r\n    params = params.append('response_type', responseType);\r\n    params = params.append('scope', scope);\r\n    params = params.append('nonce', nonce);\r\n    params = params.append('state', state);\r\n\r\n    if (this.flowHelper.isCurrentFlowCodeFlow(configuration) && codeChallenge !== null) {\r\n      params = params.append('code_challenge', codeChallenge);\r\n      params = params.append('code_challenge_method', 'S256');\r\n    }\r\n\r\n    const mergedParams = { ...customParamsAuthRequest, ...customRequestParams };\r\n\r\n    if (Object.keys(mergedParams).length > 0) {\r\n      params = this.appendCustomParams({ ...mergedParams }, params);\r\n    }\r\n\r\n    if (prompt) {\r\n      params = this.overWriteParam(params, 'prompt', prompt);\r\n    }\r\n\r\n    if (hdParam) {\r\n      params = params.append('hd', hdParam);\r\n    }\r\n\r\n    return `${authorizationUrl}?${params}`;\r\n  }\r\n\r\n  private createUrlImplicitFlowWithSilentRenew(\r\n    configuration: OpenIdConfiguration,\r\n    customParams?: { [key: string]: string | number | boolean }\r\n  ): string {\r\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configuration);\r\n    const nonce = this.flowsDataService.createNonce(configuration);\r\n    const silentRenewUrl = this.getSilentRenewUrl(configuration);\r\n\r\n    if (!silentRenewUrl) {\r\n      return null;\r\n    }\r\n\r\n    this.loggerService.logDebug(configuration, 'RefreshSession created. adding myautostate: ', state);\r\n\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\r\n\r\n    if (authWellKnownEndPoints) {\r\n      return this.createAuthorizeUrl('', silentRenewUrl, nonce, state, configuration, 'none', customParams);\r\n    }\r\n\r\n    this.loggerService.logError(configuration, 'authWellKnownEndpoints is undefined');\r\n\r\n    return null;\r\n  }\r\n\r\n  private createUrlCodeFlowWithSilentRenew(\r\n    configuration: OpenIdConfiguration,\r\n    customParams?: { [key: string]: string | number | boolean }\r\n  ): Observable<string> {\r\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configuration);\r\n    const nonce = this.flowsDataService.createNonce(configuration);\r\n\r\n    this.loggerService.logDebug(configuration, 'RefreshSession created. adding myautostate: ' + state);\r\n\r\n    // code_challenge with \"S256\"\r\n    const codeVerifier = this.flowsDataService.createCodeVerifier(configuration);\r\n\r\n    return this.jwtWindowCryptoService.generateCodeChallenge(codeVerifier).pipe(\r\n      map((codeChallenge: string) => {\r\n        const silentRenewUrl = this.getSilentRenewUrl(configuration);\r\n\r\n        if (!silentRenewUrl) {\r\n          return '';\r\n        }\r\n\r\n        const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\r\n\r\n        if (authWellKnownEndPoints) {\r\n          return this.createAuthorizeUrl(codeChallenge, silentRenewUrl, nonce, state, configuration, 'none', customParams);\r\n        }\r\n\r\n        this.loggerService.logWarning(configuration, 'authWellKnownEndpoints is undefined');\r\n\r\n        return null;\r\n      })\r\n    );\r\n  }\r\n\r\n  private createUrlImplicitFlowAuthorize(configuration: OpenIdConfiguration, authOptions?: AuthOptions): string {\r\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl(configuration);\r\n    const nonce = this.flowsDataService.createNonce(configuration);\r\n\r\n    this.loggerService.logDebug(configuration, 'Authorize created. adding myautostate: ' + state);\r\n\r\n    const redirectUrl = this.getRedirectUrl(configuration, authOptions);\r\n\r\n    if (!redirectUrl) {\r\n      return null;\r\n    }\r\n\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\r\n\r\n    if (authWellKnownEndPoints) {\r\n      const { customParams } = authOptions || {};\r\n\r\n      return this.createAuthorizeUrl('', redirectUrl, nonce, state, configuration, null, customParams);\r\n    }\r\n\r\n    this.loggerService.logError(configuration, 'authWellKnownEndpoints is undefined');\r\n\r\n    return null;\r\n  }\r\n\r\n  private createUrlCodeFlowAuthorize(config: OpenIdConfiguration, authOptions?: AuthOptions): Observable<string> {\r\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl(config);\r\n    const nonce = this.flowsDataService.createNonce(config);\r\n\r\n    this.loggerService.logDebug(config, 'Authorize created. adding myautostate: ' + state);\r\n\r\n    const redirectUrl = this.getRedirectUrl(config, authOptions);\r\n\r\n    if (!redirectUrl) {\r\n      return of(null);\r\n    }\r\n\r\n    return this.getCodeChallenge(config).pipe(\r\n      map((codeChallenge: string) => {\r\n        const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', config);\r\n\r\n        if (authWellKnownEndPoints) {\r\n          const { customParams } = authOptions || {};\r\n\r\n          return this.createAuthorizeUrl(codeChallenge, redirectUrl, nonce, state, config, null, customParams);\r\n        }\r\n\r\n        this.loggerService.logError(config, 'authWellKnownEndpoints is undefined');\r\n\r\n        return '';\r\n      })\r\n    );\r\n  }\r\n\r\n  private getCodeChallenge(config: OpenIdConfiguration): Observable<string> {\r\n    if (config.disablePkce) {\r\n      return of(null);\r\n    }\r\n\r\n    // code_challenge with \"S256\"\r\n    const codeVerifier = this.flowsDataService.createCodeVerifier(config);\r\n\r\n    return this.jwtWindowCryptoService.generateCodeChallenge(codeVerifier);\r\n  }\r\n\r\n  private getRedirectUrl(configuration: OpenIdConfiguration, authOptions?: AuthOptions): string {\r\n    let { redirectUrl } = configuration;\r\n\r\n    if (authOptions?.redirectUrl) {\r\n      // override by redirectUrl from authOptions\r\n      redirectUrl = authOptions.redirectUrl;\r\n    }\r\n\r\n    if (!redirectUrl) {\r\n      this.loggerService.logError(configuration, `could not get redirectUrl, was: `, redirectUrl);\r\n\r\n      return null;\r\n    }\r\n\r\n    return redirectUrl;\r\n  }\r\n\r\n  private getSilentRenewUrl(configuration: OpenIdConfiguration): string {\r\n    const { silentRenewUrl } = configuration;\r\n\r\n    if (!silentRenewUrl) {\r\n      this.loggerService.logError(configuration, `could not get silentRenewUrl, was: `, silentRenewUrl);\r\n\r\n      return null;\r\n    }\r\n\r\n    return silentRenewUrl;\r\n  }\r\n\r\n  private getPostLogoutRedirectUrl(configuration: OpenIdConfiguration): string {\r\n    const { postLogoutRedirectUri } = configuration;\r\n\r\n    if (!postLogoutRedirectUri) {\r\n      this.loggerService.logError(configuration, `could not get postLogoutRedirectUri, was: `, postLogoutRedirectUri);\r\n\r\n      return null;\r\n    }\r\n\r\n    return postLogoutRedirectUri;\r\n  }\r\n\r\n  private getClientId(configuration: OpenIdConfiguration): string {\r\n    const { clientId } = configuration;\r\n\r\n    if (!clientId) {\r\n      this.loggerService.logError(configuration, `could not get clientId, was: `, clientId);\r\n\r\n      return null;\r\n    }\r\n\r\n    return clientId;\r\n  }\r\n\r\n  private appendCustomParams(customParams: { [key: string]: string | number | boolean }, params: HttpParams): HttpParams {\r\n    for (const [key, value] of Object.entries({ ...customParams })) {\r\n      params = params.append(key, value.toString());\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  private overWriteParam(params: HttpParams, key: string, value: string | number | boolean): HttpParams {\r\n    return params.set(key, value);\r\n  }\r\n\r\n  private createHttpParams(existingParams?: string): HttpParams {\r\n    existingParams = existingParams ?? '';\r\n\r\n    const params = new HttpParams({\r\n      fromString: existingParams,\r\n      encoder: new UriEncoder(),\r\n    });\r\n\r\n    return params;\r\n  }\r\n\r\n  private isAuth0Endpoint(configuration: OpenIdConfiguration): boolean {\r\n    const { authority } = configuration;\r\n\r\n    if (!authority) {\r\n      return false;\r\n    }\r\n\r\n    return authority.endsWith(AUTH0_ENDPOINT);\r\n  }\r\n\r\n  private composeAuth0Endpoint(configuration: OpenIdConfiguration): string {\r\n    // format: https://YOUR_DOMAIN/v2/logout?client_id=YOUR_CLIENT_ID&returnTo=LOGOUT_URL\r\n    const { authority, clientId } = configuration;\r\n    const postLogoutRedirectUrl = this.getPostLogoutRedirectUrl(configuration);\r\n\r\n    return `${authority}/v2/logout?client_id=${clientId}&returnTo=${postLogoutRedirectUrl}`;\r\n  }\r\n}\r\n","import { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError, timer } from 'rxjs';\r\nimport { catchError, mergeMap, retryWhen, switchMap } from 'rxjs/operators';\r\nimport { DataService } from '../../api/data.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\r\nimport { UrlService } from '../../utils/url/url.service';\r\nimport { TokenValidationService } from '../../validation/token-validation.service';\r\nimport { AuthResult, CallbackContext } from '../callback-context';\r\nimport { FlowsDataService } from '../flows-data.service';\r\n\r\n@Injectable()\r\nexport class CodeFlowCallbackHandlerService {\r\n  constructor(\r\n    private readonly urlService: UrlService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly tokenValidationService: TokenValidationService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly dataService: DataService\r\n  ) {}\r\n\r\n  // STEP 1 Code Flow\r\n  codeFlowCallback(urlToCheck: string, config: OpenIdConfiguration): Observable<CallbackContext> {\r\n    const code = this.urlService.getUrlParameter(urlToCheck, 'code');\r\n    const state = this.urlService.getUrlParameter(urlToCheck, 'state');\r\n    const sessionState = this.urlService.getUrlParameter(urlToCheck, 'session_state');\r\n\r\n    if (!state) {\r\n      this.loggerService.logDebug(config, 'no state in url');\r\n\r\n      return throwError(() => new Error('no state in url'));\r\n    }\r\n\r\n    if (!code) {\r\n      this.loggerService.logDebug(config, 'no code in url');\r\n\r\n      return throwError(() => new Error('no code in url'));\r\n    }\r\n\r\n    this.loggerService.logDebug(config, 'running validation for callback', urlToCheck);\r\n\r\n    const initialCallbackContext = {\r\n      code,\r\n      refreshToken: null,\r\n      state,\r\n      sessionState,\r\n      authResult: null,\r\n      isRenewProcess: false,\r\n      jwtKeys: null,\r\n      validationResult: null,\r\n      existingIdToken: null,\r\n    };\r\n\r\n    return of(initialCallbackContext);\r\n  }\r\n\r\n  // STEP 2 Code Flow //  Code Flow Silent Renew starts here\r\n  codeFlowCodeRequest(callbackContext: CallbackContext, config: OpenIdConfiguration): Observable<CallbackContext> {\r\n    const authStateControl = this.flowsDataService.getAuthStateControl(config);\r\n    const isStateCorrect = this.tokenValidationService.validateStateFromHashCallback(callbackContext.state, authStateControl, config);\r\n\r\n    if (!isStateCorrect) {\r\n      return throwError(() => new Error('codeFlowCodeRequest incorrect state'));\r\n    }\r\n\r\n    const authWellknownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', config);\r\n    const tokenEndpoint = authWellknownEndpoints?.tokenEndpoint;\r\n\r\n    if (!tokenEndpoint) {\r\n      return throwError(() => new Error('Token Endpoint not defined'));\r\n    }\r\n\r\n    let headers: HttpHeaders = new HttpHeaders();\r\n\r\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n    const bodyForCodeFlow = this.urlService.createBodyForCodeFlowCodeRequest(callbackContext.code, config, config?.customParamsCodeRequest);\r\n\r\n    return this.dataService.post(tokenEndpoint, bodyForCodeFlow, config, headers).pipe(\r\n      switchMap((response: AuthResult) => {\r\n        let authResult: AuthResult = {\r\n          ...response,\r\n          state: callbackContext.state,\r\n          session_state: callbackContext.sessionState,\r\n        };\r\n\r\n        callbackContext.authResult = authResult;\r\n\r\n        return of(callbackContext);\r\n      }),\r\n      retryWhen((error) => this.handleRefreshRetry(error, config)),\r\n      catchError((error) => {\r\n        const { authority } = config;\r\n        const errorMessage = `OidcService code request ${authority}`;\r\n\r\n        this.loggerService.logError(config, errorMessage, error);\r\n\r\n        return throwError(() => new Error(errorMessage));\r\n      })\r\n    );\r\n  }\r\n\r\n  private handleRefreshRetry(errors: Observable<any>, config: OpenIdConfiguration): Observable<any> {\r\n    return errors.pipe(\r\n      mergeMap((error) => {\r\n        // retry token refresh if there is no internet connection\r\n        if (error && error instanceof HttpErrorResponse && error.error instanceof ProgressEvent && error.error.type === 'error') {\r\n          const { authority, refreshTokenRetryInSeconds } = config;\r\n          const errorMessage = `OidcService code request ${authority} - no internet connection`;\r\n\r\n          this.loggerService.logWarning(config, errorMessage, error);\r\n\r\n          return timer(refreshTokenRetryInSeconds * 1000);\r\n        }\r\n\r\n        return throwError(() => new Error(error));\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\r\nimport { map, retry, switchMap } from 'rxjs/operators';\r\nimport { DataService } from '../api/data.service';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { EventTypes } from '../public-events/event-types';\r\nimport { PublicEventsService } from '../public-events/public-events.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { TokenHelperService } from '../utils/tokenHelper/token-helper.service';\r\nimport { ConfigUserDataResult, UserDataResult } from './userdata-result';\r\n\r\nconst DEFAULT_USERRESULT = { userData: null, allUserData: [] };\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  private readonly userDataInternal$ = new BehaviorSubject<UserDataResult>(DEFAULT_USERRESULT);\r\n\r\n  get userData$(): Observable<UserDataResult> {\r\n    return this.userDataInternal$.asObservable();\r\n  }\r\n\r\n  constructor(\r\n    private readonly oidcDataService: DataService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly eventService: PublicEventsService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly tokenHelperService: TokenHelperService,\r\n    private readonly flowHelper: FlowHelper\r\n  ) {}\r\n\r\n  getAndPersistUserDataInStore(\r\n    currentConfiguration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    isRenewProcess = false,\r\n    idToken?: any,\r\n    decodedIdToken?: any\r\n  ): Observable<any> {\r\n    idToken = idToken || this.storagePersistenceService.getIdToken(currentConfiguration);\r\n    decodedIdToken = decodedIdToken || this.tokenHelperService.getPayloadFromToken(idToken, false, currentConfiguration);\r\n\r\n    const existingUserDataFromStorage = this.getUserDataFromStore(currentConfiguration);\r\n    const haveUserData = !!existingUserDataFromStorage;\r\n    const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken(currentConfiguration);\r\n    const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow(currentConfiguration);\r\n\r\n    const accessToken = this.storagePersistenceService.getAccessToken(currentConfiguration);\r\n\r\n    if (!(isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow)) {\r\n      this.loggerService.logDebug(currentConfiguration, `authCallback idToken flow with accessToken ${accessToken}`);\r\n\r\n      this.setUserDataToStore(decodedIdToken, currentConfiguration, allConfigs);\r\n\r\n      return of(decodedIdToken);\r\n    }\r\n\r\n    const { renewUserInfoAfterTokenRenew } = currentConfiguration;\r\n\r\n    if (!isRenewProcess || renewUserInfoAfterTokenRenew || !haveUserData) {\r\n      return this.getUserDataOidcFlowAndSave(decodedIdToken.sub, currentConfiguration, allConfigs).pipe(\r\n        switchMap((userData) => {\r\n          this.loggerService.logDebug(currentConfiguration, 'Received user data: ', userData);\r\n          if (!!userData) {\r\n            this.loggerService.logDebug(currentConfiguration, 'accessToken: ', accessToken);\r\n\r\n            return of(userData);\r\n          } else {\r\n            return throwError(() => new Error('Received no user data, request failed'));\r\n          }\r\n        })\r\n      );\r\n    }\r\n\r\n    return of(existingUserDataFromStorage);\r\n  }\r\n\r\n  getUserDataFromStore(currentConfiguration: OpenIdConfiguration): any {\r\n    return this.storagePersistenceService.read('userData', currentConfiguration) || null;\r\n  }\r\n\r\n  publishUserDataIfExists(currentConfiguration: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): void {\r\n    const userData = this.getUserDataFromStore(currentConfiguration);\r\n\r\n    if (userData) {\r\n      this.fireUserDataEvent(currentConfiguration, allConfigs, userData);\r\n    }\r\n  }\r\n\r\n  setUserDataToStore(userData: any, currentConfiguration: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): void {\r\n    this.storagePersistenceService.write('userData', userData, currentConfiguration);\r\n    this.fireUserDataEvent(currentConfiguration, allConfigs, userData);\r\n  }\r\n\r\n  resetUserDataInStore(currentConfiguration: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): void {\r\n    this.storagePersistenceService.remove('userData', currentConfiguration);\r\n    this.fireUserDataEvent(currentConfiguration, allConfigs, null);\r\n  }\r\n\r\n  private getUserDataOidcFlowAndSave(\r\n    idTokenSub: any,\r\n    currentConfiguration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<any> {\r\n    return this.getIdentityUserData(currentConfiguration).pipe(\r\n      map((data: any) => {\r\n        if (this.validateUserDataSubIdToken(currentConfiguration, idTokenSub, data?.sub)) {\r\n          this.setUserDataToStore(data, currentConfiguration, allConfigs);\r\n\r\n          return data;\r\n        } else {\r\n          // something went wrong, user data sub does not match that from id_token\r\n          this.loggerService.logWarning(currentConfiguration, `User data sub does not match sub in id_token, resetting`);\r\n          this.resetUserDataInStore(currentConfiguration, allConfigs);\r\n\r\n          return null;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private getIdentityUserData(currentConfiguration: OpenIdConfiguration): Observable<any> {\r\n    const token = this.storagePersistenceService.getAccessToken(currentConfiguration);\r\n\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', currentConfiguration);\r\n\r\n    if (!authWellKnownEndPoints) {\r\n      this.loggerService.logWarning(currentConfiguration, 'init check session: authWellKnownEndpoints is undefined');\r\n\r\n      return throwError(() => new Error('authWellKnownEndpoints is undefined'));\r\n    }\r\n\r\n    const userInfoEndpoint = authWellKnownEndPoints.userInfoEndpoint;\r\n\r\n    if (!userInfoEndpoint) {\r\n      this.loggerService.logError(\r\n        currentConfiguration,\r\n        'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config'\r\n      );\r\n\r\n      return throwError(() => new Error('authWellKnownEndpoints.userinfo_endpoint is undefined'));\r\n    }\r\n\r\n    return this.oidcDataService.get(userInfoEndpoint, currentConfiguration, token).pipe(retry(2));\r\n  }\r\n\r\n  private validateUserDataSubIdToken(currentConfiguration: OpenIdConfiguration, idTokenSub: any, userDataSub: any): boolean {\r\n    if (!idTokenSub) {\r\n      return false;\r\n    }\r\n\r\n    if (!userDataSub) {\r\n      return false;\r\n    }\r\n\r\n    if ((idTokenSub as string) !== (userDataSub as string)) {\r\n      this.loggerService.logDebug(currentConfiguration, 'validateUserDataSubIdToken failed', idTokenSub, userDataSub);\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private fireUserDataEvent(currentConfiguration: OpenIdConfiguration, allConfigs: OpenIdConfiguration[], passedUserData: any): void {\r\n    const userData = this.composeSingleOrMultipleUserDataObject(currentConfiguration, allConfigs, passedUserData);\r\n\r\n    this.userDataInternal$.next(userData);\r\n\r\n    const { configId } = currentConfiguration;\r\n\r\n    this.eventService.fireEvent(EventTypes.UserDataChanged, { configId, userData: passedUserData });\r\n  }\r\n\r\n  private composeSingleOrMultipleUserDataObject(\r\n    currentConfiguration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    passedUserData: any\r\n  ): UserDataResult {\r\n    const hasManyConfigs = allConfigs.length > 1;\r\n\r\n    if (!hasManyConfigs) {\r\n      const { configId } = currentConfiguration;\r\n\r\n      return this.composeSingleUserDataResult(configId, passedUserData);\r\n    }\r\n\r\n    const allUserData: ConfigUserDataResult[] = allConfigs.map((config) => {\r\n      const { configId } = currentConfiguration;\r\n\r\n      if (this.currentConfigIsToUpdate(configId, config)) {\r\n        return { configId: config.configId, userData: passedUserData };\r\n      }\r\n\r\n      const alreadySavedUserData = this.storagePersistenceService.read('userData', config) || null;\r\n\r\n      return { configId: config.configId, userData: alreadySavedUserData };\r\n    });\r\n\r\n    return {\r\n      userData: null,\r\n      allUserData,\r\n    };\r\n  }\r\n\r\n  private composeSingleUserDataResult(configId: string, userData: any): UserDataResult {\r\n    return {\r\n      userData,\r\n      allUserData: [{ configId, userData }],\r\n    };\r\n  }\r\n\r\n  private currentConfigIsToUpdate(configId: string, config: OpenIdConfiguration): boolean {\r\n    return config.configId === configId;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { AuthStateService } from '../auth-state/auth-state.service';\nimport { OpenIdConfiguration } from '../config/openid-configuration';\nimport { UserService } from '../user-data/user.service';\nimport { FlowsDataService } from './flows-data.service';\n\n@Injectable()\nexport class ResetAuthDataService {\n  constructor(\n    private readonly authStateService: AuthStateService,\n    private readonly flowsDataService: FlowsDataService,\n    private readonly userService: UserService\n  ) {}\n\n  resetAuthorizationData(currentConfiguration: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): void {\n    this.userService.resetUserDataInStore(currentConfiguration, allConfigs);\n    this.flowsDataService.resetStorageFlowData(currentConfiguration);\n    this.authStateService.setUnauthenticatedAndFireEvent(currentConfiguration, allConfigs);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { CallbackContext } from '../callback-context';\r\nimport { FlowsDataService } from '../flows-data.service';\r\nimport { ResetAuthDataService } from '../reset-auth-data.service';\r\n\r\n@Injectable()\r\nexport class ImplicitFlowCallbackHandlerService {\r\n  constructor(\r\n    private readonly resetAuthDataService: ResetAuthDataService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    @Inject(DOCUMENT) private readonly doc: any\r\n  ) {}\r\n\r\n  // STEP 1 Code Flow\r\n  // STEP 1 Implicit Flow\r\n  implicitFlowCallback(config: OpenIdConfiguration, allConfigs: OpenIdConfiguration[], hash?: string): Observable<CallbackContext> {\r\n    const isRenewProcessData = this.flowsDataService.isSilentRenewRunning(config);\r\n\r\n    this.loggerService.logDebug(config, 'BEGIN callback, no auth data');\r\n    if (!isRenewProcessData) {\r\n      this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n    }\r\n\r\n    hash = hash || this.doc.location.hash.substr(1);\r\n\r\n    const authResult: any = hash.split('&').reduce((resultData: any, item: string) => {\r\n      const parts = item.split('=');\r\n\r\n      resultData[parts.shift() as string] = parts.join('=');\r\n\r\n      return resultData;\r\n    }, {});\r\n\r\n    const callbackContext = {\r\n      code: null,\r\n      refreshToken: null,\r\n      state: null,\r\n      sessionState: null,\r\n      authResult,\r\n      isRenewProcess: isRenewProcessData,\r\n      jwtKeys: null,\r\n      validationResult: null,\r\n      existingIdToken: null,\r\n    };\r\n\r\n    return of(callbackContext);\r\n  }\r\n}\r\n","import { HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { DataService } from '../api/data.service';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { JwtKeys } from '../validation/jwtkeys';\r\n\r\n@Injectable()\r\nexport class SigninKeyDataService {\r\n  constructor(\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly dataService: DataService\r\n  ) {}\r\n\r\n  getSigningKeys(currentConfiguration: OpenIdConfiguration): Observable<JwtKeys> {\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', currentConfiguration);\r\n    const jwksUri = authWellKnownEndPoints?.jwksUri;\r\n\r\n    if (!jwksUri) {\r\n      const error = `getSigningKeys: authWellKnownEndpoints.jwksUri is: '${jwksUri}'`;\r\n\r\n      this.loggerService.logWarning(currentConfiguration, error);\r\n\r\n      return throwError(() => new Error(error));\r\n    }\r\n\r\n    this.loggerService.logDebug(currentConfiguration, 'Getting signinkeys from ', jwksUri);\r\n\r\n    return this.dataService.get<JwtKeys>(jwksUri, currentConfiguration).pipe(\r\n      retry(2),\r\n      catchError((e) => this.handleErrorGetSigningKeys(e, currentConfiguration))\r\n    );\r\n  }\r\n\r\n  private handleErrorGetSigningKeys(errorResponse: HttpResponse<any> | any, currentConfiguration: OpenIdConfiguration): Observable<never> {\r\n    let errMsg = '';\r\n\r\n    if (errorResponse instanceof HttpResponse) {\r\n      const body = errorResponse.body || {};\r\n      const err = JSON.stringify(body);\r\n      const { status, statusText } = errorResponse;\r\n\r\n      errMsg = `${status || ''} - ${statusText || ''} ${err || ''}`;\r\n    } else {\r\n      const { message } = errorResponse;\r\n\r\n      errMsg = !!message ? message : `${errorResponse}`;\r\n    }\r\n    this.loggerService.logError(currentConfiguration, errMsg);\r\n\r\n    return throwError(() => new Error(errMsg));\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, switchMap, tap } from 'rxjs/operators';\r\nimport { AuthStateService } from '../../auth-state/auth-state.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\r\nimport { JwtKeys } from '../../validation/jwtkeys';\r\nimport { ValidationResult } from '../../validation/validation-result';\r\nimport { CallbackContext } from '../callback-context';\r\nimport { FlowsDataService } from '../flows-data.service';\r\nimport { ResetAuthDataService } from '../reset-auth-data.service';\r\nimport { SigninKeyDataService } from '../signin-key-data.service';\r\n\r\nconst JWT_KEYS = 'jwtKeys';\r\n\r\n@Injectable()\r\nexport class HistoryJwtKeysCallbackHandlerService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly signInKeyDataService: SigninKeyDataService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly resetAuthDataService: ResetAuthDataService,\r\n    @Inject(DOCUMENT) private readonly document: any\r\n  ) {}\r\n\r\n  // STEP 3 Code Flow, STEP 2 Implicit Flow, STEP 3 Refresh Token\r\n  callbackHistoryAndResetJwtKeys(\r\n    callbackContext: CallbackContext,\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<CallbackContext> {\r\n    this.storagePersistenceService.write('authnResult', callbackContext.authResult, config);\r\n\r\n    if (config.allowUnsafeReuseRefreshToken && callbackContext.authResult.refresh_token) {\r\n      this.storagePersistenceService.write('reusable_refresh_token', callbackContext.authResult.refresh_token, config);\r\n    }\r\n\r\n    if (this.historyCleanUpTurnedOn(config) && !callbackContext.isRenewProcess) {\r\n      this.resetBrowserHistory();\r\n    } else {\r\n      this.loggerService.logDebug(config, 'history clean up inactive');\r\n    }\r\n\r\n    if (callbackContext.authResult.error) {\r\n      const errorMessage = `AuthCallback AuthResult came with error: ${callbackContext.authResult.error}`;\r\n\r\n      this.loggerService.logDebug(config, errorMessage);\r\n      this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n      this.flowsDataService.setNonce('', config);\r\n      this.handleResultErrorFromCallback(callbackContext.authResult, callbackContext.isRenewProcess);\r\n\r\n      return throwError(() => new Error(errorMessage));\r\n    }\r\n\r\n    this.loggerService.logDebug(\r\n      config,\r\n      `AuthResult '${JSON.stringify(callbackContext.authResult, null, 2)}'.\r\n      AuthCallback created, begin token validation`\r\n    );\r\n\r\n    return this.signInKeyDataService.getSigningKeys(config).pipe(\r\n      tap((jwtKeys: JwtKeys) => this.storeSigningKeys(jwtKeys, config)),\r\n      catchError((err) => {\r\n        // fallback: try to load jwtKeys from storage\r\n        const storedJwtKeys = this.readSigningKeys(config);\r\n\r\n        if (!!storedJwtKeys) {\r\n          this.loggerService.logWarning(config, `Failed to retrieve signing keys, fallback to stored keys`);\r\n\r\n          return of(storedJwtKeys);\r\n        }\r\n\r\n        return throwError(() => new Error(err));\r\n      }),\r\n      switchMap((jwtKeys) => {\r\n        if (jwtKeys) {\r\n          callbackContext.jwtKeys = jwtKeys;\r\n\r\n          return of(callbackContext);\r\n        }\r\n\r\n        const errorMessage = `Failed to retrieve signing key`;\r\n\r\n        this.loggerService.logWarning(config, errorMessage);\r\n\r\n        return throwError(() => new Error(errorMessage));\r\n      }),\r\n      catchError((err) => {\r\n        const errorMessage = `Failed to retrieve signing key with error: ${err}`;\r\n\r\n        this.loggerService.logWarning(config, errorMessage);\r\n\r\n        return throwError(() => new Error(errorMessage));\r\n      })\r\n    );\r\n  }\r\n\r\n  private handleResultErrorFromCallback(result: any, isRenewProcess: boolean): void {\r\n    let validationResult = ValidationResult.SecureTokenServerError;\r\n\r\n    if ((result.error as string) === 'login_required') {\r\n      validationResult = ValidationResult.LoginRequired;\r\n    }\r\n\r\n    this.authStateService.updateAndPublishAuthState({\r\n      isAuthenticated: false,\r\n      validationResult,\r\n      isRenewProcess,\r\n    });\r\n  }\r\n\r\n  private historyCleanUpTurnedOn(config: OpenIdConfiguration): boolean {\r\n    const { historyCleanupOff } = config;\r\n\r\n    return !historyCleanupOff;\r\n  }\r\n\r\n  private resetBrowserHistory(): void {\r\n    this.document.defaultView.history.replaceState(\r\n      {},\r\n      this.document.defaultView.title,\r\n      this.document.defaultView.location.origin + this.document.defaultView.location.pathname\r\n    );\r\n  }\r\n\r\n  private storeSigningKeys(jwtKeys: JwtKeys, config: OpenIdConfiguration): void {\r\n    this.storagePersistenceService.write(JWT_KEYS, jwtKeys, config);\r\n  }\r\n\r\n  private readSigningKeys(config: OpenIdConfiguration): any {\r\n    return this.storagePersistenceService.read(JWT_KEYS, config);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\nimport { AuthStateService } from '../../auth-state/auth-state.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { UserService } from '../../user-data/user.service';\r\nimport { StateValidationResult } from '../../validation/state-validation-result';\r\nimport { CallbackContext } from '../callback-context';\r\nimport { FlowsDataService } from '../flows-data.service';\r\nimport { ResetAuthDataService } from '../reset-auth-data.service';\r\n\r\n@Injectable()\r\nexport class UserCallbackHandlerService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly userService: UserService,\r\n    private readonly resetAuthDataService: ResetAuthDataService\r\n  ) {}\r\n\r\n  // STEP 5 userData\r\n  callbackUser(\r\n    callbackContext: CallbackContext,\r\n    configuration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<CallbackContext> {\r\n    const { isRenewProcess, validationResult, authResult, refreshToken } = callbackContext;\r\n    const { autoUserInfo, renewUserInfoAfterTokenRenew } = configuration;\r\n\r\n    if (!autoUserInfo) {\r\n      if (!isRenewProcess || renewUserInfoAfterTokenRenew) {\r\n        // userData is set to the id_token decoded, auto get user data set to false\r\n        if (validationResult.decodedIdToken) {\r\n          this.userService.setUserDataToStore(validationResult.decodedIdToken, configuration, allConfigs);\r\n        }\r\n      }\r\n\r\n      if (!isRenewProcess && !refreshToken) {\r\n        this.flowsDataService.setSessionState(authResult.session_state, configuration);\r\n      }\r\n\r\n      this.publishAuthState(validationResult, isRenewProcess);\r\n\r\n      return of(callbackContext);\r\n    }\r\n\r\n    return this.userService\r\n      .getAndPersistUserDataInStore(configuration, allConfigs, isRenewProcess, validationResult.idToken, validationResult.decodedIdToken)\r\n      .pipe(\r\n        switchMap((userData) => {\r\n          if (!!userData) {\r\n            if (!refreshToken) {\r\n              this.flowsDataService.setSessionState(authResult.session_state, configuration);\r\n            }\r\n\r\n            this.publishAuthState(validationResult, isRenewProcess);\r\n\r\n            return of(callbackContext);\r\n          } else {\r\n            this.resetAuthDataService.resetAuthorizationData(configuration, allConfigs);\r\n            this.publishUnauthenticatedState(validationResult, isRenewProcess);\r\n            const errorMessage = `Called for userData but they were ${userData}`;\r\n\r\n            this.loggerService.logWarning(configuration, errorMessage);\r\n\r\n            return throwError(() => new Error(errorMessage));\r\n          }\r\n        }),\r\n        catchError((err) => {\r\n          const errorMessage = `Failed to retrieve user info with error:  ${err}`;\r\n\r\n          this.loggerService.logWarning(configuration, errorMessage);\r\n\r\n          return throwError(() => new Error(errorMessage));\r\n        })\r\n      );\r\n  }\r\n\r\n  private publishAuthState(stateValidationResult: StateValidationResult, isRenewProcess: boolean): void {\r\n    this.authStateService.updateAndPublishAuthState({\r\n      isAuthenticated: true,\r\n      validationResult: stateValidationResult.state,\r\n      isRenewProcess,\r\n    });\r\n  }\r\n\r\n  private publishUnauthenticatedState(stateValidationResult: StateValidationResult, isRenewProcess: boolean): void {\r\n    this.authStateService.updateAndPublishAuthState({\r\n      isAuthenticated: false,\r\n      validationResult: stateValidationResult.state,\r\n      isRenewProcess,\r\n    });\r\n  }\r\n}\r\n","import { ValidationResult } from './validation-result';\n\nexport class StateValidationResult {\n  constructor(\n    public accessToken = '',\n    public idToken = '',\n    public authResponseIsValid = false,\n    public decodedIdToken: any = {\n      at_hash: '',\n    },\n    public state: ValidationResult = ValidationResult.NotSet\n  ) {}\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class EqualityService {\n  isStringEqualOrNonOrderedArrayEqual(value1: string | any[], value2: string | any[]): boolean {\n    if (this.isNullOrUndefined(value1)) {\n      return false;\n    }\n\n    if (this.isNullOrUndefined(value2)) {\n      return false;\n    }\n\n    if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\n      return false;\n    }\n\n    if (this.bothValuesAreStrings(value1, value2)) {\n      return value1 === value2;\n    }\n\n    return this.arraysHaveEqualContent(value1 as any[], value2 as any[]);\n  }\n\n  areEqual(value1: string | any[] | any | null | undefined, value2: string | any[] | any | null | undefined): boolean {\n    if (!value1 || !value2) {\n      return false;\n    }\n\n    if (this.bothValuesAreArrays(value1, value2)) {\n      return this.arraysStrictEqual(value1 as any[], value2 as any[]);\n    }\n\n    if (this.bothValuesAreStrings(value1, value2)) {\n      return value1 === value2;\n    }\n\n    if (this.bothValuesAreObjects(value1, value2)) {\n      return JSON.stringify(value1).toLowerCase() === JSON.stringify(value2).toLowerCase();\n    }\n\n    if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\n      if (Array.isArray(value1) && this.valueIsString(value2)) {\n        return value1[0] === value2;\n      }\n      if (Array.isArray(value2) && this.valueIsString(value1)) {\n        return value2[0] === value1;\n      }\n    }\n\n    return value1 === value2;\n  }\n\n  private oneValueIsStringAndTheOtherIsArray(value1: string | any | any[], value2: string | any | any[]): boolean {\n    return (Array.isArray(value1) && this.valueIsString(value2)) || (Array.isArray(value2) && this.valueIsString(value1));\n  }\n\n  private bothValuesAreObjects(value1: string | any | any[], value2: string | any | any[]): boolean {\n    return this.valueIsObject(value1) && this.valueIsObject(value2);\n  }\n\n  private bothValuesAreStrings(value1: string | any | any[], value2: string | any | any[]): boolean {\n    return this.valueIsString(value1) && this.valueIsString(value2);\n  }\n\n  private bothValuesAreArrays(value1: string | any | any[], value2: string | any | any[]): boolean {\n    return Array.isArray(value1) && Array.isArray(value2);\n  }\n\n  private valueIsString(value: any): boolean {\n    return typeof value === 'string' || value instanceof String;\n  }\n\n  private valueIsObject(value: any): boolean {\n    return typeof value === 'object';\n  }\n\n  private arraysStrictEqual(arr1: Array<string>, arr2: Array<string>): boolean {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    for (let i = arr1.length; i--; ) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private arraysHaveEqualContent(arr1: Array<string>, arr2: Array<string>): boolean {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    return arr1.some((v) => arr2.includes(v));\n  }\n\n  private isNullOrUndefined(val: any): boolean {\n    return val === null || val === undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { EqualityService } from '../utils/equality/equality.service';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { TokenHelperService } from '../utils/tokenHelper/token-helper.service';\r\nimport { StateValidationResult } from './state-validation-result';\r\nimport { TokenValidationService } from './token-validation.service';\r\nimport { ValidationResult } from './validation-result';\r\n\r\n@Injectable()\r\nexport class StateValidationService {\r\n  constructor(\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly tokenValidationService: TokenValidationService,\r\n    private readonly tokenHelperService: TokenHelperService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly equalityService: EqualityService,\r\n    private readonly flowHelper: FlowHelper\r\n  ) {}\r\n\r\n  getValidatedStateResult(callbackContext: CallbackContext, configuration: OpenIdConfiguration): Observable<StateValidationResult> {\r\n    if (!callbackContext || callbackContext.authResult.error) {\r\n      return of(new StateValidationResult('', '', false, {}));\r\n    }\r\n\r\n    return this.validateState(callbackContext, configuration);\r\n  }\r\n\r\n  private validateState(callbackContext: CallbackContext, configuration: OpenIdConfiguration): Observable<StateValidationResult> {\r\n    const toReturn = new StateValidationResult();\r\n    const authStateControl = this.storagePersistenceService.read('authStateControl', configuration);\r\n\r\n    if (!this.tokenValidationService.validateStateFromHashCallback(callbackContext.authResult.state, authStateControl, configuration)) {\r\n      this.loggerService.logWarning(configuration, 'authCallback incorrect state');\r\n      toReturn.state = ValidationResult.StatesDoNotMatch;\r\n      this.handleUnsuccessfulValidation(configuration);\r\n\r\n      return of(toReturn);\r\n    }\r\n\r\n    const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken(configuration);\r\n    const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow(configuration);\r\n\r\n    if (isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow) {\r\n      toReturn.accessToken = callbackContext.authResult.access_token;\r\n    }\r\n\r\n    if (callbackContext.authResult.id_token) {\r\n      const {\r\n        clientId,\r\n        issValidationOff,\r\n        maxIdTokenIatOffsetAllowedInSeconds,\r\n        disableIatOffsetValidation,\r\n        ignoreNonceAfterRefresh,\r\n        disableIdTokenValidation,\r\n      } = configuration;\r\n\r\n      toReturn.idToken = callbackContext.authResult.id_token;\r\n\r\n      toReturn.decodedIdToken = this.tokenHelperService.getPayloadFromToken(toReturn.idToken, false, configuration);\r\n\r\n      return this.tokenValidationService.validateSignatureIdToken(toReturn.idToken, callbackContext.jwtKeys, configuration).pipe(\r\n        mergeMap((isSignatureIdTokenValid: boolean) => {\r\n          if (!isSignatureIdTokenValid) {\r\n            this.loggerService.logDebug(configuration, 'authCallback Signature validation failed id_token');\r\n            toReturn.state = ValidationResult.SignatureFailed;\r\n            this.handleUnsuccessfulValidation(configuration);\r\n\r\n            return of(toReturn);\r\n          }\r\n\r\n          const authNonce = this.storagePersistenceService.read('authNonce', configuration);\r\n\r\n          if (\r\n            !this.tokenValidationService.validateIdTokenNonce(toReturn.decodedIdToken, authNonce, ignoreNonceAfterRefresh, configuration)\r\n          ) {\r\n            this.loggerService.logWarning(\r\n              configuration,\r\n              'authCallback incorrect nonce, did you call the checkAuth() method multiple times?'\r\n            );\r\n            toReturn.state = ValidationResult.IncorrectNonce;\r\n            this.handleUnsuccessfulValidation(configuration);\r\n\r\n            return of(toReturn);\r\n          }\r\n\r\n          if (!this.tokenValidationService.validateRequiredIdToken(toReturn.decodedIdToken, configuration)) {\r\n            this.loggerService.logDebug(configuration, 'authCallback Validation, one of the REQUIRED properties missing from id_token');\r\n            toReturn.state = ValidationResult.RequiredPropertyMissing;\r\n            this.handleUnsuccessfulValidation(configuration);\r\n\r\n            return of(toReturn);\r\n          }\r\n\r\n          if (\r\n            !this.tokenValidationService.validateIdTokenIatMaxOffset(\r\n              toReturn.decodedIdToken,\r\n              maxIdTokenIatOffsetAllowedInSeconds,\r\n              disableIatOffsetValidation,\r\n              configuration\r\n            )\r\n          ) {\r\n            this.loggerService.logWarning(\r\n              configuration,\r\n              'authCallback Validation, iat rejected id_token was issued too far away from the current time'\r\n            );\r\n            toReturn.state = ValidationResult.MaxOffsetExpired;\r\n            this.handleUnsuccessfulValidation(configuration);\r\n\r\n            return of(toReturn);\r\n          }\r\n\r\n          const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\r\n\r\n          if (authWellKnownEndPoints) {\r\n            if (issValidationOff) {\r\n              this.loggerService.logDebug(configuration, 'iss validation is turned off, this is not recommended!');\r\n            } else if (\r\n              !issValidationOff &&\r\n              !this.tokenValidationService.validateIdTokenIss(toReturn.decodedIdToken, authWellKnownEndPoints.issuer, configuration)\r\n            ) {\r\n              this.loggerService.logWarning(configuration, 'authCallback incorrect iss does not match authWellKnownEndpoints issuer');\r\n              toReturn.state = ValidationResult.IssDoesNotMatchIssuer;\r\n              this.handleUnsuccessfulValidation(configuration);\r\n\r\n              return of(toReturn);\r\n            }\r\n          } else {\r\n            this.loggerService.logWarning(configuration, 'authWellKnownEndpoints is undefined');\r\n            toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;\r\n            this.handleUnsuccessfulValidation(configuration);\r\n\r\n            return of(toReturn);\r\n          }\r\n\r\n          if (!this.tokenValidationService.validateIdTokenAud(toReturn.decodedIdToken, clientId, configuration)) {\r\n            this.loggerService.logWarning(configuration, 'authCallback incorrect aud');\r\n            toReturn.state = ValidationResult.IncorrectAud;\r\n            this.handleUnsuccessfulValidation(configuration);\r\n\r\n            return of(toReturn);\r\n          }\r\n\r\n          if (!this.tokenValidationService.validateIdTokenAzpExistsIfMoreThanOneAud(toReturn.decodedIdToken)) {\r\n            this.loggerService.logWarning(configuration, 'authCallback missing azp');\r\n            toReturn.state = ValidationResult.IncorrectAzp;\r\n            this.handleUnsuccessfulValidation(configuration);\r\n\r\n            return of(toReturn);\r\n          }\r\n\r\n          if (!this.tokenValidationService.validateIdTokenAzpValid(toReturn.decodedIdToken, clientId)) {\r\n            this.loggerService.logWarning(configuration, 'authCallback incorrect azp');\r\n            toReturn.state = ValidationResult.IncorrectAzp;\r\n            this.handleUnsuccessfulValidation(configuration);\r\n\r\n            return of(toReturn);\r\n          }\r\n\r\n          if (!this.isIdTokenAfterRefreshTokenRequestValid(callbackContext, toReturn.decodedIdToken, configuration)) {\r\n            this.loggerService.logWarning(configuration, 'authCallback pre, post id_token claims do not match in refresh');\r\n            toReturn.state = ValidationResult.IncorrectIdTokenClaimsAfterRefresh;\r\n            this.handleUnsuccessfulValidation(configuration);\r\n\r\n            return of(toReturn);\r\n          }\r\n\r\n          if (\r\n            !this.tokenValidationService.validateIdTokenExpNotExpired(\r\n              toReturn.decodedIdToken,\r\n              configuration,\r\n              maxIdTokenIatOffsetAllowedInSeconds,\r\n              disableIdTokenValidation\r\n            )\r\n          ) {\r\n            this.loggerService.logWarning(configuration, 'authCallback id token expired');\r\n            toReturn.state = ValidationResult.TokenExpired;\r\n            this.handleUnsuccessfulValidation(configuration);\r\n\r\n            return of(toReturn);\r\n          }\r\n\r\n          return this.validateDefault(\r\n            isCurrentFlowImplicitFlowWithAccessToken,\r\n            isCurrentFlowCodeFlow,\r\n            toReturn,\r\n            configuration,\r\n            callbackContext\r\n          );\r\n        })\r\n      );\r\n    } else {\r\n      this.loggerService.logDebug(configuration, 'No id_token found, skipping id_token validation');\r\n    }\r\n\r\n    return this.validateDefault(isCurrentFlowImplicitFlowWithAccessToken, isCurrentFlowCodeFlow, toReturn, configuration, callbackContext);\r\n  }\r\n\r\n  private validateDefault(\r\n    isCurrentFlowImplicitFlowWithAccessToken: boolean,\r\n    isCurrentFlowCodeFlow: boolean,\r\n    toReturn: StateValidationResult,\r\n    configuration: OpenIdConfiguration,\r\n    callbackContext: CallbackContext\r\n  ): Observable<StateValidationResult> {\r\n    // flow id_token\r\n    if (!isCurrentFlowImplicitFlowWithAccessToken && !isCurrentFlowCodeFlow) {\r\n      toReturn.authResponseIsValid = true;\r\n      toReturn.state = ValidationResult.Ok;\r\n      this.handleSuccessfulValidation(configuration);\r\n      this.handleUnsuccessfulValidation(configuration);\r\n\r\n      return of(toReturn);\r\n    }\r\n\r\n    // only do check if id_token returned, no always the case when using refresh tokens\r\n    if (callbackContext.authResult.id_token) {\r\n      const idTokenHeader = this.tokenHelperService.getHeaderFromToken(toReturn.idToken, false, configuration);\r\n\r\n      if (isCurrentFlowCodeFlow && !(toReturn.decodedIdToken.at_hash as string)) {\r\n        this.loggerService.logDebug(configuration, 'Code Flow active, and no at_hash in the id_token, skipping check!');\r\n      } else {\r\n        return this.tokenValidationService\r\n          .validateIdTokenAtHash(\r\n            toReturn.accessToken,\r\n            toReturn.decodedIdToken.at_hash,\r\n            idTokenHeader.alg, // 'RS256'\r\n            configuration\r\n          )\r\n          .pipe(\r\n            map((valid: boolean) => {\r\n              if (!valid || !toReturn.accessToken) {\r\n                this.loggerService.logWarning(configuration, 'authCallback incorrect at_hash');\r\n                toReturn.state = ValidationResult.IncorrectAtHash;\r\n                this.handleUnsuccessfulValidation(configuration);\r\n\r\n                return toReturn;\r\n              } else {\r\n                toReturn.authResponseIsValid = true;\r\n                toReturn.state = ValidationResult.Ok;\r\n                this.handleSuccessfulValidation(configuration);\r\n\r\n                return toReturn;\r\n              }\r\n            })\r\n          );\r\n      }\r\n    }\r\n\r\n    toReturn.authResponseIsValid = true;\r\n    toReturn.state = ValidationResult.Ok;\r\n    this.handleSuccessfulValidation(configuration);\r\n\r\n    return of(toReturn);\r\n  }\r\n\r\n  private isIdTokenAfterRefreshTokenRequestValid(\r\n    callbackContext: CallbackContext,\r\n    newIdToken: any,\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    const { useRefreshToken, disableRefreshIdTokenAuthTimeValidation } = configuration;\r\n\r\n    if (!useRefreshToken) {\r\n      return true;\r\n    }\r\n\r\n    if (!callbackContext.existingIdToken) {\r\n      return true;\r\n    }\r\n\r\n    const decodedIdToken = this.tokenHelperService.getPayloadFromToken(callbackContext.existingIdToken, false, configuration);\r\n\r\n    // Upon successful validation of the Refresh Token, the response body is the Token Response of Section 3.1.3.3\r\n    // except that it might not contain an id_token.\r\n\r\n    // If an ID Token is returned as a result of a token refresh request, the following requirements apply:\r\n\r\n    // its iss Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\r\n    if (decodedIdToken.iss !== newIdToken.iss) {\r\n      this.loggerService.logDebug(configuration, `iss do not match: ${decodedIdToken.iss} ${newIdToken.iss}`);\r\n\r\n      return false;\r\n    }\r\n    // its azp Claim Value MUST be the same as in the ID Token issued when the original authentication occurred;\r\n    //   if no azp Claim was present in the original ID Token, one MUST NOT be present in the new ID Token, and\r\n    // otherwise, the same rules apply as apply when issuing an ID Token at the time of the original authentication.\r\n    if (decodedIdToken.azp !== newIdToken.azp) {\r\n      this.loggerService.logDebug(configuration, `azp do not match: ${decodedIdToken.azp} ${newIdToken.azp}`);\r\n\r\n      return false;\r\n    }\r\n    // its sub Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\r\n    if (decodedIdToken.sub !== newIdToken.sub) {\r\n      this.loggerService.logDebug(configuration, `sub do not match: ${decodedIdToken.sub} ${newIdToken.sub}`);\r\n\r\n      return false;\r\n    }\r\n\r\n    // its aud Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\r\n    if (!this.equalityService.isStringEqualOrNonOrderedArrayEqual(decodedIdToken?.aud, newIdToken?.aud)) {\r\n      this.loggerService.logDebug(configuration, `aud in new id_token is not valid: '${decodedIdToken?.aud}' '${newIdToken.aud}'`);\r\n\r\n      return false;\r\n    }\r\n\r\n    if (disableRefreshIdTokenAuthTimeValidation) {\r\n      return true;\r\n    }\r\n\r\n    // its iat Claim MUST represent the time that the new ID Token is issued,\r\n    // if the ID Token contains an auth_time Claim, its value MUST represent the time of the original authentication\r\n    // - not the time that the new ID token is issued,\r\n    if (decodedIdToken.auth_time !== newIdToken.auth_time) {\r\n      this.loggerService.logDebug(configuration, `auth_time do not match: ${decodedIdToken.auth_time} ${newIdToken.auth_time}`);\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private handleSuccessfulValidation(configuration: OpenIdConfiguration): void {\r\n    const { autoCleanStateAfterAuthentication } = configuration;\r\n\r\n    this.storagePersistenceService.write('authNonce', null, configuration);\r\n\r\n    if (autoCleanStateAfterAuthentication) {\r\n      this.storagePersistenceService.write('authStateControl', '', configuration);\r\n    }\r\n    this.loggerService.logDebug(configuration, 'authCallback token(s) validated, continue');\r\n  }\r\n\r\n  private handleUnsuccessfulValidation(configuration: OpenIdConfiguration): void {\r\n    const { autoCleanStateAfterAuthentication } = configuration;\r\n\r\n    this.storagePersistenceService.write('authNonce', null, configuration);\r\n\r\n    if (autoCleanStateAfterAuthentication) {\r\n      this.storagePersistenceService.write('authStateControl', '', configuration);\r\n    }\r\n    this.loggerService.logDebug(configuration, 'authCallback token(s) invalid');\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AuthStateService } from '../../auth-state/auth-state.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { StateValidationResult } from '../../validation/state-validation-result';\r\nimport { StateValidationService } from '../../validation/state-validation.service';\r\nimport { CallbackContext } from '../callback-context';\r\nimport { ResetAuthDataService } from '../reset-auth-data.service';\r\n\r\n@Injectable()\r\nexport class StateValidationCallbackHandlerService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly stateValidationService: StateValidationService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly resetAuthDataService: ResetAuthDataService,\r\n    @Inject(DOCUMENT) private readonly doc: any\r\n  ) {}\r\n\r\n  // STEP 4 All flows\r\n\r\n  callbackStateValidation(\r\n    callbackContext: CallbackContext,\r\n    configuration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<CallbackContext> {\r\n    return this.stateValidationService.getValidatedStateResult(callbackContext, configuration).pipe(\r\n      map((validationResult: StateValidationResult) => {\r\n        callbackContext.validationResult = validationResult;\r\n\r\n        if (validationResult.authResponseIsValid) {\r\n          this.authStateService.setAuthorizationData(validationResult.accessToken, callbackContext.authResult, configuration, allConfigs);\r\n\r\n          return callbackContext;\r\n        } else {\r\n          const errorMessage = `authorizedCallback, token(s) validation failed, resetting. Hash: ${this.doc.location.hash}`;\r\n\r\n          this.loggerService.logWarning(configuration, errorMessage);\r\n          this.resetAuthDataService.resetAuthorizationData(configuration, allConfigs);\r\n          this.publishUnauthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\r\n\r\n          throw new Error(errorMessage);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private publishUnauthorizedState(stateValidationResult: StateValidationResult, isRenewProcess: boolean): void {\r\n    this.authStateService.updateAndPublishAuthState({\r\n      isAuthenticated: false,\r\n      validationResult: stateValidationResult.state,\r\n      isRenewProcess,\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { AuthStateService } from '../../auth-state/auth-state.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { TokenValidationService } from '../../validation/token-validation.service';\r\nimport { CallbackContext } from '../callback-context';\r\nimport { FlowsDataService } from '../flows-data.service';\r\n\r\n@Injectable()\r\nexport class RefreshSessionCallbackHandlerService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly flowsDataService: FlowsDataService\r\n  ) {}\r\n\r\n  // STEP 1 Refresh session\r\n  refreshSessionWithRefreshTokens(config: OpenIdConfiguration): Observable<CallbackContext> {\r\n    const stateData = this.flowsDataService.getExistingOrCreateAuthStateControl(config);\r\n\r\n    this.loggerService.logDebug(config, 'RefreshSession created. Adding myautostate: ' + stateData);\r\n    const refreshToken = this.authStateService.getRefreshToken(config);\r\n    const idToken = this.authStateService.getIdToken(config);\r\n\r\n    if (refreshToken) {\r\n      const callbackContext = {\r\n        code: null,\r\n        refreshToken,\r\n        state: stateData,\r\n        sessionState: null,\r\n        authResult: null,\r\n        isRenewProcess: true,\r\n        jwtKeys: null,\r\n        validationResult: null,\r\n        existingIdToken: idToken,\r\n      };\r\n\r\n      this.loggerService.logDebug(config, 'found refresh code, obtaining new credentials with refresh code');\r\n      // Nonce is not used with refresh tokens; but Key cloak may send it anyway\r\n      this.flowsDataService.setNonce(TokenValidationService.refreshTokenNoncePlaceholder, config);\r\n\r\n      return of(callbackContext);\r\n    } else {\r\n      const errorMessage = 'no refresh token found, please login';\r\n\r\n      this.loggerService.logError(config, errorMessage);\r\n\r\n      return throwError(() => new Error(errorMessage));\r\n    }\r\n  }\r\n}\r\n","import { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError, timer } from 'rxjs';\r\nimport { catchError, mergeMap, retryWhen, switchMap } from 'rxjs/operators';\r\nimport { DataService } from '../../api/data.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\r\nimport { UrlService } from '../../utils/url/url.service';\r\nimport { CallbackContext } from '../callback-context';\r\n\r\n@Injectable()\r\nexport class RefreshTokenCallbackHandlerService {\r\n  constructor(\r\n    private readonly urlService: UrlService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly dataService: DataService,\r\n    private readonly storagePersistenceService: StoragePersistenceService\r\n  ) {}\r\n\r\n  // STEP 2 Refresh Token\r\n  refreshTokensRequestTokens(\r\n    callbackContext: CallbackContext,\r\n    config: OpenIdConfiguration,\r\n    customParamsRefresh?: { [key: string]: string | number | boolean }\r\n  ): Observable<CallbackContext> {\r\n    let headers: HttpHeaders = new HttpHeaders();\r\n\r\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n    const authWellknownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', config);\r\n    const tokenEndpoint = authWellknownEndpoints?.tokenEndpoint;\r\n\r\n    if (!tokenEndpoint) {\r\n      return throwError(() => new Error('Token Endpoint not defined'));\r\n    }\r\n\r\n    const data = this.urlService.createBodyForCodeFlowRefreshTokensRequest(callbackContext.refreshToken, config, customParamsRefresh);\r\n\r\n    return this.dataService.post(tokenEndpoint, data, config, headers).pipe(\r\n      switchMap((response: any) => {\r\n        this.loggerService.logDebug(config, 'token refresh response: ', response);\r\n        // TODO FGO LOOK AT THIS\r\n        let authResult: any = new Object();\r\n\r\n        authResult = response;\r\n        authResult.state = callbackContext.state;\r\n\r\n        callbackContext.authResult = authResult;\r\n\r\n        return of(callbackContext);\r\n      }),\r\n      retryWhen((error) => this.handleRefreshRetry(error, config)),\r\n      catchError((error) => {\r\n        const { authority } = config;\r\n        const errorMessage = `OidcService code request ${authority}`;\r\n\r\n        this.loggerService.logError(config, errorMessage, error);\r\n\r\n        return throwError(() => new Error(errorMessage));\r\n      })\r\n    );\r\n  }\r\n\r\n  private handleRefreshRetry(errors: Observable<any>, config: OpenIdConfiguration): Observable<any> {\r\n    return errors.pipe(\r\n      mergeMap((error) => {\r\n        // retry token refresh if there is no internet connection\r\n        if (error && error instanceof HttpErrorResponse && error.error instanceof ProgressEvent && error.error.type === 'error') {\r\n          const { authority, refreshTokenRetryInSeconds } = config;\r\n          const errorMessage = `OidcService code request ${authority} - no internet connection`;\r\n\r\n          this.loggerService.logWarning(config, errorMessage, error);\r\n\r\n          return timer(refreshTokenRetryInSeconds * 1000);\r\n        }\r\n\r\n        return throwError(() => new Error(error));\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { concatMap } from 'rxjs/operators';\nimport { OpenIdConfiguration } from '../config/openid-configuration';\nimport { CallbackContext } from './callback-context';\nimport { CodeFlowCallbackHandlerService } from './callback-handling/code-flow-callback-handler.service';\nimport { HistoryJwtKeysCallbackHandlerService } from './callback-handling/history-jwt-keys-callback-handler.service';\nimport { ImplicitFlowCallbackHandlerService } from './callback-handling/implicit-flow-callback-handler.service';\nimport { RefreshSessionCallbackHandlerService } from './callback-handling/refresh-session-callback-handler.service';\nimport { RefreshTokenCallbackHandlerService } from './callback-handling/refresh-token-callback-handler.service';\nimport { StateValidationCallbackHandlerService } from './callback-handling/state-validation-callback-handler.service';\nimport { UserCallbackHandlerService } from './callback-handling/user-callback-handler.service';\n\n@Injectable()\nexport class FlowsService {\n  constructor(\n    private readonly codeFlowCallbackHandlerService: CodeFlowCallbackHandlerService,\n    private readonly implicitFlowCallbackHandlerService: ImplicitFlowCallbackHandlerService,\n    private readonly historyJwtKeysCallbackHandlerService: HistoryJwtKeysCallbackHandlerService,\n    private readonly userHandlerService: UserCallbackHandlerService,\n    private readonly stateValidationCallbackHandlerService: StateValidationCallbackHandlerService,\n    private readonly refreshSessionCallbackHandlerService: RefreshSessionCallbackHandlerService,\n    private readonly refreshTokenCallbackHandlerService: RefreshTokenCallbackHandlerService\n  ) {}\n\n  processCodeFlowCallback(urlToCheck: string, config: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): Observable<CallbackContext> {\n    return this.codeFlowCallbackHandlerService.codeFlowCallback(urlToCheck, config).pipe(\n      concatMap((callbackContext) => this.codeFlowCallbackHandlerService.codeFlowCodeRequest(callbackContext, config)),\n      concatMap((callbackContext) =>\n        this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs)\n      ),\n      concatMap((callbackContext) =>\n        this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, config, allConfigs)\n      ),\n      concatMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext, config, allConfigs))\n    );\n  }\n\n  processSilentRenewCodeFlowCallback(\n    firstContext: CallbackContext,\n    config: OpenIdConfiguration,\n    allConfigs: OpenIdConfiguration[]\n  ): Observable<CallbackContext> {\n    return this.codeFlowCallbackHandlerService.codeFlowCodeRequest(firstContext, config).pipe(\n      concatMap((callbackContext) =>\n        this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs)\n      ),\n      concatMap((callbackContext) =>\n        this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, config, allConfigs)\n      ),\n      concatMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext, config, allConfigs))\n    );\n  }\n\n  processImplicitFlowCallback(config: OpenIdConfiguration, allConfigs: OpenIdConfiguration[], hash?: string): Observable<CallbackContext> {\n    return this.implicitFlowCallbackHandlerService.implicitFlowCallback(config, allConfigs, hash).pipe(\n      concatMap((callbackContext) =>\n        this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs)\n      ),\n      concatMap((callbackContext) =>\n        this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, config, allConfigs)\n      ),\n      concatMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext, config, allConfigs))\n    );\n  }\n\n  processRefreshToken(\n    config: OpenIdConfiguration,\n    allConfigs: OpenIdConfiguration[],\n    customParamsRefresh?: { [key: string]: string | number | boolean }\n  ): Observable<CallbackContext> {\n    return this.refreshSessionCallbackHandlerService.refreshSessionWithRefreshTokens(config).pipe(\n      concatMap((callbackContext) =>\n        this.refreshTokenCallbackHandlerService.refreshTokensRequestTokens(callbackContext, config, customParamsRefresh)\n      ),\n      concatMap((callbackContext) =>\n        this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext, config, allConfigs)\n      ),\n      concatMap((callbackContext) =>\n        this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext, config, allConfigs)\n      ),\n      concatMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext, config, allConfigs))\n    );\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class IntervalService {\r\n  runTokenValidationRunning = null;\r\n\r\n  constructor(private readonly zone: NgZone) {}\r\n\r\n  isTokenValidationRunning(): boolean {\r\n    return !!this.runTokenValidationRunning;\r\n  }\r\n\r\n  stopPeriodicTokenCheck(): void {\r\n    if (this.runTokenValidationRunning) {\r\n      this.runTokenValidationRunning.unsubscribe();\r\n      this.runTokenValidationRunning = null;\r\n    }\r\n  }\r\n\r\n  startPeriodicTokenCheck(repeatAfterSeconds: number): Observable<unknown> {\r\n    const millisecondsDelayBetweenTokenCheck = repeatAfterSeconds * 1000;\r\n\r\n    return new Observable((subscriber) => {\r\n      let intervalId;\r\n\r\n      this.zone.runOutsideAngular(() => {\r\n        intervalId = setInterval(() => this.zone.run(() => subscriber.next()), millisecondsDelayBetweenTokenCheck);\r\n      });\r\n\r\n      return (): void => {\r\n        clearInterval(intervalId);\r\n      };\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { FlowsDataService } from '../flows/flows-data.service';\r\nimport { FlowsService } from '../flows/flows.service';\r\nimport { IntervalService } from './interval.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ImplicitFlowCallbackService {\r\n  constructor(\r\n    private readonly flowsService: FlowsService,\r\n    private readonly router: Router,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly intervalService: IntervalService\r\n  ) {}\r\n\r\n  authenticatedImplicitFlowCallback(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    hash?: string\r\n  ): Observable<CallbackContext> {\r\n    const isRenewProcess = this.flowsDataService.isSilentRenewRunning(config);\r\n    const { triggerAuthorizationResultEvent, postLoginRoute, unauthorizedRoute } = config;\r\n\r\n    return this.flowsService.processImplicitFlowCallback(config, allConfigs, hash).pipe(\r\n      tap((callbackContext) => {\r\n        if (!triggerAuthorizationResultEvent && !callbackContext.isRenewProcess) {\r\n          this.router.navigateByUrl(postLoginRoute);\r\n        }\r\n      }),\r\n      catchError((error) => {\r\n        this.flowsDataService.resetSilentRenewRunning(config);\r\n        this.intervalService.stopPeriodicTokenCheck();\r\n        if (!triggerAuthorizationResultEvent && !isRenewProcess) {\r\n          this.router.navigateByUrl(unauthorizedRoute);\r\n        }\r\n\r\n        return throwError(() => new Error(error));\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, Subject, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { AuthStateService } from '../auth-state/auth-state.service';\r\nimport { ImplicitFlowCallbackService } from '../callback/implicit-flow-callback.service';\r\nimport { IntervalService } from '../callback/interval.service';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { FlowsDataService } from '../flows/flows-data.service';\r\nimport { FlowsService } from '../flows/flows.service';\r\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { ValidationResult } from '../validation/validation-result';\r\nimport { OpenIdConfiguration } from './../config/openid-configuration';\r\nimport { IFrameService } from './existing-iframe.service';\r\n\r\nconst IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';\r\n\r\n@Injectable()\r\nexport class SilentRenewService {\r\n  private readonly refreshSessionWithIFrameCompletedInternal$ = new Subject<CallbackContext>();\r\n\r\n  get refreshSessionWithIFrameCompleted$(): Observable<CallbackContext> {\r\n    return this.refreshSessionWithIFrameCompletedInternal$.asObservable();\r\n  }\r\n\r\n  constructor(\r\n    private readonly iFrameService: IFrameService,\r\n    private readonly flowsService: FlowsService,\r\n    private readonly resetAuthDataService: ResetAuthDataService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly flowHelper: FlowHelper,\r\n    private readonly implicitFlowCallbackService: ImplicitFlowCallbackService,\r\n    private readonly intervalService: IntervalService\r\n  ) {}\r\n\r\n  getOrCreateIframe(config: OpenIdConfiguration): HTMLIFrameElement {\r\n    const existingIframe = this.getExistingIframe();\r\n\r\n    if (!existingIframe) {\r\n      return this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_SILENT_RENEW_IDENTIFIER, config);\r\n    }\r\n\r\n    return existingIframe;\r\n  }\r\n\r\n  isSilentRenewConfigured(configuration: OpenIdConfiguration): boolean {\r\n    const { useRefreshToken, silentRenew } = configuration;\r\n\r\n    return !useRefreshToken && silentRenew;\r\n  }\r\n\r\n  codeFlowCallbackSilentRenewIframe(\r\n    urlParts: any,\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<CallbackContext> {\r\n    const params = new HttpParams({\r\n      fromString: urlParts[1],\r\n    });\r\n\r\n    const error = params.get('error');\r\n\r\n    if (error) {\r\n      this.authStateService.updateAndPublishAuthState({\r\n        isAuthenticated: false,\r\n        validationResult: ValidationResult.LoginRequired,\r\n        isRenewProcess: true,\r\n      });\r\n      this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n      this.flowsDataService.setNonce('', config);\r\n      this.intervalService.stopPeriodicTokenCheck();\r\n\r\n      return throwError(() => new Error(error));\r\n    }\r\n\r\n    const code = params.get('code');\r\n    const state = params.get('state');\r\n    const sessionState = params.get('session_state');\r\n\r\n    const callbackContext = {\r\n      code,\r\n      refreshToken: null,\r\n      state,\r\n      sessionState,\r\n      authResult: null,\r\n      isRenewProcess: true,\r\n      jwtKeys: null,\r\n      validationResult: null,\r\n      existingIdToken: null,\r\n    };\r\n\r\n    return this.flowsService.processSilentRenewCodeFlowCallback(callbackContext, config, allConfigs).pipe(\r\n      catchError(() => {\r\n        this.intervalService.stopPeriodicTokenCheck();\r\n        this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n\r\n        return throwError(() => new Error(error));\r\n      })\r\n    );\r\n  }\r\n\r\n  silentRenewEventHandler(e: CustomEvent, config: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): void {\r\n    this.loggerService.logDebug(config, 'silentRenewEventHandler');\r\n    if (!e.detail) {\r\n      return;\r\n    }\r\n\r\n    let callback$ = of(null) as Observable<CallbackContext>;\r\n    const isCodeFlow = this.flowHelper.isCurrentFlowCodeFlow(config);\r\n\r\n    if (isCodeFlow) {\r\n      const urlParts = e.detail.toString().split('?');\r\n\r\n      callback$ = this.codeFlowCallbackSilentRenewIframe(urlParts, config, allConfigs);\r\n    } else {\r\n      callback$ = this.implicitFlowCallbackService.authenticatedImplicitFlowCallback(config, allConfigs, e.detail);\r\n    }\r\n\r\n    callback$.subscribe({\r\n      next: (callbackContext) => {\r\n        this.refreshSessionWithIFrameCompletedInternal$.next(callbackContext);\r\n        this.flowsDataService.resetSilentRenewRunning(config);\r\n      },\r\n      error: (err: any) => {\r\n        this.loggerService.logError(config, 'Error: ' + err);\r\n        this.refreshSessionWithIFrameCompletedInternal$.next(null);\r\n        this.flowsDataService.resetSilentRenewRunning(config);\r\n      },\r\n    });\r\n  }\r\n\r\n  private getExistingIframe(): HTMLIFrameElement {\r\n    return this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { FlowsDataService } from '../flows/flows-data.service';\r\nimport { FlowsService } from '../flows/flows.service';\r\nimport { IntervalService } from './interval.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CodeFlowCallbackService {\r\n  constructor(\r\n    private readonly flowsService: FlowsService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly intervalService: IntervalService,\r\n    private readonly router: Router\r\n  ) {}\r\n\r\n  authenticatedCallbackWithCode(\r\n    urlToCheck: string,\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<CallbackContext> {\r\n    const isRenewProcess = this.flowsDataService.isSilentRenewRunning(config);\r\n    const { triggerAuthorizationResultEvent, postLoginRoute, unauthorizedRoute } = config;\r\n\r\n    return this.flowsService.processCodeFlowCallback(urlToCheck, config, allConfigs).pipe(\r\n      tap((callbackContext) => {\r\n        this.flowsDataService.resetCodeFlowInProgress(config);\r\n        if (!triggerAuthorizationResultEvent && !callbackContext.isRenewProcess) {\r\n          this.router.navigateByUrl(postLoginRoute);\r\n        }\r\n      }),\r\n      catchError((error) => {\r\n        this.flowsDataService.resetSilentRenewRunning(config);\r\n        this.flowsDataService.resetCodeFlowInProgress(config);\r\n        this.intervalService.stopPeriodicTokenCheck();\r\n        if (!triggerAuthorizationResultEvent && !isRenewProcess) {\r\n          this.router.navigateByUrl(unauthorizedRoute);\r\n        }\r\n\r\n        return throwError(() => new Error(error));\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { UrlService } from '../utils/url/url.service';\r\nimport { CodeFlowCallbackService } from './code-flow-callback.service';\r\nimport { ImplicitFlowCallbackService } from './implicit-flow-callback.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CallbackService {\r\n  private readonly stsCallbackInternal$ = new Subject<void>();\r\n\r\n  get stsCallback$(): Observable<unknown> {\r\n    return this.stsCallbackInternal$.asObservable();\r\n  }\r\n\r\n  constructor(\r\n    private readonly urlService: UrlService,\r\n    private readonly flowHelper: FlowHelper,\r\n    private readonly implicitFlowCallbackService: ImplicitFlowCallbackService,\r\n    private readonly codeFlowCallbackService: CodeFlowCallbackService\r\n  ) {}\r\n\r\n  isCallback(currentUrl: string): boolean {\r\n    return this.urlService.isCallbackFromSts(currentUrl);\r\n  }\r\n\r\n  handleCallbackAndFireEvents(\r\n    currentCallbackUrl: string,\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<CallbackContext> {\r\n    let callback$: Observable<any>;\r\n\r\n    if (this.flowHelper.isCurrentFlowCodeFlow(config)) {\r\n      callback$ = this.codeFlowCallbackService.authenticatedCallbackWithCode(currentCallbackUrl, config, allConfigs);\r\n    } else if (this.flowHelper.isCurrentFlowAnyImplicitFlow(config)) {\r\n      if (currentCallbackUrl?.includes('#')) {\r\n        let hash = currentCallbackUrl.substring(currentCallbackUrl.indexOf('#') + 1);\r\n\r\n        callback$ = this.implicitFlowCallbackService.authenticatedImplicitFlowCallback(config, allConfigs, hash);\r\n      } else {\r\n        callback$ = this.implicitFlowCallbackService.authenticatedImplicitFlowCallback(config, allConfigs);\r\n      }\r\n    }\r\n\r\n    return callback$.pipe(tap(() => this.stsCallbackInternal$.next()));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { map, retry } from 'rxjs/operators';\r\nimport { DataService } from '../../api/data.service';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { OpenIdConfiguration } from '../openid-configuration';\r\nimport { AuthWellKnownEndpoints } from './auth-well-known-endpoints';\r\n\r\nconst WELL_KNOWN_SUFFIX = `/.well-known/openid-configuration`;\r\n\r\n@Injectable()\r\nexport class AuthWellKnownDataService {\r\n  constructor(private readonly http: DataService, private readonly loggerService: LoggerService) {}\r\n\r\n  getWellKnownEndPointsForConfig(config: OpenIdConfiguration): Observable<AuthWellKnownEndpoints> {\r\n    const { authWellknownEndpointUrl } = config;\r\n\r\n    if (!authWellknownEndpointUrl) {\r\n      const errorMessage = 'no authWellknownEndpoint given!';\r\n\r\n      this.loggerService.logError(config, errorMessage);\r\n\r\n      return throwError(() => new Error(errorMessage));\r\n    }\r\n\r\n    return this.getWellKnownDocument(authWellknownEndpointUrl, config).pipe(\r\n      map(\r\n        (wellKnownEndpoints) =>\r\n          ({\r\n            issuer: wellKnownEndpoints.issuer,\r\n            jwksUri: wellKnownEndpoints.jwks_uri,\r\n            authorizationEndpoint: wellKnownEndpoints.authorization_endpoint,\r\n            tokenEndpoint: wellKnownEndpoints.token_endpoint,\r\n            userInfoEndpoint: wellKnownEndpoints.userinfo_endpoint,\r\n            endSessionEndpoint: wellKnownEndpoints.end_session_endpoint,\r\n            checkSessionIframe: wellKnownEndpoints.check_session_iframe,\r\n            revocationEndpoint: wellKnownEndpoints.revocation_endpoint,\r\n            introspectionEndpoint: wellKnownEndpoints.introspection_endpoint,\r\n            parEndpoint: wellKnownEndpoints.pushed_authorization_request_endpoint,\r\n          } as AuthWellKnownEndpoints)\r\n      )\r\n    );\r\n  }\r\n\r\n  private getWellKnownDocument(wellKnownEndpoint: string, config: OpenIdConfiguration): Observable<any> {\r\n    let url = wellKnownEndpoint;\r\n\r\n    if (!wellKnownEndpoint.includes(WELL_KNOWN_SUFFIX)) {\r\n      url = `${wellKnownEndpoint}${WELL_KNOWN_SUFFIX}`;\r\n    }\r\n\r\n    return this.http.get<any>(url, config).pipe(retry(2));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of,  throwError } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { EventTypes } from '../../public-events/event-types';\r\nimport { PublicEventsService } from '../../public-events/public-events.service';\r\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\r\nimport { OpenIdConfiguration } from '../openid-configuration';\r\nimport { AuthWellKnownDataService } from './auth-well-known-data.service';\r\nimport { AuthWellKnownEndpoints } from './auth-well-known-endpoints';\r\n\r\n@Injectable()\r\nexport class AuthWellKnownService {\r\n  constructor(\r\n    private readonly dataService: AuthWellKnownDataService,\r\n    private readonly publicEventsService: PublicEventsService,\r\n    private readonly storagePersistenceService: StoragePersistenceService\r\n  ) {}\r\n\r\n  storeWellKnownEndpoints(config: OpenIdConfiguration, mappedWellKnownEndpoints: AuthWellKnownEndpoints): void {\r\n    this.storagePersistenceService.write('authWellKnownEndPoints', mappedWellKnownEndpoints, config);\r\n  }\r\n\r\n  queryAndStoreAuthWellKnownEndPoints(config: OpenIdConfiguration): Observable<AuthWellKnownEndpoints> {\r\n    const alreadySavedWellKnownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', config);\r\n\r\n    if (!!alreadySavedWellKnownEndpoints) {\r\n      return of(alreadySavedWellKnownEndpoints);\r\n    }\r\n\r\n    return this.dataService.getWellKnownEndPointsForConfig(config).pipe(\r\n      tap((mappedWellKnownEndpoints) => this.storeWellKnownEndpoints(config, mappedWellKnownEndpoints)),\r\n      catchError((error) => {\r\n        this.publicEventsService.fireEvent(EventTypes.ConfigLoadingFailed, null);\r\n\r\n        return throwError(() => new Error(error));\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable, Renderer2, RendererFactory2 } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { UrlService } from '../utils/url/url.service';\r\nimport { SilentRenewService } from './silent-renew.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RefreshSessionIframeService {\r\n  private readonly renderer: Renderer2;\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT) private readonly doc: any,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly urlService: UrlService,\r\n    private readonly silentRenewService: SilentRenewService,\r\n    rendererFactory: RendererFactory2\r\n  ) {\r\n    this.renderer = rendererFactory.createRenderer(null, null);\r\n  }\r\n\r\n  refreshSessionWithIframe(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    customParams?: { [key: string]: string | number | boolean }\r\n  ): Observable<boolean> {\r\n    this.loggerService.logDebug(config, 'BEGIN refresh session Authorize Iframe renew');\r\n\r\n    return this.urlService.getRefreshSessionSilentRenewUrl(config, customParams).pipe(\r\n      switchMap((url) => {\r\n        return this.sendAuthorizeRequestUsingSilentRenew(url, config, allConfigs);\r\n      })\r\n    );\r\n  }\r\n\r\n  private sendAuthorizeRequestUsingSilentRenew(\r\n    url: string,\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<boolean> {\r\n    const sessionIframe = this.silentRenewService.getOrCreateIframe(config);\r\n\r\n    this.initSilentRenewRequest(config, allConfigs);\r\n    this.loggerService.logDebug(config, 'sendAuthorizeRequestUsingSilentRenew for URL:' + url);\r\n\r\n    return new Observable((observer) => {\r\n      const onLoadHandler = (): void => {\r\n        sessionIframe.removeEventListener('load', onLoadHandler);\r\n        this.loggerService.logDebug(config, 'removed event listener from IFrame');\r\n        observer.next(true);\r\n        observer.complete();\r\n      };\r\n\r\n      sessionIframe.addEventListener('load', onLoadHandler);\r\n      sessionIframe.contentWindow.location.replace(url);\r\n    });\r\n  }\r\n\r\n  private initSilentRenewRequest(config: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): void {\r\n    const instanceId = Math.random();\r\n\r\n    const initDestroyHandler = this.renderer.listen('window', 'oidc-silent-renew-init', (e: CustomEvent) => {\r\n      if (e.detail !== instanceId) {\r\n        initDestroyHandler();\r\n        renewDestroyHandler();\r\n      }\r\n    });\r\n    const renewDestroyHandler = this.renderer.listen('window', 'oidc-silent-renew-message', (e) =>\r\n      this.silentRenewService.silentRenewEventHandler(e, config, allConfigs)\r\n    );\r\n\r\n    this.doc.defaultView.dispatchEvent(\r\n      new CustomEvent('oidc-silent-renew-init', {\r\n        detail: instanceId,\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { FlowsService } from '../flows/flows.service';\r\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { IntervalService } from './interval.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RefreshSessionRefreshTokenService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly resetAuthDataService: ResetAuthDataService,\r\n    private readonly flowsService: FlowsService,\r\n    private readonly intervalService: IntervalService\r\n  ) {}\r\n\r\n  refreshSessionWithRefreshTokens(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    customParamsRefresh?: { [key: string]: string | number | boolean }\r\n  ): Observable<CallbackContext> {\r\n    this.loggerService.logDebug(config, 'BEGIN refresh session Authorize');\r\n\r\n    return this.flowsService.processRefreshToken(config, allConfigs, customParamsRefresh).pipe(\r\n      catchError((error) => {\r\n        this.intervalService.stopPeriodicTokenCheck();\r\n        this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n\r\n        return throwError(() => new Error(error));\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { forkJoin, Observable, of, throwError, TimeoutError, timer } from 'rxjs';\r\nimport { map, mergeMap, retryWhen, switchMap, take, timeout } from 'rxjs/operators';\r\nimport { AuthStateService } from '../auth-state/auth-state.service';\r\nimport { AuthWellKnownService } from '../config/auth-well-known/auth-well-known.service';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { FlowsDataService } from '../flows/flows-data.service';\r\nimport { RefreshSessionIframeService } from '../iframe/refresh-session-iframe.service';\r\nimport { SilentRenewService } from '../iframe/silent-renew.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { LoginResponse } from '../login/login-response';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { UserService } from '../user-data/user.service';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { RefreshSessionRefreshTokenService } from './refresh-session-refresh-token.service';\r\n\r\nexport const MAX_RETRY_ATTEMPTS = 3;\r\n@Injectable({ providedIn: 'root' })\r\nexport class RefreshSessionService {\r\n  constructor(\r\n    private readonly flowHelper: FlowHelper,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly silentRenewService: SilentRenewService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly authWellKnownService: AuthWellKnownService,\r\n    private readonly refreshSessionIframeService: RefreshSessionIframeService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly refreshSessionRefreshTokenService: RefreshSessionRefreshTokenService,\r\n    private readonly userService: UserService\r\n  ) {}\r\n\r\n  userForceRefreshSession(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    extraCustomParams?: { [key: string]: string | number | boolean }\r\n  ): Observable<LoginResponse> {\r\n    this.persistCustomParams(extraCustomParams, config);\r\n\r\n    return this.forceRefreshSession(config, allConfigs, extraCustomParams);\r\n  }\r\n\r\n  forceRefreshSession(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    extraCustomParams?: { [key: string]: string | number | boolean }\r\n  ): Observable<LoginResponse> {\r\n    const { customParamsRefreshTokenRequest, configId } = config;\r\n    const mergedParams = { ...customParamsRefreshTokenRequest, ...extraCustomParams };\r\n\r\n    if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {\r\n      return this.startRefreshSession(config, allConfigs, mergedParams).pipe(\r\n        map(() => {\r\n          const isAuthenticated = this.authStateService.areAuthStorageTokensValid(config);\r\n\r\n          if (isAuthenticated) {\r\n            return {\r\n              idToken: this.authStateService.getIdToken(config),\r\n              accessToken: this.authStateService.getAccessToken(config),\r\n              userData: this.userService.getUserDataFromStore(config),\r\n              isAuthenticated,\r\n              configId,\r\n            } as LoginResponse;\r\n          }\r\n\r\n          return null;\r\n        })\r\n      );\r\n    }\r\n\r\n    const { silentRenewTimeoutInSeconds } = config;\r\n    const timeOutTime = silentRenewTimeoutInSeconds * 1000;\r\n\r\n    return forkJoin([\r\n      this.startRefreshSession(config, allConfigs, extraCustomParams),\r\n      this.silentRenewService.refreshSessionWithIFrameCompleted$.pipe(take(1)),\r\n    ]).pipe(\r\n      timeout(timeOutTime),\r\n      retryWhen(this.timeoutRetryStrategy.bind(this)),\r\n      map(([_, callbackContext]) => {\r\n        const isAuthenticated = this.authStateService.areAuthStorageTokensValid(config);\r\n\r\n        if (isAuthenticated) {\r\n          return {\r\n            idToken: callbackContext?.authResult?.id_token,\r\n            accessToken: callbackContext?.authResult?.access_token,\r\n            userData: this.userService.getUserDataFromStore(config),\r\n            isAuthenticated,\r\n            configId,\r\n          };\r\n        }\r\n\r\n        return null;\r\n      })\r\n    );\r\n  }\r\n\r\n  private persistCustomParams(extraCustomParams: { [key: string]: string | number | boolean }, config: OpenIdConfiguration): void {\r\n    const { useRefreshToken } = config;\r\n\r\n    if (extraCustomParams) {\r\n      if (useRefreshToken) {\r\n        this.storagePersistenceService.write('storageCustomParamsRefresh', extraCustomParams, config);\r\n      } else {\r\n        this.storagePersistenceService.write('storageCustomParamsAuthRequest', extraCustomParams, config);\r\n      }\r\n    }\r\n  }\r\n\r\n  private startRefreshSession(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    extraCustomParams?: { [key: string]: string | number | boolean }\r\n  ): Observable<boolean | CallbackContext | null> {\r\n    const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning(config);\r\n\r\n    this.loggerService.logDebug(config, `Checking: silentRenewRunning: ${isSilentRenewRunning}`);\r\n    const shouldBeExecuted = !isSilentRenewRunning;\r\n\r\n    if (!shouldBeExecuted) {\r\n      return of(null);\r\n    }\r\n\r\n    return this.authWellKnownService.queryAndStoreAuthWellKnownEndPoints(config).pipe(\r\n      switchMap(() => {\r\n        this.flowsDataService.setSilentRenewRunning(config);\r\n\r\n        if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {\r\n          // Refresh Session using Refresh tokens\r\n          return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(config, allConfigs, extraCustomParams);\r\n        }\r\n\r\n        return this.refreshSessionIframeService.refreshSessionWithIframe(config, allConfigs, extraCustomParams);\r\n      })\r\n    );\r\n  }\r\n\r\n  private timeoutRetryStrategy(errorAttempts: Observable<any>, config: OpenIdConfiguration): Observable<number> {\r\n    return errorAttempts.pipe(\r\n      mergeMap((error, index) => {\r\n        const scalingDuration = 1000;\r\n        const currentAttempt = index + 1;\r\n\r\n        if (!(error instanceof TimeoutError) || currentAttempt > MAX_RETRY_ATTEMPTS) {\r\n          return throwError(() => new Error(error));\r\n        }\r\n\r\n        this.loggerService.logDebug(config, `forceRefreshSession timeout. Attempt #${currentAttempt}`);\r\n\r\n        this.flowsDataService.resetSilentRenewRunning(config);\r\n\r\n        return timer(currentAttempt * scalingDuration);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { LogLevel } from '../logging/log-level';\r\nimport { OpenIdConfiguration } from './openid-configuration';\r\n\r\nexport const DEFAULT_CONFIG: OpenIdConfiguration = {\r\n  authority: 'https://please_set',\r\n  authWellknownEndpointUrl: '',\r\n  authWellknownEndpoints: null,\r\n  redirectUrl: 'https://please_set',\r\n  clientId: 'please_set',\r\n  responseType: 'code',\r\n  scope: 'openid email profile',\r\n  hdParam: '',\r\n  postLogoutRedirectUri: 'https://please_set',\r\n  startCheckSession: false,\r\n  silentRenew: false,\r\n  silentRenewUrl: 'https://please_set',\r\n  silentRenewTimeoutInSeconds: 20,\r\n  renewTimeBeforeTokenExpiresInSeconds: 0,\r\n  useRefreshToken: false,\r\n  usePushedAuthorisationRequests: false,\r\n  ignoreNonceAfterRefresh: false,\r\n  postLoginRoute: '/',\r\n  forbiddenRoute: '/forbidden',\r\n  unauthorizedRoute: '/unauthorized',\r\n  autoUserInfo: true,\r\n  autoCleanStateAfterAuthentication: true,\r\n  triggerAuthorizationResultEvent: false,\r\n  logLevel: LogLevel.Warn,\r\n  issValidationOff: false,\r\n  historyCleanupOff: false,\r\n  maxIdTokenIatOffsetAllowedInSeconds: 120,\r\n  disableIatOffsetValidation: false,\r\n  customParamsAuthRequest: {},\r\n  customParamsRefreshTokenRequest: {},\r\n  customParamsEndSessionRequest: {},\r\n  customParamsCodeRequest: {},\r\n  disableRefreshIdTokenAuthTimeValidation: false,\r\n  enableIdTokenExpiredValidationInRenew: true,\r\n  tokenRefreshInSeconds: 4,\r\n  refreshTokenRetryInSeconds: 3,\r\n  ngswBypass: false,\r\n};\r\n","import { OpenIdConfiguration } from '../openid-configuration';\n\nexport interface Rule {\n  validate(passedConfig: OpenIdConfiguration): RuleValidationResult;\n}\n\nexport interface RuleValidationResult {\n  result: boolean;\n  messages: string[];\n  level: Level;\n}\n\nexport const POSITIVE_VALIDATION_RESULT = {\n  result: true,\n  messages: [],\n  level: null,\n};\n\nexport type Level = 'warning' | 'error';\n","import { OpenIdConfiguration } from '../../openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const ensureAuthority = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  if (!passedConfig.authority) {\n    return {\n      result: false,\n      messages: ['The authority URL MUST be provided in the configuration! '],\n      level: 'error',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const ensureClientId = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  if (!passedConfig.clientId) {\n    return {\n      result: false,\n      messages: ['The clientId is required and missing from your config!'],\n      level: 'error',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nconst createIdentifierToCheck = (passedConfig: OpenIdConfiguration): string => {\n  if (!passedConfig) {\n    return null;\n  }\n\n  const { authority, clientId, scope } = passedConfig;\n\n  return `${authority}${clientId}${scope}`;\n};\n\nconst arrayHasDuplicates = (array: string[]): boolean => new Set(array).size !== array.length;\n\nexport const ensureNoDuplicatedConfigsRule = (passedConfigs: OpenIdConfiguration[]): RuleValidationResult => {\n  const allIdentifiers = passedConfigs.map((x) => createIdentifierToCheck(x));\n\n  const someAreNull = allIdentifiers.some((x) => x === null);\n\n  if (someAreNull) {\n    return {\n      result: false,\n      messages: [`Please make sure you add an object with a 'config' property: ....({ config }) instead of ...(config)`],\n      level: 'error',\n    };\n  }\n\n  const hasDuplicates = arrayHasDuplicates(allIdentifiers);\n\n  if (hasDuplicates) {\n    return {\n      result: false,\n      messages: ['You added multiple configs with the same authority, clientId and scope'],\n      level: 'warning',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const ensureRedirectRule = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  if (!passedConfig.redirectUrl) {\n    return {\n      result: false,\n      messages: ['The redirectUrl is required and missing from your config'],\n      level: 'error',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const ensureSilentRenewUrlWhenNoRefreshTokenUsed = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  const usesSilentRenew = passedConfig.silentRenew;\n  const usesRefreshToken = passedConfig.useRefreshToken;\n  const hasSilentRenewUrl = passedConfig.silentRenewUrl;\n\n  if (usesSilentRenew && !usesRefreshToken && !hasSilentRenewUrl) {\n    return {\n      result: false,\n      messages: ['Please provide a silent renew URL if using renew and not refresh tokens'],\n      level: 'error',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const useOfflineScopeWithSilentRenew = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  const hasRefreshToken = passedConfig.useRefreshToken;\n  const hasSilentRenew = passedConfig.silentRenew;\n  const scope = passedConfig.scope || '';\n  const hasOfflineScope = scope.split(' ').includes('offline_access');\n\n  if (hasRefreshToken && hasSilentRenew && !hasOfflineScope) {\n    return {\n      result: false,\n      messages: ['When using silent renew and refresh tokens please set the `offline_access` scope'],\n      level: 'warning',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { ensureAuthority } from './ensure-authority.rule';\nimport { ensureClientId } from './ensure-clientId.rule';\nimport { ensureNoDuplicatedConfigsRule } from './ensure-no-duplicated-configs.rule';\nimport { ensureRedirectRule } from './ensure-redirect-url.rule';\nimport { ensureSilentRenewUrlWhenNoRefreshTokenUsed } from './ensure-silentRenewUrl-with-no-refreshtokens.rule';\nimport { useOfflineScopeWithSilentRenew } from './use-offline-scope-with-silent-renew.rule';\n\nexport const allRules = [\n  ensureAuthority,\n  useOfflineScopeWithSilentRenew,\n  ensureRedirectRule,\n  ensureClientId,\n  ensureSilentRenewUrlWhenNoRefreshTokenUsed,\n];\n\nexport const allMultipleConfigRules = [ensureNoDuplicatedConfigsRule];\n","import { Injectable } from '@angular/core';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { OpenIdConfiguration } from '../openid-configuration';\r\nimport { Level, RuleValidationResult } from './rule';\r\nimport { allRules } from './rules';\r\nimport { allMultipleConfigRules } from './rules/index';\r\n\r\n@Injectable()\r\nexport class ConfigValidationService {\r\n  constructor(private readonly loggerService: LoggerService) {}\r\n\r\n  validateConfigs(passedConfigs: OpenIdConfiguration[]): boolean {\r\n    return this.validateConfigsInternal(passedConfigs ?? [], allMultipleConfigRules);\r\n  }\r\n\r\n  validateConfig(passedConfig: OpenIdConfiguration): boolean {\r\n    return this.validateConfigInternal(passedConfig, allRules);\r\n  }\r\n\r\n  private validateConfigsInternal(passedConfigs: OpenIdConfiguration[], allRulesToUse: any[]): boolean {\r\n    const allValidationResults = allRulesToUse.map((rule) => rule(passedConfigs));\r\n\r\n    let overallErrorCount = 0;\r\n\r\n    passedConfigs.forEach((passedConfig) => {\r\n      const errorCount = this.processValidationResultsAndGetErrorCount(allValidationResults, passedConfig);\r\n\r\n      overallErrorCount += errorCount;\r\n    });\r\n\r\n    return overallErrorCount === 0;\r\n  }\r\n\r\n  private validateConfigInternal(passedConfig: OpenIdConfiguration, allRulesToUse: any[]): boolean {\r\n    const allValidationResults = allRulesToUse.map((rule) => rule(passedConfig));\r\n\r\n    const errorCount = this.processValidationResultsAndGetErrorCount(allValidationResults, passedConfig);\r\n\r\n    return errorCount === 0;\r\n  }\r\n\r\n  private processValidationResultsAndGetErrorCount(allValidationResults: RuleValidationResult[], config: OpenIdConfiguration): number {\r\n    const allMessages = allValidationResults.filter((x) => x.messages.length > 0);\r\n    const allErrorMessages = this.getAllMessagesOfType('error', allMessages);\r\n    const allWarnings = this.getAllMessagesOfType('warning', allMessages);\r\n\r\n    allErrorMessages.forEach((message) => this.loggerService.logError(config, message));\r\n    allWarnings.forEach((message) => this.loggerService.logWarning(config, message));\r\n\r\n    return allErrorMessages.length;\r\n  }\r\n\r\n  private getAllMessagesOfType(type: Level, results: RuleValidationResult[]): string[] {\r\n    const allMessages = results.filter((x) => x.level === type).map((result) => result.messages);\r\n\r\n    return allMessages.reduce((acc, val) => acc.concat(val), []);\r\n  }\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\r\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class PlatformProvider {\r\n  isBrowser(): boolean {\r\n    return isPlatformBrowser(this.platformId);\r\n  }\r\n\r\n  constructor(@Inject(PLATFORM_ID) private readonly platformId: string) {}\r\n}\r\n","import { Provider } from '@angular/core';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../openid-configuration';\r\n\r\nexport class OpenIdConfigLoader {\r\n  loader?: Provider;\r\n}\r\n\r\nexport abstract class StsConfigLoader {\r\n  abstract loadConfigs(): Observable<OpenIdConfiguration[]>;\r\n}\r\n\r\nexport class StsConfigStaticLoader implements StsConfigLoader {\r\n  constructor(private readonly passedConfigs: OpenIdConfiguration | OpenIdConfiguration[]) {}\r\n\r\n  loadConfigs(): Observable<OpenIdConfiguration[]> {\r\n    if (Array.isArray(this.passedConfigs)) {\r\n      return of(this.passedConfigs);\r\n    }\r\n\r\n    return of([this.passedConfigs]);\r\n  }\r\n}\r\n\r\nexport class StsConfigHttpLoader implements StsConfigLoader {\r\n  constructor(\r\n    private readonly configs$: Observable<OpenIdConfiguration> | Observable<OpenIdConfiguration>[] | Observable<OpenIdConfiguration[]>\r\n  ) {}\r\n\r\n  loadConfigs(): Observable<OpenIdConfiguration[]> {\r\n    if (Array.isArray(this.configs$)) {\r\n      return forkJoin(this.configs$);\r\n    }\r\n\r\n    const singleConfigOrArray = this.configs$ as Observable<unknown>;\r\n\r\n    return singleConfigOrArray.pipe(\r\n      map((value: unknown) => {\r\n        if (Array.isArray(value)) {\r\n          return value as OpenIdConfiguration[];\r\n        }\r\n\r\n        return [value] as OpenIdConfiguration[];\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { concatMap, map } from 'rxjs/operators';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { EventTypes } from '../public-events/event-types';\r\nimport { PublicEventsService } from '../public-events/public-events.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { PlatformProvider } from '../utils/platform-provider/platform.provider';\r\nimport { AuthWellKnownService } from './auth-well-known/auth-well-known.service';\r\nimport { DEFAULT_CONFIG } from './default-config';\r\nimport { StsConfigLoader } from './loader/config-loader';\r\nimport { OpenIdConfiguration } from './openid-configuration';\r\nimport { ConfigValidationService } from './validation/config-validation.service';\r\n\r\n@Injectable()\r\nexport class ConfigurationService {\r\n  private configsInternal: Record<string, OpenIdConfiguration> = {};\r\n\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly publicEventsService: PublicEventsService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly configValidationService: ConfigValidationService,\r\n    private readonly platformProvider: PlatformProvider,\r\n    private readonly authWellKnownService: AuthWellKnownService,\r\n    private readonly loader: StsConfigLoader\r\n  ) {}\r\n\r\n  hasManyConfigs(): boolean {\r\n    return Object.keys(this.configsInternal).length > 1;\r\n  }\r\n\r\n  getAllConfigurations(): OpenIdConfiguration[] {\r\n    return Object.values(this.configsInternal);\r\n  }\r\n\r\n  getOpenIDConfiguration(configId?: string): Observable<OpenIdConfiguration> {\r\n    if (this.configsAlreadySaved()) {\r\n      return of(this.getConfig(configId));\r\n    }\r\n\r\n    return this.getOpenIDConfigurations(configId).pipe(map((result) => result.currentConfig));\r\n  }\r\n\r\n  getOpenIDConfigurations(configId?: string): Observable<{ allConfigs; currentConfig }> {\r\n    return this.loadConfigs().pipe(\r\n      concatMap((allConfigs) => this.prepareAndSaveConfigs(allConfigs)),\r\n      map((allPreparedConfigs) => ({\r\n        allConfigs: allPreparedConfigs,\r\n        currentConfig: this.getConfig(configId),\r\n      }))\r\n    );\r\n  }\r\n\r\n  hasAtLeastOneConfig(): boolean {\r\n    return Object.keys(this.configsInternal).length > 0;\r\n  }\r\n\r\n  private saveConfig(readyConfig: OpenIdConfiguration): void {\r\n    const { configId } = readyConfig;\r\n\r\n    this.configsInternal[configId] = readyConfig;\r\n  }\r\n\r\n  private loadConfigs(): Observable<OpenIdConfiguration[]> {\r\n    return this.loader.loadConfigs();\r\n  }\r\n\r\n  private configsAlreadySaved(): boolean {\r\n    return this.hasAtLeastOneConfig();\r\n  }\r\n\r\n  private getConfig(configId: string): OpenIdConfiguration {\r\n    if (!!configId) {\r\n      return this.configsInternal[configId] || null;\r\n    }\r\n\r\n    const [, value] = Object.entries(this.configsInternal)[0] || [[null, null]];\r\n\r\n    return value || null;\r\n  }\r\n\r\n  private prepareAndSaveConfigs(passedConfigs: OpenIdConfiguration[]): Observable<OpenIdConfiguration[]> {\r\n    if (!this.configValidationService.validateConfigs(passedConfigs)) {\r\n      return of(null);\r\n    }\r\n\r\n    this.createUniqueIds(passedConfigs);\r\n    const allHandleConfigs$ = passedConfigs.map((x) => this.handleConfig(x));\r\n\r\n    return forkJoin(allHandleConfigs$);\r\n  }\r\n\r\n  private createUniqueIds(passedConfigs: OpenIdConfiguration[]): void {\r\n    passedConfigs.forEach((config, index) => {\r\n      if (!config.configId) {\r\n        config.configId = `${index}-${config.clientId}`;\r\n      }\r\n    });\r\n  }\r\n\r\n  private handleConfig(passedConfig: OpenIdConfiguration): Observable<OpenIdConfiguration> {\r\n    if (!this.configValidationService.validateConfig(passedConfig)) {\r\n      this.loggerService.logError(passedConfig, 'Validation of config rejected with errors. Config is NOT set.');\r\n\r\n      return of(null);\r\n    }\r\n\r\n    if (!passedConfig.authWellknownEndpointUrl) {\r\n      passedConfig.authWellknownEndpointUrl = passedConfig.authority;\r\n    }\r\n\r\n    const usedConfig = this.prepareConfig(passedConfig);\r\n\r\n    this.saveConfig(usedConfig);\r\n\r\n    const configWithAuthWellKnown = this.enhanceConfigWithWellKnownEndpoint(usedConfig);\r\n\r\n    this.publicEventsService.fireEvent<OpenIdConfiguration>(EventTypes.ConfigLoaded, configWithAuthWellKnown);\r\n\r\n    return of(usedConfig);\r\n  }\r\n\r\n  private enhanceConfigWithWellKnownEndpoint(configuration: OpenIdConfiguration): OpenIdConfiguration {\r\n    const alreadyExistingAuthWellKnownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\r\n\r\n    if (!!alreadyExistingAuthWellKnownEndpoints) {\r\n      configuration.authWellknownEndpoints = alreadyExistingAuthWellKnownEndpoints;\r\n\r\n      return configuration;\r\n    }\r\n\r\n    const passedAuthWellKnownEndpoints = configuration.authWellknownEndpoints;\r\n\r\n    if (!!passedAuthWellKnownEndpoints) {\r\n      this.authWellKnownService.storeWellKnownEndpoints(configuration, passedAuthWellKnownEndpoints);\r\n      configuration.authWellknownEndpoints = passedAuthWellKnownEndpoints;\r\n\r\n      return configuration;\r\n    }\r\n\r\n    return configuration;\r\n  }\r\n\r\n  private prepareConfig(configuration: OpenIdConfiguration): OpenIdConfiguration {\r\n    const openIdConfigurationInternal = { ...DEFAULT_CONFIG, ...configuration };\r\n\r\n    this.setSpecialCases(openIdConfigurationInternal);\r\n\r\n    return openIdConfigurationInternal;\r\n  }\r\n\r\n  private setSpecialCases(currentConfig: OpenIdConfiguration): void {\r\n    if (!this.platformProvider.isBrowser()) {\r\n      currentConfig.startCheckSession = false;\r\n      currentConfig.silentRenew = false;\r\n      currentConfig.useRefreshToken = false;\r\n      currentConfig.usePushedAuthorisationRequests = false;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\nimport { AuthStateService } from '../auth-state/auth-state.service';\r\nimport { ConfigurationService } from '../config/config.service';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { FlowsDataService } from '../flows/flows-data.service';\r\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\r\nimport { RefreshSessionIframeService } from '../iframe/refresh-session-iframe.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { EventTypes } from '../public-events/event-types';\r\nimport { PublicEventsService } from '../public-events/public-events.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { UserService } from '../user-data/user.service';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { IntervalService } from './interval.service';\r\nimport { RefreshSessionRefreshTokenService } from './refresh-session-refresh-token.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PeriodicallyTokenCheckService {\r\n  constructor(\r\n    private readonly resetAuthDataService: ResetAuthDataService,\r\n    private readonly flowHelper: FlowHelper,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly userService: UserService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly refreshSessionIframeService: RefreshSessionIframeService,\r\n    private readonly refreshSessionRefreshTokenService: RefreshSessionRefreshTokenService,\r\n    private intervalService: IntervalService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly publicEventsService: PublicEventsService,\r\n    private readonly configurationService: ConfigurationService\r\n  ) {}\r\n\r\n  startTokenValidationPeriodically(allConfigs: OpenIdConfiguration[], currentConfig: OpenIdConfiguration): void {\r\n    const configsWithSilentRenewEnabled = this.getConfigsWithSilentRenewEnabled(allConfigs);\r\n\r\n    if (configsWithSilentRenewEnabled.length <= 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.intervalService.isTokenValidationRunning()) {\r\n      return;\r\n    }\r\n\r\n    const refreshTimeInSeconds = this.getSmallestRefreshTimeFromConfigs(configsWithSilentRenewEnabled);\r\n    const periodicallyCheck$ = this.intervalService.startPeriodicTokenCheck(refreshTimeInSeconds).pipe(\r\n      switchMap(() => {\r\n        const objectWithConfigIdsAndRefreshEvent = {};\r\n\r\n        configsWithSilentRenewEnabled.forEach((config) => {\r\n          objectWithConfigIdsAndRefreshEvent[config.configId] = this.getRefreshEvent(config, allConfigs);\r\n        });\r\n\r\n        return forkJoin(objectWithConfigIdsAndRefreshEvent);\r\n      })\r\n    );\r\n\r\n    this.intervalService.runTokenValidationRunning = periodicallyCheck$\r\n      .pipe(catchError((error) => throwError(() => new Error(error))))\r\n      .subscribe({\r\n        next: (objectWithConfigIds) => {\r\n          for (const [configId, _] of Object.entries(objectWithConfigIds)) {\r\n            this.configurationService.getOpenIDConfiguration(configId).subscribe((config) => {\r\n              this.loggerService.logDebug(config, 'silent renew, periodic check finished!');\r\n\r\n              if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {\r\n                this.flowsDataService.resetSilentRenewRunning(config);\r\n              }\r\n            });\r\n          }\r\n        },\r\n        error: (error) => {\r\n          this.loggerService.logError(currentConfig, 'silent renew failed!', error);\r\n        },\r\n      });\r\n  }\r\n\r\n  private getRefreshEvent(config: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): Observable<any> {\r\n    const shouldStartRefreshEvent = this.shouldStartPeriodicallyCheckForConfig(config);\r\n\r\n    if (!shouldStartRefreshEvent) {\r\n      return of(null);\r\n    }\r\n\r\n    const refreshEvent$ = this.createRefreshEventForConfig(config, allConfigs);\r\n\r\n    this.publicEventsService.fireEvent(EventTypes.SilentRenewStarted);\r\n\r\n    const refreshEventWithErrorHandler$ = refreshEvent$.pipe(\r\n      catchError((error) => {\r\n        this.loggerService.logError(config, 'silent renew failed!', error);\r\n        this.flowsDataService.resetSilentRenewRunning(config);\r\n\r\n        return throwError(() => new Error(error));\r\n      })\r\n    );\r\n\r\n    return refreshEventWithErrorHandler$;\r\n  }\r\n\r\n  private getSmallestRefreshTimeFromConfigs(configsWithSilentRenewEnabled: OpenIdConfiguration[]): number {\r\n    const result = configsWithSilentRenewEnabled.reduce((prev, curr) =>\r\n      prev.tokenRefreshInSeconds < curr.tokenRefreshInSeconds ? prev : curr\r\n    );\r\n\r\n    return result.tokenRefreshInSeconds;\r\n  }\r\n\r\n  private getConfigsWithSilentRenewEnabled(allConfigs: OpenIdConfiguration[]): OpenIdConfiguration[] {\r\n    return allConfigs.filter((x) => x.silentRenew);\r\n  }\r\n\r\n  private createRefreshEventForConfig(\r\n    configuration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<boolean | CallbackContext> {\r\n    this.loggerService.logDebug(configuration, 'starting silent renew...');\r\n\r\n    return this.configurationService.getOpenIDConfiguration(configuration.configId).pipe(\r\n      switchMap((config) => {\r\n        if (!config?.silentRenew) {\r\n          this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n\r\n          return of(null);\r\n        }\r\n\r\n        this.flowsDataService.setSilentRenewRunning(config);\r\n\r\n        if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {\r\n          // Retrieve Dynamically Set Custom Params for refresh body\r\n          const customParamsRefresh: { [key: string]: string | number | boolean } =\r\n            this.storagePersistenceService.read('storageCustomParamsRefresh', config) || {};\r\n\r\n          const { customParamsRefreshTokenRequest } = config;\r\n\r\n          const mergedParams = { ...customParamsRefreshTokenRequest, ...customParamsRefresh };\r\n\r\n          // Refresh Session using Refresh tokens\r\n          return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(config, allConfigs, mergedParams);\r\n        }\r\n\r\n        // Retrieve Dynamically Set Custom Params\r\n        const customParams: { [key: string]: string | number | boolean } = this.storagePersistenceService.read(\r\n          'storageCustomParamsAuthRequest',\r\n          config\r\n        );\r\n\r\n        return this.refreshSessionIframeService.refreshSessionWithIframe(config, allConfigs, customParams);\r\n      })\r\n    );\r\n  }\r\n\r\n  private shouldStartPeriodicallyCheckForConfig(config: OpenIdConfiguration): boolean {\r\n    const idToken = this.authStateService.getIdToken(config);\r\n    const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning(config);\r\n    const isCodeFlowinProgress = this.flowsDataService.isCodeFlowInProgress(config);\r\n    const userDataFromStore = this.userService.getUserDataFromStore(config);\r\n\r\n    this.loggerService.logDebug(\r\n      config,\r\n      `Checking: silentRenewRunning: ${isSilentRenewRunning}, isCodeFlowInProgress: ${isCodeFlowinProgress} - has idToken: ${!!idToken} - has userData: ${!!userDataFromStore}`\r\n    );\r\n\r\n    const shouldBeExecuted = !!userDataFromStore && !isSilentRenewRunning && !!idToken && !isCodeFlowinProgress;\r\n\r\n    if (!shouldBeExecuted) {\r\n      return false;\r\n    }\r\n\r\n    const idTokenStillValid = this.authStateService.hasIdTokenExpiredAndRenewCheckIsEnabled(config);\r\n    const accessTokenHasExpired = this.authStateService.hasAccessTokenExpiredIfExpiryExists(config);\r\n\r\n    if (!idTokenStillValid && !accessTokenHasExpired) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { PopupOptions } from './popup-options';\r\nimport { PopupResult } from './popup-result';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PopUpService {\r\n  private readonly STORAGE_IDENTIFIER = 'popupauth';\r\n\r\n  private popUp: Window;\r\n\r\n  private handle: number;\r\n\r\n  private readonly resultInternal$ = new Subject<PopupResult>();\r\n\r\n  get result$(): Observable<PopupResult> {\r\n    return this.resultInternal$.asObservable();\r\n  }\r\n\r\n  private get windowInternal(): Window {\r\n    return this.document.defaultView;\r\n  }\r\n\r\n  constructor(@Inject(DOCUMENT) private readonly document: Document) {}\r\n\r\n  isCurrentlyInPopup(): boolean {\r\n    if (this.canAccessSessionStorage()) {\r\n      const popup = sessionStorage.getItem(this.STORAGE_IDENTIFIER);\r\n\r\n      return !!this.windowInternal.opener && this.windowInternal.opener !== this.windowInternal && !!popup;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  openPopUp(url: string, popupOptions?: PopupOptions): void {\r\n    const optionsToPass = this.getOptions(popupOptions);\r\n\r\n    this.popUp = this.windowInternal.open(url, '_blank', optionsToPass);\r\n    this.popUp.sessionStorage.setItem(this.STORAGE_IDENTIFIER, 'true');\r\n\r\n    const listener = (event: MessageEvent): void => {\r\n      if (!event?.data || typeof event.data !== 'string') {\r\n        this.cleanUp(listener);\r\n\r\n        return;\r\n      }\r\n\r\n      this.resultInternal$.next({ userClosed: false, receivedUrl: event.data });\r\n\r\n      this.cleanUp(listener);\r\n    };\r\n\r\n    this.windowInternal.addEventListener('message', listener, false);\r\n\r\n    this.handle = this.windowInternal.setInterval(() => {\r\n      if (this.popUp.closed) {\r\n        this.resultInternal$.next({ userClosed: true });\r\n\r\n        this.cleanUp(listener);\r\n      }\r\n    }, 200);\r\n  }\r\n\r\n  sendMessageToMainWindow(url: string): void {\r\n    if (this.windowInternal.opener) {\r\n      const href = this.windowInternal.location.href;\r\n\r\n      this.sendMessage(url, href);\r\n    }\r\n  }\r\n\r\n  private cleanUp(listener: any): void {\r\n    this.windowInternal.removeEventListener('message', listener, false);\r\n\r\n    this.windowInternal.clearInterval(this.handle);\r\n\r\n    if (this.popUp) {\r\n      this.popUp.sessionStorage?.removeItem(this.STORAGE_IDENTIFIER);\r\n      this.popUp.close();\r\n      this.popUp = null;\r\n    }\r\n  }\r\n\r\n  private sendMessage(url: string, href: string): void {\r\n    this.windowInternal.opener.postMessage(url, href);\r\n  }\r\n\r\n  private getOptions(popupOptions?: PopupOptions): string {\r\n    const popupDefaultOptions: PopupOptions = { width: 500, height: 500, left: 50, top: 50 };\r\n\r\n    const options: PopupOptions = { ...popupDefaultOptions, ...(popupOptions || {}) };\r\n    const left: number = this.windowInternal.screenLeft + (this.windowInternal.outerWidth - options.width) / 2;\r\n    const top: number = this.windowInternal.screenTop + (this.windowInternal.outerHeight - options.height) / 2;\r\n\r\n    options.left = left;\r\n    options.top = top;\r\n\r\n    return Object.entries(options)\r\n      .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\r\n      .join(',');\r\n  }\r\n\r\n  private canAccessSessionStorage(): boolean {\r\n    return typeof navigator !== 'undefined' && navigator.cookieEnabled && typeof Storage !== 'undefined';\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\nimport { OpenIdConfiguration } from './../config/openid-configuration';\n\nconst STORAGE_KEY = 'redirect';\n\n@Injectable()\nexport class AutoLoginService {\n  constructor(private readonly storageService: StoragePersistenceService, private readonly router: Router) {}\n\n  checkSavedRedirectRouteAndNavigate(config: OpenIdConfiguration): void {\n    const savedRouteForRedirect = this.getStoredRedirectRoute(config);\n\n    if (savedRouteForRedirect) {\n      this.deleteStoredRedirectRoute(config);\n      this.router.navigateByUrl(savedRouteForRedirect);\n    }\n  }\n\n  /**\n   * Saves the redirect URL to storage.\n   *\n   * @param url The redirect URL to save.\n   */\n  saveRedirectRoute(config: OpenIdConfiguration, url: string): void {\n    this.storageService.write(STORAGE_KEY, url, config);\n  }\n\n  /**\n   * Gets the stored redirect URL from storage.\n   */\n  private getStoredRedirectRoute(config: OpenIdConfiguration): string {\n    return this.storageService.read(STORAGE_KEY, config);\n  }\n\n  /**\n   * Removes the redirect URL from storage.\n   */\n  private deleteStoredRedirectRoute(config: OpenIdConfiguration): void {\n    this.storageService.remove(STORAGE_KEY, config);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\r\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\r\nimport { AuthStateService } from '../auth-state/auth-state.service';\r\nimport { AutoLoginService } from '../auto-login/auto-login.service';\r\nimport { CallbackService } from '../callback/callback.service';\r\nimport { PeriodicallyTokenCheckService } from '../callback/periodically-token-check.service';\r\nimport { RefreshSessionService } from '../callback/refresh-session.service';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CheckSessionService } from '../iframe/check-session.service';\r\nimport { SilentRenewService } from '../iframe/silent-renew.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { LoginResponse } from '../login/login-response';\r\nimport { PopUpService } from '../login/popup/popup.service';\r\nimport { EventTypes } from '../public-events/event-types';\r\nimport { PublicEventsService } from '../public-events/public-events.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { UserService } from '../user-data/user.service';\r\nimport { CurrentUrlService } from '../utils/url/current-url.service';\r\n\r\n@Injectable()\r\nexport class CheckAuthService {\r\n  constructor(\r\n    private readonly checkSessionService: CheckSessionService,\r\n    private readonly currentUrlService: CurrentUrlService,\r\n    private readonly silentRenewService: SilentRenewService,\r\n    private readonly userService: UserService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly callbackService: CallbackService,\r\n    private readonly refreshSessionService: RefreshSessionService,\r\n    private readonly periodicallyTokenCheckService: PeriodicallyTokenCheckService,\r\n    private readonly popupService: PopUpService,\r\n    private readonly autoLoginService: AutoLoginService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly publicEventsService: PublicEventsService\r\n  ) {}\r\n\r\n  checkAuth(configuration: OpenIdConfiguration, allConfigs: OpenIdConfiguration[], url?: string): Observable<LoginResponse> {\r\n    this.publicEventsService.fireEvent(EventTypes.CheckingAuth);\r\n\r\n    if (this.currentUrlService.currentUrlHasStateParam()) {\r\n      const stateParamFromUrl = this.currentUrlService.getStateParamFromCurrentUrl();\r\n\r\n      configuration = this.getConfigurationWithUrlState([configuration], stateParamFromUrl);\r\n\r\n      if (!configuration) {\r\n        return throwError(() => new Error(`could not find matching config for state ${stateParamFromUrl}`));\r\n      }\r\n    }\r\n\r\n    return this.checkAuthWithConfig(configuration, allConfigs, url);\r\n  }\r\n\r\n  checkAuthMultiple(allConfigs: OpenIdConfiguration[], url?: string): Observable<LoginResponse[]> {\r\n    if (this.currentUrlService.currentUrlHasStateParam()) {\r\n      const stateParamFromUrl = this.currentUrlService.getStateParamFromCurrentUrl();\r\n      const config = this.getConfigurationWithUrlState(allConfigs, stateParamFromUrl);\r\n\r\n      if (!config) {\r\n        return throwError(() => new Error(`could not find matching config for state ${stateParamFromUrl}`));\r\n      }\r\n\r\n      return this.composeMultipleLoginResults(allConfigs, config, url);\r\n    }\r\n\r\n    const configs = allConfigs;\r\n    const allChecks$ = configs.map((x) => this.checkAuthWithConfig(x, configs, url));\r\n\r\n    return forkJoin(allChecks$);\r\n  }\r\n\r\n  checkAuthIncludingServer(configuration: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): Observable<LoginResponse> {\r\n    return this.checkAuthWithConfig(configuration, allConfigs).pipe(\r\n      switchMap((loginResponse) => {\r\n        const { isAuthenticated } = loginResponse;\r\n\r\n        if (isAuthenticated) {\r\n          return of(loginResponse);\r\n        }\r\n\r\n        return this.refreshSessionService.forceRefreshSession(configuration, allConfigs).pipe(\r\n          tap((loginResponseAfterRefreshSession) => {\r\n            if (loginResponseAfterRefreshSession?.isAuthenticated) {\r\n              this.startCheckSessionAndValidation(configuration, allConfigs);\r\n            }\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  private checkAuthWithConfig(config: OpenIdConfiguration, allConfigs: OpenIdConfiguration[], url?: string): Observable<LoginResponse> {\r\n    if (!config) {\r\n      const errorMessage = 'Please provide at least one configuration before setting up the module';\r\n\r\n      this.loggerService.logError(config, errorMessage);\r\n\r\n      return of({ isAuthenticated: false, errorMessage, userData: null, idToken: null, accessToken: null, configId: null });\r\n    }\r\n\r\n    const currentUrl = url || this.currentUrlService.getCurrentUrl();\r\n    const { configId, authority } = config;\r\n\r\n    this.loggerService.logDebug(config, `Working with config '${configId}' using ${authority}`);\r\n\r\n    if (this.popupService.isCurrentlyInPopup()) {\r\n      this.popupService.sendMessageToMainWindow(currentUrl);\r\n\r\n      return of(null);\r\n    }\r\n\r\n    const isCallback = this.callbackService.isCallback(currentUrl);\r\n\r\n    this.loggerService.logDebug(config, 'currentUrl to check auth with: ', currentUrl);\r\n\r\n    const callback$ = isCallback ? this.callbackService.handleCallbackAndFireEvents(currentUrl, config, allConfigs) : of(null);\r\n\r\n    return callback$.pipe(\r\n      map(() => {\r\n        const isAuthenticated = this.authStateService.areAuthStorageTokensValid(config);\r\n\r\n        if (isAuthenticated) {\r\n          this.startCheckSessionAndValidation(config, allConfigs);\r\n\r\n          if (!isCallback) {\r\n            this.authStateService.setAuthenticatedAndFireEvent(allConfigs);\r\n            this.userService.publishUserDataIfExists(config, allConfigs);\r\n          }\r\n        }\r\n\r\n        this.loggerService.logDebug(config, 'checkAuth completed - firing events now. isAuthenticated: ' + isAuthenticated);\r\n\r\n        return {\r\n          isAuthenticated,\r\n          userData: this.userService.getUserDataFromStore(config),\r\n          accessToken: this.authStateService.getAccessToken(config),\r\n          idToken: this.authStateService.getIdToken(config),\r\n          configId,\r\n        };\r\n      }),\r\n      tap(({ isAuthenticated }) => {\r\n        this.publicEventsService.fireEvent(EventTypes.CheckingAuthFinished);\r\n\r\n        if (isAuthenticated) {\r\n          this.autoLoginService.checkSavedRedirectRouteAndNavigate(config);\r\n        }\r\n      }),\r\n      catchError(({ message }) => {\r\n        this.loggerService.logError(config, message);\r\n        this.publicEventsService.fireEvent(EventTypes.CheckingAuthFinishedWithError, message);\r\n\r\n        return of({ isAuthenticated: false, errorMessage: message, userData: null, idToken: null, accessToken: null, configId });\r\n      })\r\n    );\r\n  }\r\n\r\n  private startCheckSessionAndValidation(config: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): void {\r\n    if (this.checkSessionService.isCheckSessionConfigured(config)) {\r\n      this.checkSessionService.start(config);\r\n    }\r\n\r\n    this.periodicallyTokenCheckService.startTokenValidationPeriodically(allConfigs, config);\r\n\r\n    if (this.silentRenewService.isSilentRenewConfigured(config)) {\r\n      this.silentRenewService.getOrCreateIframe(config);\r\n    }\r\n  }\r\n\r\n  private getConfigurationWithUrlState(configurations: OpenIdConfiguration[], stateFromUrl: string): OpenIdConfiguration {\r\n    for (const config of configurations) {\r\n      const storedState = this.storagePersistenceService.read('authStateControl', config);\r\n\r\n      if (storedState === stateFromUrl) {\r\n        return config;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private composeMultipleLoginResults(\r\n    configurations: OpenIdConfiguration[],\r\n    activeConfig: OpenIdConfiguration,\r\n    url?: string\r\n  ): Observable<LoginResponse[]> {\r\n    const allOtherConfigs = configurations.filter((x) => x.configId !== activeConfig.configId);\r\n\r\n    const currentConfigResult = this.checkAuthWithConfig(activeConfig, configurations, url);\r\n\r\n    const allOtherConfigResults = allOtherConfigs.map((config) => {\r\n      const { redirectUrl } = config;\r\n\r\n      return this.checkAuthWithConfig(config, configurations, redirectUrl);\r\n    });\r\n\r\n    return forkJoin([currentConfigResult, ...allOtherConfigResults]);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { OpenIdConfiguration } from '../config/openid-configuration';\n\n@Injectable()\nexport class ClosestMatchingRouteService {\n  getConfigIdForClosestMatchingRoute(route: string, configurations: OpenIdConfiguration[]): ClosestMatchingRouteResult {\n    for (const config of configurations) {\n      const { secureRoutes } = config;\n\n      for (const configuredRoute of secureRoutes) {\n        if (route.startsWith(configuredRoute)) {\n          return {\n            matchingRoute: configuredRoute,\n            matchingConfig: config,\n          };\n        }\n      }\n    }\n\n    return {\n      matchingRoute: null,\n      matchingConfig: null,\n    };\n  }\n}\n\nexport interface ClosestMatchingRouteResult {\n  matchingRoute: string;\n  matchingConfig: OpenIdConfiguration;\n}\n","import { Injectable } from '@angular/core';\r\nimport { AbstractLoggerService } from './abstract-logger.service';\r\n\r\n@Injectable()\r\nexport class ConsoleLoggerService implements AbstractLoggerService {\r\n  logError(message?: any, ...args: any[]): void {\r\n    console.error(message, ...args);\r\n  }\r\n\r\n  logWarning(message?: any, ...args: any[]): void {\r\n    console.warn(message, ...args);\r\n  }\r\n\r\n  logDebug(message?: any, ...args: any[]): void {\r\n    console.debug(message, ...args);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { FlowHelper } from '../../utils/flowHelper/flow-helper.service';\r\n\r\n@Injectable()\r\nexport class ResponseTypeValidationService {\r\n  constructor(private readonly loggerService: LoggerService, private readonly flowHelper: FlowHelper) {}\r\n\r\n  hasConfigValidResponseType(configuration: OpenIdConfiguration): boolean {\r\n    if (this.flowHelper.isCurrentFlowAnyImplicitFlow(configuration)) {\r\n      return true;\r\n    }\r\n\r\n    if (this.flowHelper.isCurrentFlowCodeFlow(configuration)) {\r\n      return true;\r\n    }\r\n\r\n    this.loggerService.logWarning(\r\n      configuration,\r\n      'module configured incorrectly, invalid response_type. Check the responseType in the config'\r\n    );\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class RedirectService {\n  constructor(@Inject(DOCUMENT) private readonly doc: any) {}\n\n  redirectTo(url): void {\n    this.doc.location.href = url;\n  }\n}\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map, retry, switchMap } from 'rxjs/operators';\r\nimport { DataService } from '../../api/data.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\r\nimport { UrlService } from '../../utils/url/url.service';\r\nimport { ParResponse } from './par-response';\r\n\r\n@Injectable()\r\nexport class ParService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly urlService: UrlService,\r\n    private readonly dataService: DataService,\r\n    private readonly storagePersistenceService: StoragePersistenceService\r\n  ) {}\r\n\r\n  postParRequest(configuration: OpenIdConfiguration, customParams?: { [key: string]: string | number | boolean }): Observable<ParResponse> {\r\n    let headers: HttpHeaders = new HttpHeaders();\r\n\r\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n    const authWellKnownEndpoints = this.storagePersistenceService.read('authWellKnownEndPoints', configuration);\r\n\r\n    if (!authWellKnownEndpoints) {\r\n      return throwError(() => new Error('Could not read PAR endpoint because authWellKnownEndPoints are not given'));\r\n    }\r\n\r\n    const parEndpoint = authWellKnownEndpoints.parEndpoint;\r\n\r\n    if (!parEndpoint) {\r\n      return throwError(() => new Error('Could not read PAR endpoint from authWellKnownEndpoints'));\r\n    }\r\n\r\n    return this.urlService.createBodyForParCodeFlowRequest(configuration, customParams).pipe(\r\n      switchMap((data) => {\r\n        return this.dataService.post(parEndpoint, data, configuration, headers).pipe(\r\n          retry(2),\r\n          map((response: any) => {\r\n            this.loggerService.logDebug(configuration, 'par response: ', response);\r\n\r\n            return {\r\n              expiresIn: response.expires_in,\r\n              requestUri: response.request_uri,\r\n            };\r\n          }),\r\n          catchError((error) => {\r\n            const errorMessage = `There was an error on ParService postParRequest`;\r\n\r\n            this.loggerService.logError(configuration, errorMessage, error);\r\n\r\n            return throwError(() => new Error(errorMessage));\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { switchMap, take } from 'rxjs/operators';\r\nimport { AuthOptions } from '../../auth-options';\r\nimport { CheckAuthService } from '../../auth-state/check-auth.service';\r\nimport { AuthWellKnownService } from '../../config/auth-well-known/auth-well-known.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { RedirectService } from '../../utils/redirect/redirect.service';\r\nimport { UrlService } from '../../utils/url/url.service';\r\nimport { LoginResponse } from '../login-response';\r\nimport { PopupOptions } from '../popup/popup-options';\r\nimport { PopupResultReceivedUrl } from '../popup/popup-result';\r\nimport { PopUpService } from '../popup/popup.service';\r\nimport { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';\r\nimport { ParResponse } from './par-response';\r\nimport { ParService } from './par.service';\r\n\r\n@Injectable()\r\nexport class ParLoginService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly responseTypeValidationService: ResponseTypeValidationService,\r\n    private readonly urlService: UrlService,\r\n    private readonly redirectService: RedirectService,\r\n    private readonly authWellKnownService: AuthWellKnownService,\r\n    private readonly popupService: PopUpService,\r\n    private readonly checkAuthService: CheckAuthService,\r\n    private readonly parService: ParService\r\n  ) {}\r\n\r\n  loginPar(configuration: OpenIdConfiguration, authOptions?: AuthOptions): void {\r\n    if (!this.responseTypeValidationService.hasConfigValidResponseType(configuration)) {\r\n      this.loggerService.logError(configuration, 'Invalid response type!');\r\n\r\n      return;\r\n    }\r\n\r\n    this.loggerService.logDebug(configuration, 'BEGIN Authorize OIDC Flow, no auth data');\r\n\r\n    const { urlHandler, customParams } = authOptions || {};\r\n\r\n    this.authWellKnownService\r\n      .queryAndStoreAuthWellKnownEndPoints(configuration)\r\n      .pipe(switchMap(() => this.parService.postParRequest(configuration, customParams)))\r\n      .subscribe((response) => {\r\n        this.loggerService.logDebug(configuration, 'par response: ', response);\r\n\r\n        const url = this.urlService.getAuthorizeParUrl(response.requestUri, configuration);\r\n\r\n        this.loggerService.logDebug(configuration, 'par request url: ', url);\r\n\r\n        if (!url) {\r\n          this.loggerService.logError(configuration, `Could not create URL with param ${response.requestUri}: '${url}'`);\r\n\r\n          return;\r\n        }\r\n\r\n        if (urlHandler) {\r\n          urlHandler(url);\r\n        } else {\r\n          this.redirectService.redirectTo(url);\r\n        }\r\n      });\r\n  }\r\n\r\n  loginWithPopUpPar(\r\n    configuration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    authOptions?: AuthOptions,\r\n    popupOptions?: PopupOptions\r\n  ): Observable<LoginResponse> {\r\n    const { configId } = configuration;\r\n\r\n    if (!this.responseTypeValidationService.hasConfigValidResponseType(configuration)) {\r\n      const errorMessage = 'Invalid response type!';\r\n\r\n      this.loggerService.logError(configuration, errorMessage);\r\n\r\n      return throwError(() => new Error(errorMessage));\r\n    }\r\n\r\n    this.loggerService.logDebug(configuration, 'BEGIN Authorize OIDC Flow with popup, no auth data');\r\n\r\n    const { customParams } = authOptions || {};\r\n\r\n    return this.authWellKnownService.queryAndStoreAuthWellKnownEndPoints(configuration).pipe(\r\n      switchMap(() => this.parService.postParRequest(configuration, customParams)),\r\n      switchMap((response: ParResponse) => {\r\n        this.loggerService.logDebug(configuration, 'par response: ', response);\r\n\r\n        const url = this.urlService.getAuthorizeParUrl(response.requestUri, configuration);\r\n\r\n        this.loggerService.logDebug(configuration, 'par request url: ', url);\r\n\r\n        if (!url) {\r\n          const errorMessage = `Could not create URL with param ${response.requestUri}: 'url'`;\r\n\r\n          this.loggerService.logError(configuration, errorMessage);\r\n\r\n          return throwError(() => new Error(errorMessage));\r\n        }\r\n\r\n        this.popupService.openPopUp(url, popupOptions);\r\n\r\n        return this.popupService.result$.pipe(\r\n          take(1),\r\n          switchMap((result: PopupResultReceivedUrl) => {\r\n            const { userClosed, receivedUrl } = result;\r\n\r\n            if (userClosed) {\r\n              return of({\r\n                isAuthenticated: false,\r\n                errorMessage: 'User closed popup',\r\n                userData: null,\r\n                idToken: null,\r\n                accessToken: null,\r\n                configId,\r\n              });\r\n            }\r\n\r\n            return this.checkAuthService.checkAuth(configuration, allConfigs, receivedUrl);\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { switchMap, take, tap } from 'rxjs/operators';\r\nimport { AuthOptions } from '../../auth-options';\r\nimport { CheckAuthService } from '../../auth-state/check-auth.service';\r\nimport { AuthWellKnownService } from '../../config/auth-well-known/auth-well-known.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { UrlService } from '../../utils/url/url.service';\r\nimport { LoginResponse } from '../login-response';\r\nimport { PopupOptions } from '../popup/popup-options';\r\nimport { PopUpService } from '../popup/popup.service';\r\nimport { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';\r\nimport { PopupResultReceivedUrl } from './popup-result';\r\n\r\n@Injectable()\r\nexport class PopUpLoginService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly responseTypeValidationService: ResponseTypeValidationService,\r\n    private readonly urlService: UrlService,\r\n    private readonly authWellKnownService: AuthWellKnownService,\r\n    private readonly popupService: PopUpService,\r\n    private readonly checkAuthService: CheckAuthService\r\n  ) {}\r\n\r\n  loginWithPopUpStandard(\r\n    configuration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    authOptions?: AuthOptions,\r\n    popupOptions?: PopupOptions\r\n  ): Observable<LoginResponse> {\r\n    const { configId } = configuration;\r\n\r\n    if (!this.responseTypeValidationService.hasConfigValidResponseType(configuration)) {\r\n      const errorMessage = 'Invalid response type!';\r\n\r\n      this.loggerService.logError(configuration, errorMessage);\r\n\r\n      return throwError(() => new Error(errorMessage));\r\n    }\r\n\r\n    this.loggerService.logDebug(configuration, 'BEGIN Authorize OIDC Flow with popup, no auth data');\r\n\r\n    return this.authWellKnownService.queryAndStoreAuthWellKnownEndPoints(configuration).pipe(\r\n      switchMap(() => {\r\n        return this.urlService.getAuthorizeUrl(configuration, authOptions);\r\n      }),\r\n      tap((authUrl: string) => this.popupService.openPopUp(authUrl, popupOptions)),\r\n      switchMap(() => {\r\n        return this.popupService.result$.pipe(\r\n          take(1),\r\n          switchMap((result: PopupResultReceivedUrl) => {\r\n            const { userClosed, receivedUrl } = result;\r\n\r\n            if (userClosed) {\r\n              return of({\r\n                isAuthenticated: false,\r\n                errorMessage: 'User closed popup',\r\n                userData: null,\r\n                idToken: null,\r\n                accessToken: null,\r\n                configId,\r\n              });\r\n            }\r\n\r\n            return this.checkAuthService.checkAuth(configuration, allConfigs, receivedUrl);\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthOptions } from '../../auth-options';\r\nimport { AuthWellKnownService } from '../../config/auth-well-known/auth-well-known.service';\r\nimport { FlowsDataService } from '../../flows/flows-data.service';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { RedirectService } from '../../utils/redirect/redirect.service';\r\nimport { UrlService } from '../../utils/url/url.service';\r\nimport { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';\r\nimport { OpenIdConfiguration } from './../../config/openid-configuration';\r\n\r\n@Injectable()\r\nexport class StandardLoginService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly responseTypeValidationService: ResponseTypeValidationService,\r\n    private readonly urlService: UrlService,\r\n    private readonly redirectService: RedirectService,\r\n    private readonly authWellKnownService: AuthWellKnownService,\r\n    private readonly flowsDataService: FlowsDataService\r\n  ) {}\r\n\r\n  loginStandard(configuration: OpenIdConfiguration, authOptions?: AuthOptions): void {\r\n    if (!this.responseTypeValidationService.hasConfigValidResponseType(configuration)) {\r\n      this.loggerService.logError(configuration, 'Invalid response type!');\r\n\r\n      return;\r\n    }\r\n\r\n    this.loggerService.logDebug(configuration, 'BEGIN Authorize OIDC Flow, no auth data');\r\n    this.flowsDataService.setCodeFlowInProgress(configuration);\r\n\r\n    this.authWellKnownService.queryAndStoreAuthWellKnownEndPoints(configuration).subscribe(() => {\r\n      const { urlHandler } = authOptions || {};\r\n\r\n      this.flowsDataService.resetSilentRenewRunning(configuration);\r\n\r\n      this.urlService.getAuthorizeUrl(configuration, authOptions).subscribe((url: string) => {\r\n        if (!url) {\r\n          this.loggerService.logError(configuration, 'Could not create URL', url);\r\n\r\n          return;\r\n        }\r\n\r\n        if (urlHandler) {\r\n          urlHandler(url);\r\n        } else {\r\n          this.redirectService.redirectTo(url);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthOptions } from '../auth-options';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { LoginResponse } from './login-response';\r\nimport { ParLoginService } from './par/par-login.service';\r\nimport { PopUpLoginService } from './popup/popup-login.service';\r\nimport { PopupOptions } from './popup/popup-options';\r\nimport { StandardLoginService } from './standard/standard-login.service';\r\n\r\n@Injectable()\r\nexport class LoginService {\r\n  constructor(\r\n    private readonly parLoginService: ParLoginService,\r\n    private readonly popUpLoginService: PopUpLoginService,\r\n    private readonly standardLoginService: StandardLoginService,\r\n    private readonly storagePersistenceService: StoragePersistenceService\r\n  ) {}\r\n\r\n  login(configuration: OpenIdConfiguration, authOptions?: AuthOptions): void {\r\n    const { usePushedAuthorisationRequests } = configuration;\r\n\r\n    if (authOptions?.customParams) {\r\n      this.storagePersistenceService.write('storageCustomParamsAuthRequest', authOptions.customParams, configuration);\r\n    }\r\n\r\n    if (usePushedAuthorisationRequests) {\r\n      return this.parLoginService.loginPar(configuration, authOptions);\r\n    } else {\r\n      return this.standardLoginService.loginStandard(configuration, authOptions);\r\n    }\r\n  }\r\n\r\n  loginWithPopUp(\r\n    configuration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    authOptions?: AuthOptions,\r\n    popupOptions?: PopupOptions\r\n  ): Observable<LoginResponse> {\r\n    const { usePushedAuthorisationRequests } = configuration;\r\n\r\n    if (authOptions?.customParams) {\r\n      this.storagePersistenceService.write('storageCustomParamsAuthRequest', authOptions.customParams, configuration);\r\n    }\r\n\r\n    if (usePushedAuthorisationRequests) {\r\n      return this.parLoginService.loginWithPopUpPar(configuration, allConfigs, authOptions, popupOptions);\r\n    } else {\r\n      return this.popUpLoginService.loginWithPopUpStandard(configuration, allConfigs, authOptions, popupOptions);\r\n    }\r\n  }\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, retry, switchMap, tap } from 'rxjs/operators';\r\nimport { DataService } from '../api/data.service';\r\nimport { AuthOptions } from '../auth-options';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\r\nimport { CheckSessionService } from '../iframe/check-session.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { RedirectService } from '../utils/redirect/redirect.service';\r\nimport { UrlService } from '../utils/url/url.service';\r\n\r\n@Injectable()\r\nexport class LogoffRevocationService {\r\n  constructor(\r\n    private readonly dataService: DataService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly urlService: UrlService,\r\n    private readonly checkSessionService: CheckSessionService,\r\n    private readonly resetAuthDataService: ResetAuthDataService,\r\n    private readonly redirectService: RedirectService\r\n  ) {}\r\n\r\n  // Logs out on the server and the local client.\r\n  // If the server state has changed, check session, then only a local logout.\r\n  logoff(config: OpenIdConfiguration, allConfigs: OpenIdConfiguration[], authOptions?: AuthOptions): void {\r\n    const { urlHandler, customParams } = authOptions || {};\r\n\r\n    this.loggerService.logDebug(config, 'logoff, remove auth ');\r\n\r\n    const endSessionUrl = this.getEndSessionUrl(config, customParams);\r\n\r\n    this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n\r\n    if (!endSessionUrl) {\r\n      this.loggerService.logDebug(config, 'only local login cleaned up, no end_session_endpoint');\r\n\r\n      return;\r\n    }\r\n\r\n    if (this.checkSessionService.serverStateChanged(config)) {\r\n      this.loggerService.logDebug(config, 'only local login cleaned up, server session has changed');\r\n    } else if (urlHandler) {\r\n      urlHandler(endSessionUrl);\r\n    } else {\r\n      this.redirectService.redirectTo(endSessionUrl);\r\n    }\r\n  }\r\n\r\n  logoffLocal(config: OpenIdConfiguration, allConfigs: OpenIdConfiguration[]): void {\r\n    this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n    this.checkSessionService.stop();\r\n  }\r\n\r\n  logoffLocalMultiple(allConfigs: OpenIdConfiguration[]): void {\r\n    allConfigs.forEach((configuration) => this.logoffLocal(configuration, allConfigs));\r\n  }\r\n\r\n  // The refresh token and and the access token are revoked on the server. If the refresh token does not exist\r\n  // only the access token is revoked. Then the logout run.\r\n  logoffAndRevokeTokens(config: OpenIdConfiguration, allConfigs: OpenIdConfiguration[], authOptions?: AuthOptions): Observable<any> {\r\n    const { revocationEndpoint } = this.storagePersistenceService.read('authWellKnownEndPoints', config) || {};\r\n\r\n    if (!revocationEndpoint) {\r\n      this.loggerService.logDebug(config, 'revocation endpoint not supported');\r\n      this.logoff(config, allConfigs, authOptions);\r\n\r\n      return of(null);\r\n    }\r\n\r\n    if (this.storagePersistenceService.getRefreshToken(config)) {\r\n      return this.revokeRefreshToken(config).pipe(\r\n        switchMap((result) => this.revokeAccessToken(config, result)),\r\n        catchError((error) => {\r\n          const errorMessage = `revoke token failed`;\r\n\r\n          this.loggerService.logError(config, errorMessage, error);\r\n\r\n          return throwError(() => new Error(errorMessage));\r\n        }),\r\n        tap(() => this.logoff(config, allConfigs, authOptions))\r\n      );\r\n    } else {\r\n      return this.revokeAccessToken(config).pipe(\r\n        catchError((error) => {\r\n          const errorMessage = `revoke accessToken failed`;\r\n\r\n          this.loggerService.logError(config, errorMessage, error);\r\n\r\n          return throwError(() => new Error(errorMessage));\r\n        }),\r\n        tap(() => this.logoff(config, allConfigs, authOptions))\r\n      );\r\n    }\r\n  }\r\n\r\n  // https://tools.ietf.org/html/rfc7009\r\n  // revokes an access token on the STS. If no token is provided, then the token from\r\n  // the storage is revoked. You can pass any token to revoke. This makes it possible to\r\n  // manage your own tokens. The is a public API.\r\n  revokeAccessToken(configuration: OpenIdConfiguration, accessToken?: any): Observable<any> {\r\n    const accessTok = accessToken || this.storagePersistenceService.getAccessToken(configuration);\r\n    const body = this.urlService.createRevocationEndpointBodyAccessToken(accessTok, configuration);\r\n\r\n    return this.sendRevokeRequest(configuration, body);\r\n  }\r\n\r\n  // https://tools.ietf.org/html/rfc7009\r\n  // revokes an refresh token on the STS. This is only required in the code flow with refresh tokens.\r\n  // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\r\n  // This makes it possible to manage your own tokens.\r\n  revokeRefreshToken(configuration: OpenIdConfiguration, refreshToken?: any): Observable<any> {\r\n    const refreshTok = refreshToken || this.storagePersistenceService.getRefreshToken(configuration);\r\n    const body = this.urlService.createRevocationEndpointBodyRefreshToken(refreshTok, configuration);\r\n\r\n    return this.sendRevokeRequest(configuration, body);\r\n  }\r\n\r\n  getEndSessionUrl(configuration: OpenIdConfiguration, customParams?: { [p: string]: string | number | boolean }): string | null {\r\n    const idToken = this.storagePersistenceService.getIdToken(configuration);\r\n    const { customParamsEndSessionRequest } = configuration;\r\n\r\n    const mergedParams = { ...customParamsEndSessionRequest, ...customParams };\r\n\r\n    return this.urlService.createEndSessionUrl(idToken, configuration, mergedParams);\r\n  }\r\n\r\n  private sendRevokeRequest(configuration: OpenIdConfiguration, body: string): Observable<any> {\r\n    const url = this.urlService.getRevocationEndpointUrl(configuration);\r\n\r\n    let headers: HttpHeaders = new HttpHeaders();\r\n\r\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n    return this.dataService.post(url, body, configuration, headers).pipe(\r\n      retry(2),\r\n      switchMap((response: any) => {\r\n        this.loggerService.logDebug(configuration, 'revocation endpoint post response: ', response);\r\n\r\n        return of(response);\r\n      }),\r\n      catchError((error) => {\r\n        const errorMessage = `Revocation request failed`;\r\n\r\n        this.loggerService.logError(configuration, errorMessage, error);\r\n\r\n        return throwError(() => new Error(errorMessage));\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\r\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\r\nimport { AuthOptions } from './auth-options';\r\nimport { AuthenticatedResult } from './auth-state/auth-result';\r\nimport { AuthStateService } from './auth-state/auth-state.service';\r\nimport { CheckAuthService } from './auth-state/check-auth.service';\r\nimport { CallbackService } from './callback/callback.service';\r\nimport { RefreshSessionService } from './callback/refresh-session.service';\r\nimport { AuthWellKnownEndpoints } from './config/auth-well-known/auth-well-known-endpoints';\r\nimport { AuthWellKnownService } from './config/auth-well-known/auth-well-known.service';\r\nimport { ConfigurationService } from './config/config.service';\r\nimport { OpenIdConfiguration } from './config/openid-configuration';\r\nimport { FlowsDataService } from './flows/flows-data.service';\r\nimport { CheckSessionService } from './iframe/check-session.service';\r\nimport { LoginResponse } from './login/login-response';\r\nimport { LoginService } from './login/login.service';\r\nimport { PopupOptions } from './login/popup/popup-options';\r\nimport { LogoffRevocationService } from './logoff-revoke/logoff-revocation.service';\r\nimport { UserService } from './user-data/user.service';\r\nimport { UserDataResult } from './user-data/userdata-result';\r\nimport { TokenHelperService } from './utils/tokenHelper/token-helper.service';\r\nimport { UrlService } from './utils/url/url.service';\r\n\r\n@Injectable()\r\nexport class OidcSecurityService {\r\n  /**\r\n   * Provides information about the user after they have logged in.\r\n   *\r\n   * @returns Returns an object containing either the user data directly (single config) or\r\n   * the user data per config in case you are running with multiple configs\r\n   */\r\n  get userData$(): Observable<UserDataResult> {\r\n    return this.userService.userData$;\r\n  }\r\n\r\n  /**\r\n   * Emits each time an authorization event occurs.\r\n   *\r\n   * @returns Returns an object containing if you are authenticated or not.\r\n   * Single Config: true if config is authenticated, false if not.\r\n   * Multiple Configs: true is all configs are authenticated, false if only one of them is not\r\n   *\r\n   * The `allConfigsAuthenticated` property contains the auth information _per config_.\r\n   */\r\n  get isAuthenticated$(): Observable<AuthenticatedResult> {\r\n    return this.authStateService.authenticated$;\r\n  }\r\n\r\n  /**\r\n   * Emits each time the server sends a CheckSession event and the value changed. This property will always return\r\n   * true.\r\n   */\r\n  get checkSessionChanged$(): Observable<boolean> {\r\n    return this.checkSessionService.checkSessionChanged$;\r\n  }\r\n\r\n  /**\r\n   * Emits on a Security Token Service callback. The observable will never contain a value.\r\n   */\r\n  get stsCallback$(): Observable<any> {\r\n    return this.callbackService.stsCallback$;\r\n  }\r\n\r\n  /**\r\n   * @deprecated This property should not be used. Please use the `PublicEventsService` instead. This property is removed in future versions\r\n   * Emits false when the observable, returned by one of the checkAuth() methods, emits a value, or errors. Initial value: true.\r\n   */\r\n  get isLoading$(): Observable<boolean> {\r\n    return this.isLoading.asObservable();\r\n  }\r\n\r\n  private readonly isLoading: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n\r\n  constructor(\r\n    private readonly checkSessionService: CheckSessionService,\r\n    private readonly checkAuthService: CheckAuthService,\r\n    private readonly userService: UserService,\r\n    private readonly tokenHelperService: TokenHelperService,\r\n    private readonly configurationService: ConfigurationService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly callbackService: CallbackService,\r\n    private readonly logoffRevocationService: LogoffRevocationService,\r\n    private readonly loginService: LoginService,\r\n    private readonly refreshSessionService: RefreshSessionService,\r\n    private readonly urlService: UrlService,\r\n    private readonly authWellKnownService: AuthWellKnownService\r\n  ) {}\r\n\r\n  preloadAuthWellKnownDocument(configId?: string): Observable<AuthWellKnownEndpoints> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(switchMap((config) => this.authWellKnownService.queryAndStoreAuthWellKnownEndPoints(config)));\r\n  }\r\n\r\n  /**\r\n   * Returns the currently active OpenID configurations.\r\n   *\r\n   * @returns an array of OpenIdConfigurations.\r\n   */\r\n  getConfigurations(): OpenIdConfiguration[] {\r\n    return this.configurationService.getAllConfigurations();\r\n  }\r\n\r\n  /**\r\n   * Returns a single active OpenIdConfiguration.\r\n   *\r\n   * @param configId The configId to identify the config. If not passed, the first one is being returned\r\n   */\r\n  getConfiguration(configId?: string): Observable<OpenIdConfiguration> {\r\n    return this.configurationService.getOpenIDConfiguration(configId);\r\n  }\r\n\r\n  /**\r\n   * Returns the userData for a configuration\r\n   *\r\n   * @param configId The configId to identify the config. If not passed, the first one is being used\r\n   */\r\n  getUserData(configId?: string): Observable<any> {\r\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(map((config) => this.userService.getUserDataFromStore(config)));\r\n  }\r\n\r\n  /**\r\n   * Starts the complete setup flow for one configuration. Calling will start the entire authentication flow, and the returned observable\r\n   * will denote whether the user was successfully authenticated including the user data, the access token, the configId and\r\n   * an error message in case an error happened\r\n   *\r\n   * @param url The URL to perform the authorization on the behalf of.\r\n   * @param configId The configId to perform the authorization on the behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns An object `LoginResponse` containing all information about the login\r\n   */\r\n  checkAuth(url?: string, configId?: string): Observable<LoginResponse> {\r\n    return this.configurationService.getOpenIDConfigurations(configId).pipe(\r\n      switchMap(({ allConfigs, currentConfig }) => this.checkAuthService.checkAuth(currentConfig, allConfigs, url)),\r\n      tap(this.finishLoading),\r\n      catchError(this.finishLoadingOnError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Starts the complete setup flow for multiple configurations.\r\n   * Calling will start the entire authentication flow, and the returned observable\r\n   * will denote whether the user was successfully authenticated including the user data, the access token, the configId and\r\n   * an error message in case an error happened in an array for each config which was provided\r\n   *\r\n   * @param url The URL to perform the authorization on the behalf of.\r\n   * @param configId The configId to perform the authorization on the behalf of. If not passed, all of the current\r\n   * configured ones will be used to check.\r\n   *\r\n   * @returns An array of `LoginResponse` objects containing all information about the logins\r\n   */\r\n  checkAuthMultiple(url?: string): Observable<LoginResponse[]> {\r\n    return this.configurationService.getOpenIDConfigurations().pipe(\r\n      switchMap(({ allConfigs }) => this.checkAuthService.checkAuthMultiple(allConfigs, url)),\r\n      tap(this.finishLoading),\r\n      catchError(this.finishLoadingOnError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Provides information about the current authenticated state\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A boolean whether the config is authenticated or not.\r\n   */\r\n  isAuthenticated(configId?: string): Observable<boolean> {\r\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(map((config) => this.authStateService.isAuthenticated(config)));\r\n  }\r\n\r\n  /**\r\n   * Checks the server for an authenticated session using the iframe silent renew if not locally authenticated.\r\n   */\r\n  checkAuthIncludingServer(configId?: string): Observable<LoginResponse> {\r\n    return this.configurationService.getOpenIDConfigurations(configId).pipe(\r\n      switchMap(({ allConfigs, currentConfig }) => this.checkAuthService.checkAuthIncludingServer(currentConfig, allConfigs)),\r\n      tap(this.finishLoading),\r\n      catchError(this.finishLoadingOnError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the access token for the login scenario.\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A string with the access token.\r\n   */\r\n  getAccessToken(configId?: string): Observable<string> {\r\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(map((config) => this.authStateService.getAccessToken(config)));\r\n  }\r\n\r\n  /**\r\n   * Returns the ID token for the sign-in.\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A string with the id token.\r\n   */\r\n  getIdToken(configId?: string): Observable<string> {\r\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(map((config) => this.authStateService.getIdToken(config)));\r\n  }\r\n\r\n  /**\r\n   * Returns the refresh token, if present, for the sign-in.\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A string with the refresh token.\r\n   */\r\n  getRefreshToken(configId?: string): Observable<string> {\r\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(map((config) => this.authStateService.getRefreshToken(config)));\r\n  }\r\n\r\n  /**\r\n   * Returns the authentication result, if present, for the sign-in.\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A object with the authentication result\r\n   */\r\n  getAuthenticationResult(configId?: string): Observable<any> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(map((config) => this.authStateService.getAuthenticationResult(config)));\r\n  }\r\n\r\n  /**\r\n   * Returns the payload from the ID token.\r\n   *\r\n   * @param encode Set to true if the payload is base64 encoded\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns The payload from the id token.\r\n   */\r\n  getPayloadFromIdToken(encode = false, configId?: string): Observable<any> {\r\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(\r\n      map((config) => {\r\n        const token = this.authStateService.getIdToken(config);\r\n\r\n        return this.tokenHelperService.getPayloadFromToken(token, encode, config);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets a custom state for the authorize request.\r\n   *\r\n   * @param state The state to set.\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   */\r\n  setState(state: string, configId?: string): Observable<boolean> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(map((config) => this.flowsDataService.setAuthStateControl(state, config)));\r\n  }\r\n\r\n  /**\r\n   * Gets the state value used for the authorize request.\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns The state value used for the authorize request.\r\n   */\r\n  getState(configId?: string): Observable<string> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(map((config) => this.flowsDataService.getAuthStateControl(config)));\r\n  }\r\n\r\n  /**\r\n   * Redirects the user to the Security Token Service to begin the authentication process.\r\n   *\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   * @param authOptions The custom options for the the authentication request.\r\n   */\r\n  authorize(configId?: string, authOptions?: AuthOptions): void {\r\n    this.configurationService.getOpenIDConfiguration(configId).subscribe((config) => this.loginService.login(config, authOptions));\r\n  }\r\n\r\n  /**\r\n   * Opens the Security Token Service in a new window to begin the authentication process.\r\n   *\r\n   * @param authOptions The custom options for the authentication request.\r\n   * @param popupOptions The configuration for the popup window.\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns An `Observable<LoginResponse>` containing all information about the login\r\n   */\r\n  authorizeWithPopUp(authOptions?: AuthOptions, popupOptions?: PopupOptions, configId?: string): Observable<LoginResponse> {\r\n    return this.configurationService\r\n      .getOpenIDConfigurations(configId)\r\n      .pipe(\r\n        switchMap(({ allConfigs, currentConfig }) => this.loginService.loginWithPopUp(currentConfig, allConfigs, authOptions, popupOptions))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Manually refreshes the session.\r\n   *\r\n   * @param customParams Custom parameters to pass to the refresh request.\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns An `Observable<LoginResponse>` containing all information about the login\r\n   */\r\n  forceRefreshSession(customParams?: { [key: string]: string | number | boolean }, configId?: string): Observable<LoginResponse> {\r\n    return this.configurationService\r\n      .getOpenIDConfigurations(configId)\r\n      .pipe(\r\n        switchMap(({ allConfigs, currentConfig }) =>\r\n          this.refreshSessionService.userForceRefreshSession(currentConfig, allConfigs, customParams)\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Revokes the refresh token (if present) and the access token on the server and then performs the logoff operation.\r\n   * The refresh token and and the access token are revoked on the server. If the refresh token does not exist\r\n   * only the access token is revoked. Then the logout run.\r\n   *\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   * @param authOptions The custom options for the request.\r\n   *\r\n   * @returns An observable when the action is finished\r\n   */\r\n  logoffAndRevokeTokens(configId?: string, authOptions?: AuthOptions): Observable<any> {\r\n    return this.configurationService\r\n      .getOpenIDConfigurations(configId)\r\n      .pipe(\r\n        switchMap(({ allConfigs, currentConfig }) =>\r\n          this.logoffRevocationService.logoffAndRevokeTokens(currentConfig, allConfigs, authOptions)\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Logs out on the server and the local client. If the server state has changed, confirmed via check session,\r\n   * then only a local logout is performed.\r\n   *\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   * @param authOptions with custom parameters and/or an custom url handler\r\n   */\r\n  logoff(configId?: string, authOptions?: AuthOptions): void {\r\n    this.configurationService\r\n      .getOpenIDConfigurations(configId)\r\n      .subscribe(({ allConfigs, currentConfig }) => this.logoffRevocationService.logoff(currentConfig, allConfigs, authOptions));\r\n  }\r\n\r\n  /**\r\n   * Logs the user out of the application without logging them out of the server.\r\n   * Use this method if you have _one_ config enabled.\r\n   *\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   */\r\n  logoffLocal(configId?: string): void {\r\n    this.configurationService\r\n      .getOpenIDConfigurations(configId)\r\n      .subscribe(({ allConfigs, currentConfig }) => this.logoffRevocationService.logoffLocal(currentConfig, allConfigs));\r\n  }\r\n\r\n  /**\r\n   * Logs the user out of the application for all configs without logging them out of the server.\r\n   * Use this method if you have _multiple_ configs enabled.\r\n   */\r\n  logoffLocalMultiple(): void {\r\n    this.configurationService\r\n      .getOpenIDConfigurations()\r\n      .subscribe(({ allConfigs }) => this.logoffRevocationService.logoffLocalMultiple(allConfigs));\r\n  }\r\n\r\n  /**\r\n   * Revokes an access token on the Security Token Service. This is only required in the code flow with refresh tokens. If no token is\r\n   * provided, then the token from the storage is revoked. You can pass any token to revoke.\r\n   * https://tools.ietf.org/html/rfc7009\r\n   *\r\n   * @param accessToken The access token to revoke.\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns An observable when the action is finished\r\n   */\r\n  revokeAccessToken(accessToken?: any, configId?: string): Observable<any> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(switchMap((config) => this.logoffRevocationService.revokeAccessToken(config, accessToken)));\r\n  }\r\n\r\n  /**\r\n   * Revokes a refresh token on the Security Token Service. This is only required in the code flow with refresh tokens. If no token is\r\n   * provided, then the token from the storage is revoked. You can pass any token to revoke.\r\n   * https://tools.ietf.org/html/rfc7009\r\n   *\r\n   * @param refreshToken The access token to revoke.\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns An observable when the action is finished\r\n   */\r\n  revokeRefreshToken(refreshToken?: any, configId?: string): Observable<any> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(switchMap((config) => this.logoffRevocationService.revokeRefreshToken(config, refreshToken)));\r\n  }\r\n\r\n  /**\r\n   * Creates the end session URL which can be used to implement an alternate server logout.\r\n   *\r\n   * @param customParams\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A string with the end session url or null\r\n   */\r\n  getEndSessionUrl(customParams?: { [p: string]: string | number | boolean }, configId?: string): Observable<string | null> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(map((config) => this.logoffRevocationService.getEndSessionUrl(config, customParams)));\r\n  }\r\n\r\n  /**\r\n   * Creates the authorize URL based on your flow\r\n   *\r\n   * @param customParams\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A string with the authorize URL or null\r\n   */\r\n  getAuthorizeUrl(customParams?: { [p: string]: string | number | boolean }, configId?: string): Observable<string | null> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(switchMap((config) => this.urlService.getAuthorizeUrl(config, customParams ? { customParams } : undefined)));\r\n  }\r\n\r\n  private readonly finishLoading = (): void => {\r\n    this.isLoading.next(false);\r\n  };\r\n\r\n  private readonly finishLoadingOnError = (err: any): Observable<never> => {\r\n    this.isLoading.next(false);\r\n\r\n    return throwError(() => err);\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { AbstractSecurityStorage } from './abstract-security-storage';\n\n@Injectable()\nexport class DefaultSessionStorageService implements AbstractSecurityStorage {\n  public read(key: string): any {\n    return sessionStorage.getItem(key);\n  }\n\n  public write(key: string, value: any): void {\n    sessionStorage.setItem(key, value);\n  }\n\n  public remove(key: string): void {\n    sessionStorage.removeItem(key);\n  }\n\n  public clear(): void {\n    sessionStorage.clear();\n  }\n}\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { InjectionToken, ModuleWithProviders, NgModule, Provider } from '@angular/core';\r\nimport { DataService } from './api/data.service';\r\nimport { HttpBaseService } from './api/http-base.service';\r\nimport { AuthStateService } from './auth-state/auth-state.service';\r\nimport { CheckAuthService } from './auth-state/check-auth.service';\r\nimport { AutoLoginService } from './auto-login/auto-login.service';\r\nimport { ImplicitFlowCallbackService } from './callback/implicit-flow-callback.service';\r\nimport { AuthWellKnownDataService } from './config/auth-well-known/auth-well-known-data.service';\r\nimport { AuthWellKnownService } from './config/auth-well-known/auth-well-known.service';\r\nimport { ConfigurationService } from './config/config.service';\r\nimport { StsConfigLoader, StsConfigStaticLoader } from './config/loader/config-loader';\r\nimport { OpenIdConfiguration } from './config/openid-configuration';\r\nimport { ConfigValidationService } from './config/validation/config-validation.service';\r\nimport { CodeFlowCallbackHandlerService } from './flows/callback-handling/code-flow-callback-handler.service';\r\nimport { HistoryJwtKeysCallbackHandlerService } from './flows/callback-handling/history-jwt-keys-callback-handler.service';\r\nimport { ImplicitFlowCallbackHandlerService } from './flows/callback-handling/implicit-flow-callback-handler.service';\r\nimport { RefreshSessionCallbackHandlerService } from './flows/callback-handling/refresh-session-callback-handler.service';\r\nimport { RefreshTokenCallbackHandlerService } from './flows/callback-handling/refresh-token-callback-handler.service';\r\nimport { StateValidationCallbackHandlerService } from './flows/callback-handling/state-validation-callback-handler.service';\r\nimport { UserCallbackHandlerService } from './flows/callback-handling/user-callback-handler.service';\r\nimport { FlowsDataService } from './flows/flows-data.service';\r\nimport { FlowsService } from './flows/flows.service';\r\nimport { RandomService } from './flows/random/random.service';\r\nimport { ResetAuthDataService } from './flows/reset-auth-data.service';\r\nimport { SigninKeyDataService } from './flows/signin-key-data.service';\r\nimport { CheckSessionService } from './iframe/check-session.service';\r\nimport { IFrameService } from './iframe/existing-iframe.service';\r\nimport { SilentRenewService } from './iframe/silent-renew.service';\r\nimport { ClosestMatchingRouteService } from './interceptor/closest-matching-route.service';\r\nimport { AbstractLoggerService } from './logging/abstract-logger.service';\r\nimport { ConsoleLoggerService } from './logging/console-logger.service';\r\nimport { LoggerService } from './logging/logger.service';\r\nimport { LoginService } from './login/login.service';\r\nimport { ParLoginService } from './login/par/par-login.service';\r\nimport { ParService } from './login/par/par.service';\r\nimport { PopUpLoginService } from './login/popup/popup-login.service';\r\nimport { ResponseTypeValidationService } from './login/response-type-validation/response-type-validation.service';\r\nimport { StandardLoginService } from './login/standard/standard-login.service';\r\nimport { LogoffRevocationService } from './logoff-revoke/logoff-revocation.service';\r\nimport { OidcSecurityService } from './oidc.security.service';\r\nimport { PublicEventsService } from './public-events/public-events.service';\r\nimport { AbstractSecurityStorage } from './storage/abstract-security-storage';\r\nimport { BrowserStorageService } from './storage/browser-storage.service';\r\nimport { DefaultSessionStorageService } from './storage/default-sessionstorage.service';\r\nimport { StoragePersistenceService } from './storage/storage-persistence.service';\r\nimport { UserService } from './user-data/user.service';\r\nimport { CryptoService } from './utils/crypto/crypto-service';\r\nimport { EqualityService } from './utils/equality/equality.service';\r\nimport { FlowHelper } from './utils/flowHelper/flow-helper.service';\r\nimport { PlatformProvider } from './utils/platform-provider/platform.provider';\r\nimport { TokenHelperService } from './utils/tokenHelper/token-helper.service';\r\nimport { CurrentUrlService } from './utils/url/current-url.service';\r\nimport { UrlService } from './utils/url/url.service';\r\nimport { JwtWindowCryptoService } from './validation/jwt-window-crypto.service';\r\nimport { StateValidationService } from './validation/state-validation.service';\r\nimport { TokenValidationService } from './validation/token-validation.service';\r\nimport { JwkExtractor } from './extractors/jwk.extractor';\r\nimport { JwkWindowCryptoService } from './validation/jwk-window-crypto.service';\r\n\r\nexport interface PassedInitialConfig {\r\n  config?: OpenIdConfiguration | OpenIdConfiguration[];\r\n  loader?: Provider;\r\n  storage?: any;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\nexport function createStaticLoader(passedConfig: PassedInitialConfig) {\r\n  return new StsConfigStaticLoader(passedConfig.config);\r\n}\r\n\r\nexport const PASSED_CONFIG = new InjectionToken<PassedInitialConfig>('PASSED_CONFIG');\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule],\r\n  declarations: [],\r\n  exports: [],\r\n})\r\nexport class AuthModule {\r\n  static forRoot(passedConfig: PassedInitialConfig): ModuleWithProviders<AuthModule> {\r\n    return {\r\n      ngModule: AuthModule,\r\n      providers: [\r\n        // Make the PASSED_CONFIG available through injection\r\n        { provide: PASSED_CONFIG, useValue: passedConfig },\r\n\r\n        // Create the loader: Either the one getting passed or a static one\r\n        passedConfig?.loader || { provide: StsConfigLoader, useFactory: createStaticLoader, deps: [PASSED_CONFIG] },\r\n        ConfigurationService,\r\n        PublicEventsService,\r\n        FlowHelper,\r\n        OidcSecurityService,\r\n        TokenValidationService,\r\n        PlatformProvider,\r\n        CheckSessionService,\r\n        FlowsDataService,\r\n        FlowsService,\r\n        SilentRenewService,\r\n        LogoffRevocationService,\r\n        UserService,\r\n        RandomService,\r\n        HttpBaseService,\r\n        UrlService,\r\n        AuthStateService,\r\n        SigninKeyDataService,\r\n        StoragePersistenceService,\r\n        TokenHelperService,\r\n        IFrameService,\r\n        EqualityService,\r\n        LoginService,\r\n        ParService,\r\n        AuthWellKnownDataService,\r\n        AuthWellKnownService,\r\n        DataService,\r\n        StateValidationService,\r\n        ConfigValidationService,\r\n        CheckAuthService,\r\n        ResetAuthDataService,\r\n        ImplicitFlowCallbackService,\r\n        HistoryJwtKeysCallbackHandlerService,\r\n        ResponseTypeValidationService,\r\n        UserCallbackHandlerService,\r\n        StateValidationCallbackHandlerService,\r\n        RefreshSessionCallbackHandlerService,\r\n        RefreshTokenCallbackHandlerService,\r\n        CodeFlowCallbackHandlerService,\r\n        ImplicitFlowCallbackHandlerService,\r\n        ParLoginService,\r\n        PopUpLoginService,\r\n        StandardLoginService,\r\n        AutoLoginService,\r\n        JwkExtractor,\r\n        JwkWindowCryptoService,\r\n        JwtWindowCryptoService,\r\n        CurrentUrlService,\r\n        ClosestMatchingRouteService,\r\n        DefaultSessionStorageService,\r\n        BrowserStorageService,\r\n        CryptoService,\r\n        LoggerService,\r\n\r\n        { provide: AbstractSecurityStorage, useClass: DefaultSessionStorageService },\r\n        { provide: AbstractLoggerService, useClass: ConsoleLoggerService },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanLoad, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map, switchMap, take } from 'rxjs/operators';\r\nimport { CheckAuthService } from '../auth-state/check-auth.service';\r\nimport { ConfigurationService } from '../config/config.service';\r\nimport { LoginService } from '../login/login.service';\r\nimport { AutoLoginService } from './auto-login.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AutoLoginAllRoutesGuard implements CanActivate, CanActivateChild, CanLoad {\r\n  constructor(\r\n    private readonly autoLoginService: AutoLoginService,\r\n    private readonly checkAuthService: CheckAuthService,\r\n    private readonly loginService: LoginService,\r\n    private readonly configurationService: ConfigurationService,\r\n    private readonly router: Router\r\n  ) {}\r\n\r\n  canLoad(): Observable<boolean | UrlTree> {\r\n    return this.checkAuth(this.router.getCurrentNavigation()?.extractedUrl.toString().substring(1) ?? '');\r\n  }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> {\r\n    return this.checkAuth(state.url);\r\n  }\r\n\r\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> {\r\n    return this.checkAuth(state.url);\r\n  }\r\n\r\n  private checkAuth(url: string): Observable<boolean> {\r\n    return this.configurationService.getOpenIDConfiguration().pipe(\r\n      switchMap((config) => {\r\n        const allconfigs = this.configurationService.getAllConfigurations();\r\n\r\n        return this.checkAuthService.checkAuth(config, allconfigs).pipe(\r\n          take(1),\r\n          map(({ isAuthenticated }) => {\r\n            if (isAuthenticated) {\r\n              this.autoLoginService.checkSavedRedirectRouteAndNavigate(config);\r\n            }\r\n\r\n            if (!isAuthenticated) {\r\n              this.autoLoginService.saveRedirectRoute(config, url);\r\n              this.loginService.login(config);\r\n            }\r\n\r\n            return isAuthenticated;\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanLoad, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AuthStateService } from '../auth-state/auth-state.service';\r\nimport { ConfigurationService } from '../config/config.service';\r\nimport { LoginService } from '../login/login.service';\r\nimport { AutoLoginService } from './auto-login.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AutoLoginPartialRoutesGuard implements CanActivate, CanActivateChild, CanLoad {\r\n  constructor(\r\n    private readonly autoLoginService: AutoLoginService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly loginService: LoginService,\r\n    private readonly configurationService: ConfigurationService,\r\n    private readonly router: Router\r\n  ) {}\r\n\r\n  canLoad(): Observable<boolean> {\r\n    return this.checkAuth(this.router.getCurrentNavigation()?.extractedUrl.toString().substring(1) ?? '');\r\n  }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n    return this.checkAuth(state.url);\r\n  }\r\n\r\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n    return this.checkAuth(state.url);\r\n  }\r\n\r\n  private checkAuth(url: string): Observable<boolean> {\r\n    return this.configurationService.getOpenIDConfiguration().pipe(\r\n      map((configuration) => {\r\n        const isAuthenticated = this.authStateService.areAuthStorageTokensValid(configuration);\r\n\r\n        if (isAuthenticated) {\r\n          this.autoLoginService.checkSavedRedirectRouteAndNavigate(configuration);\r\n        }\r\n\r\n        if (!isAuthenticated) {\r\n          this.autoLoginService.saveRedirectRoute(configuration, url);\r\n          this.loginService.login(configuration);\r\n        }\r\n\r\n        return isAuthenticated;\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthStateService } from '../auth-state/auth-state.service';\r\nimport { ConfigurationService } from '../config/config.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { ClosestMatchingRouteService } from './closest-matching-route.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly configurationService: ConfigurationService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly closestMatchingRouteService: ClosestMatchingRouteService\r\n  ) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    if (!this.configurationService.hasAtLeastOneConfig()) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    const allConfigurations = this.configurationService.getAllConfigurations();\r\n    const allRoutesConfigured = allConfigurations.map((x) => x.secureRoutes || []);\r\n    const allRoutesConfiguredFlat = [].concat(...allRoutesConfigured) as string[];\r\n\r\n    if (allRoutesConfiguredFlat.length === 0) {\r\n      this.loggerService.logDebug(allConfigurations[0], `No routes to check configured`);\r\n\r\n      return next.handle(req);\r\n    }\r\n\r\n    const { matchingConfig, matchingRoute } = this.closestMatchingRouteService.getConfigIdForClosestMatchingRoute(\r\n      req.url,\r\n      allConfigurations\r\n    );\r\n\r\n    if (!matchingConfig) {\r\n      this.loggerService.logDebug(allConfigurations[0], `Did not find any configured route for route ${req.url}`);\r\n\r\n      return next.handle(req);\r\n    }\r\n\r\n    this.loggerService.logDebug(matchingConfig, `'${req.url}' matches configured route '${matchingRoute}'`);\r\n\r\n    const token = this.authStateService.getAccessToken(matchingConfig);\r\n\r\n    if (!token) {\r\n      this.loggerService.logDebug(matchingConfig, `Wanted to add token to ${req.url} but found no token: '${token}'`);\r\n\r\n      return next.handle(req);\r\n    }\r\n\r\n    this.loggerService.logDebug(matchingConfig, `'${req.url}' matches configured route '${matchingRoute}', adding token`);\r\n    req = req.clone({\r\n      headers: req.headers.set('Authorization', 'Bearer ' + token),\r\n    });\r\n\r\n    return next.handle(req);\r\n  }\r\n}\r\n","// Public classes.\r\n\r\nexport * from './auth-options';\r\nexport * from './auth-state/auth-result';\r\nexport * from './auth-state/auth-state';\r\nexport * from './auth.module';\r\nexport * from './auto-login/auto-login-all-routes.guard';\r\nexport * from './auto-login/auto-login-partial-routes.guard';\r\nexport * from './config/auth-well-known/auth-well-known-endpoints';\r\nexport * from './config/config.service';\r\nexport * from './config/loader/config-loader';\r\nexport * from './config/openid-configuration';\r\nexport * from './interceptor/auth.interceptor';\r\nexport * from './logging/abstract-logger.service';\r\nexport * from './logging/log-level';\r\nexport * from './login/login-response';\r\nexport * from './login/popup/popup-options';\r\nexport * from './login/popup/popup.service';\r\nexport * from './oidc.security.service';\r\nexport * from './public-events/event-types';\r\nexport * from './public-events/notification';\r\nexport * from './public-events/public-events.service';\r\nexport * from './storage/abstract-security-storage';\r\nexport * from './user-data/userdata-result';\r\nexport * from './validation/jwtkeys';\r\nexport * from './validation/state-validation-result';\r\nexport * from './validation/validation-result';\r\n","/*\r\n * Public API Surface of angular-auth-oidc-client\r\n */\r\n\r\nexport * from './lib';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.HttpBaseService","i1.AbstractLoggerService","i1.LoggerService","i2.AbstractSecurityStorage","i1.BrowserStorageService","i1.CryptoService","i1.StoragePersistenceService","i2.LoggerService","i3.PublicEventsService","i4.TokenValidationService","i2.RandomService","i3.LoggerService","i2.FlowsDataService","i3.FlowHelper","i4.StoragePersistenceService","i5.JwtWindowCryptoService","i1.UrlService","i3.TokenValidationService","i4.FlowsDataService","i5.StoragePersistenceService","i6.DataService","i1.DataService","i2.StoragePersistenceService","i4.LoggerService","i5.TokenHelperService","i6.FlowHelper","i1.AuthStateService","i3.UserService","i3.DataService","i2.AuthStateService","i3.FlowsDataService","i4.UserService","i5.ResetAuthDataService","i2.TokenValidationService","i3.TokenHelperService","i5.EqualityService","i1.CodeFlowCallbackHandlerService","i2.ImplicitFlowCallbackHandlerService","i3.HistoryJwtKeysCallbackHandlerService","i4.UserCallbackHandlerService","i5.StateValidationCallbackHandlerService","i6.RefreshSessionCallbackHandlerService","i7.RefreshTokenCallbackHandlerService","i1.FlowsService","i4.IntervalService","i1.IFrameService","i2.FlowsService","i3.ResetAuthDataService","i5.AuthStateService","i6.LoggerService","i7.FlowHelper","i8.ImplicitFlowCallbackService","i9.IntervalService","i3.IntervalService","i4","i2.FlowHelper","i3.ImplicitFlowCallbackService","i4.CodeFlowCallbackService","i1.AuthWellKnownDataService","i2.PublicEventsService","i3.StoragePersistenceService","i2.UrlService","i3.SilentRenewService","i2.ResetAuthDataService","i3.FlowsService","i1.FlowHelper","i4.SilentRenewService","i6.AuthWellKnownService","i7.RefreshSessionIframeService","i8.StoragePersistenceService","i9.RefreshSessionRefreshTokenService","i10.UserService","i4.ConfigValidationService","i5.PlatformProvider","i7.StsConfigLoader","i1.ResetAuthDataService","i5.UserService","i6.AuthStateService","i8.RefreshSessionRefreshTokenService","i10.StoragePersistenceService","i11.PublicEventsService","i12.ConfigurationService","i1.CheckSessionService","i2.CurrentUrlService","i5.LoggerService","i7.CallbackService","i8.RefreshSessionService","i9.PeriodicallyTokenCheckService","i10.PopUpService","i11.AutoLoginService","i12.StoragePersistenceService","i13.PublicEventsService","i2.ResponseTypeValidationService","i3.UrlService","i4.RedirectService","i5.AuthWellKnownService","i6.PopUpService","i7.CheckAuthService","i8.ParService","i4.AuthWellKnownService","i5.PopUpService","i6.CheckAuthService","i6.FlowsDataService","i1.ParLoginService","i2.PopUpLoginService","i3.StandardLoginService","i4.UrlService","i5.CheckSessionService","i6.ResetAuthDataService","i7.RedirectService","i2.CheckAuthService","i4.TokenHelperService","i5.ConfigurationService","i7.FlowsDataService","i8.CallbackService","i9.LogoffRevocationService","i10.LoginService","i11.RefreshSessionService","i12.UrlService","i13.AuthWellKnownService","i1.AutoLoginService","i3.LoginService","i4.ConfigurationService","i5","i2.ConfigurationService","i4.ClosestMatchingRouteService"],"mappings":"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"}