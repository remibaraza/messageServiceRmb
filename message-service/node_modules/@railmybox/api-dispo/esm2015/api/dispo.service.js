/**
 * Disposition
 * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.
 *
 * The version of the OpenAPI document: 1.0.52
 * Contact: developer@railmybox.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../variables";
import * as i3 from "../configuration";
export class DispoService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = 'http://api.dev.railmybox.io/dispo';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new Configuration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getChanges(dispoOrderId, observe = 'body', reportProgress = false, options) {
        if (dispoOrderId === null || dispoOrderId === undefined) {
            throw new Error('Required parameter dispoOrderId was null or undefined when calling getChanges.');
        }
        let headers = this.defaultHeaders;
        let credential;
        // authentication (main_auth) required
        credential = this.configuration.lookupCredential('main_auth');
        if (credential) {
            headers = headers.set('Authorization', credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json',
                'application/problem+json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType_ = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/changes`, {
            responseType: responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getDispoOrder(dispoOrderId, observe = 'body', reportProgress = false, options) {
        if (dispoOrderId === null || dispoOrderId === undefined) {
            throw new Error('Required parameter dispoOrderId was null or undefined when calling getDispoOrder.');
        }
        let headers = this.defaultHeaders;
        let credential;
        // authentication (main_auth) required
        credential = this.configuration.lookupCredential('main_auth');
        if (credential) {
            headers = headers.set('Authorization', credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json',
                'application/problem+json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType_ = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}`, {
            responseType: responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getDispoOrderForBooking(bookingref, dispoOrderId, observe = 'body', reportProgress = false, options) {
        if (bookingref === null || bookingref === undefined) {
            throw new Error('Required parameter bookingref was null or undefined when calling getDispoOrderForBooking.');
        }
        if (dispoOrderId === null || dispoOrderId === undefined) {
            throw new Error('Required parameter dispoOrderId was null or undefined when calling getDispoOrderForBooking.');
        }
        let headers = this.defaultHeaders;
        let credential;
        // authentication (main_auth) required
        credential = this.configuration.lookupCredential('main_auth');
        if (credential) {
            headers = headers.set('Authorization', credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json',
                'application/problem+json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType_ = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/dispo-orders/${encodeURIComponent(String(bookingref))}/${encodeURIComponent(String(dispoOrderId))}`, {
            responseType: responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getDispoOrderMessages(dispoOrderId, observe = 'body', reportProgress = false, options) {
        if (dispoOrderId === null || dispoOrderId === undefined) {
            throw new Error('Required parameter dispoOrderId was null or undefined when calling getDispoOrderMessages.');
        }
        let headers = this.defaultHeaders;
        let credential;
        // authentication (main_auth) required
        credential = this.configuration.lookupCredential('main_auth');
        if (credential) {
            headers = headers.set('Authorization', credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json',
                'application/problem+json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType_ = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/messages`, {
            responseType: responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getProblems(dispoOrderId, observe = 'body', reportProgress = false, options) {
        if (dispoOrderId === null || dispoOrderId === undefined) {
            throw new Error('Required parameter dispoOrderId was null or undefined when calling getProblems.');
        }
        let headers = this.defaultHeaders;
        let credential;
        // authentication (main_auth) required
        credential = this.configuration.lookupCredential('main_auth');
        if (credential) {
            headers = headers.set('Authorization', credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json',
                'application/problem+json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType_ = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/problems`, {
            responseType: responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getScenarios(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let credential;
        // authentication (main_auth) required
        credential = this.configuration.lookupCredential('main_auth');
        if (credential) {
            headers = headers.set('Authorization', credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json',
                'application/problem+json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType_ = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/admin/troubleshooting/scenarios`, {
            responseType: responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    listDispoOrdersForBooking(bookingref, observe = 'body', reportProgress = false, options) {
        if (bookingref === null || bookingref === undefined) {
            throw new Error('Required parameter bookingref was null or undefined when calling listDispoOrdersForBooking.');
        }
        let headers = this.defaultHeaders;
        let credential;
        // authentication (main_auth) required
        credential = this.configuration.lookupCredential('main_auth');
        if (credential) {
            headers = headers.set('Authorization', credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json',
                'application/problem+json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType_ = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/dispo-orders/${encodeURIComponent(String(bookingref))}`, {
            responseType: responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    searchDispoOrders(dispoOrderSearch, limit, offset, observe = 'body', reportProgress = false, options) {
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (dispoOrderSearch !== undefined && dispoOrderSearch !== null) {
            queryParameters = this.addToHttpParams(queryParameters, dispoOrderSearch, 'dispoOrderSearch');
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = this.addToHttpParams(queryParameters, limit, 'limit');
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = this.addToHttpParams(queryParameters, offset, 'offset');
        }
        let headers = this.defaultHeaders;
        let credential;
        // authentication (main_auth) required
        credential = this.configuration.lookupCredential('main_auth');
        if (credential) {
            headers = headers.set('Authorization', credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json',
                'application/problem+json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType_ = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders`, {
            params: queryParameters,
            responseType: responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateDispoOrder(dispoOrderId, dispoOrderUpdateModel, observe = 'body', reportProgress = false, options) {
        if (dispoOrderId === null || dispoOrderId === undefined) {
            throw new Error('Required parameter dispoOrderId was null or undefined when calling updateDispoOrder.');
        }
        if (dispoOrderUpdateModel === null || dispoOrderUpdateModel === undefined) {
            throw new Error('Required parameter dispoOrderUpdateModel was null or undefined when calling updateDispoOrder.');
        }
        let headers = this.defaultHeaders;
        let credential;
        // authentication (main_auth) required
        credential = this.configuration.lookupCredential('main_auth');
        if (credential) {
            headers = headers.set('Authorization', credential);
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts = [
                'application/json',
                'application/problem+json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        // to determine the Content-Type header
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType_ = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }
        return this.httpClient.patch(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}`, dispoOrderUpdateModel, {
            responseType: responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
DispoService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DispoService_Factory() { return new DispoService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.BASE_PATH, 8), i0.ɵɵinject(i3.Configuration, 8)); }, token: DispoService, providedIn: "root" });
DispoService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
DispoService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },
    { type: Configuration, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,