/**
 * Disposition
 * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.
 *
 * The version of the OpenAPI document: 1.0.52
 * Contact: developer@railmybox.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ChangeEntryModel } from '../model/models';
import { DispoOrderInfoModel } from '../model/models';
import { DispoOrderStatusModel } from '../model/models';
import { DispoOrderUpdateModel } from '../model/models';
import { DispoProblemModel } from '../model/models';
import { TroubleScenarioModel } from '../model/models';
import { Configuration } from '../configuration';
export declare class DispoService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Get changes for a dispo order
     * Get information about all database operations on a given object
     * @param dispoOrderId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getChanges(dispoOrderId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<Array<ChangeEntryModel>>;
    getChanges(dispoOrderId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpResponse<Array<ChangeEntryModel>>>;
    getChanges(dispoOrderId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpEvent<Array<ChangeEntryModel>>>;
    /**
     * Get a single dispo order
     * Get detailed information about a single dispo order for the helpdesk
     * @param dispoOrderId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getDispoOrder(dispoOrderId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<DispoOrderInfoModel>;
    getDispoOrder(dispoOrderId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpResponse<DispoOrderInfoModel>>;
    getDispoOrder(dispoOrderId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpEvent<DispoOrderInfoModel>>;
    /**
     * Get a single dispo order
     * Get detailed information about a single dispo order for the helpdesk
     * @param bookingref
     * @param dispoOrderId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getDispoOrderForBooking(bookingref: string, dispoOrderId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<DispoOrderInfoModel>;
    getDispoOrderForBooking(bookingref: string, dispoOrderId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpResponse<DispoOrderInfoModel>>;
    getDispoOrderForBooking(bookingref: string, dispoOrderId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpEvent<DispoOrderInfoModel>>;
    /**
     * Get communication messages for a dispo order
     * Get a communication overview for the dispo order. This contains all messages that have been send out to the service providers as well as all status or error responses.
     * @param dispoOrderId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getDispoOrderMessages(dispoOrderId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<Array<DispoOrderStatusModel>>;
    getDispoOrderMessages(dispoOrderId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpResponse<Array<DispoOrderStatusModel>>>;
    getDispoOrderMessages(dispoOrderId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpEvent<Array<DispoOrderStatusModel>>>;
    /**
     * Get problems for a dispo order
     * Get information about all problems related to a dispo order
     * @param dispoOrderId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getProblems(dispoOrderId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<Array<DispoProblemModel>>;
    getProblems(dispoOrderId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpResponse<Array<DispoProblemModel>>>;
    getProblems(dispoOrderId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpEvent<Array<DispoProblemModel>>>;
    /**
     * Get list of all scenarios
     * Get detailed information about all scenarios
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getScenarios(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<Array<TroubleScenarioModel>>;
    getScenarios(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpResponse<Array<TroubleScenarioModel>>>;
    getScenarios(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpEvent<Array<TroubleScenarioModel>>>;
    /**
     * List dispo orders
     * Search and filter throught the booking for the customer
     * @param bookingref
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    listDispoOrdersForBooking(bookingref: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<Array<DispoOrderInfoModel>>;
    listDispoOrdersForBooking(bookingref: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpResponse<Array<DispoOrderInfoModel>>>;
    listDispoOrdersForBooking(bookingref: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpEvent<Array<DispoOrderInfoModel>>>;
    /**
     * List dispo orders
     * Search and filter throught the booking for the helpdesk
     * @param dispoOrderSearch
     * @param limit Client suggested limit to restrict the number of entries per page
     * @param offset Numeric offset of the first element on the page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    searchDispoOrders(dispoOrderSearch?: object, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<Array<DispoOrderInfoModel>>;
    searchDispoOrders(dispoOrderSearch?: object, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpResponse<Array<DispoOrderInfoModel>>>;
    searchDispoOrders(dispoOrderSearch?: object, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpEvent<Array<DispoOrderInfoModel>>>;
    /**
     * update a dispo order
     * update information about a single dispo order for the helpdesk
     * @param dispoOrderId
     * @param dispoOrderUpdateModel
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateDispoOrder(dispoOrderId: string, dispoOrderUpdateModel: DispoOrderUpdateModel, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<DispoOrderInfoModel>;
    updateDispoOrder(dispoOrderId: string, dispoOrderUpdateModel: DispoOrderUpdateModel, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpResponse<DispoOrderInfoModel>>;
    updateDispoOrder(dispoOrderId: string, dispoOrderUpdateModel: DispoOrderUpdateModel, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpEvent<DispoOrderInfoModel>>;
}
