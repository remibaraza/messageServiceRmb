/**
 * Disposition
 * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.
 *
 * The version of the OpenAPI document: 1.0.52
 * Contact: developer@railmybox.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { DispoProblemModel } from '../model/models';
import { Configuration } from '../configuration';
export declare class ProblemService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Get problems for a dispo order
     * Get information about all problems related to a dispo order
     * @param dispoOrderId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getProblems(dispoOrderId: string, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<Array<DispoProblemModel>>;
    getProblems(dispoOrderId: string, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpResponse<Array<DispoProblemModel>>>;
    getProblems(dispoOrderId: string, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json' | 'application/problem+json';
    }): Observable<HttpEvent<Array<DispoProblemModel>>>;
}
