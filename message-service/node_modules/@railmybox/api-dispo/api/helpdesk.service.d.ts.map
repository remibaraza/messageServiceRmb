{"version":3,"file":"helpdesk.service.d.ts","sources":["helpdesk.service.d.ts"],"names":[],"mappingssourcesContent":["/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ChangeEntryModel } from '../model/models';\nimport { DispoOrderInfoModel } from '../model/models';\nimport { DispoOrderStatusModel } from '../model/models';\nimport { DispoOrderUpdateModel } from '../model/models';\nimport { DispoProblemModel } from '../model/models';\nimport { Configuration } from '../configuration';\nexport declare class HelpdeskService {\n    protected httpClient: HttpClient;\n    protected basePath: string;\n    defaultHeaders: HttpHeaders;\n    configuration: Configuration;\n    encoder: HttpParameterCodec;\n    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);\n    private addToHttpParams;\n    private addToHttpParamsRecursive;\n    /**\n     * Get changes for a dispo order\n     * Get information about all database operations on a given object\n     * @param dispoOrderId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getChanges(dispoOrderId: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<Array<ChangeEntryModel>>;\n    getChanges(dispoOrderId: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<HttpResponse<Array<ChangeEntryModel>>>;\n    getChanges(dispoOrderId: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<HttpEvent<Array<ChangeEntryModel>>>;\n    /**\n     * Get a single dispo order\n     * Get detailed information about a single dispo order for the helpdesk\n     * @param dispoOrderId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getDispoOrder(dispoOrderId: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<DispoOrderInfoModel>;\n    getDispoOrder(dispoOrderId: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<HttpResponse<DispoOrderInfoModel>>;\n    getDispoOrder(dispoOrderId: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<HttpEvent<DispoOrderInfoModel>>;\n    /**\n     * Get communication messages for a dispo order\n     * Get a communication overview for the dispo order. This contains all messages that have been send out to the service providers as well as all status or error responses.\n     * @param dispoOrderId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getDispoOrderMessages(dispoOrderId: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<Array<DispoOrderStatusModel>>;\n    getDispoOrderMessages(dispoOrderId: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<HttpResponse<Array<DispoOrderStatusModel>>>;\n    getDispoOrderMessages(dispoOrderId: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<HttpEvent<Array<DispoOrderStatusModel>>>;\n    /**\n     * Get problems for a dispo order\n     * Get information about all problems related to a dispo order\n     * @param dispoOrderId\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    getProblems(dispoOrderId: string, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<Array<DispoProblemModel>>;\n    getProblems(dispoOrderId: string, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<HttpResponse<Array<DispoProblemModel>>>;\n    getProblems(dispoOrderId: string, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<HttpEvent<Array<DispoProblemModel>>>;\n    /**\n     * List dispo orders\n     * Search and filter throught the booking for the helpdesk\n     * @param dispoOrderSearch\n     * @param limit Client suggested limit to restrict the number of entries per page\n     * @param offset Numeric offset of the first element on the page\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    searchDispoOrders(dispoOrderSearch?: object, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<Array<DispoOrderInfoModel>>;\n    searchDispoOrders(dispoOrderSearch?: object, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<HttpResponse<Array<DispoOrderInfoModel>>>;\n    searchDispoOrders(dispoOrderSearch?: object, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<HttpEvent<Array<DispoOrderInfoModel>>>;\n    /**\n     * update a dispo order\n     * update information about a single dispo order for the helpdesk\n     * @param dispoOrderId\n     * @param dispoOrderUpdateModel\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    updateDispoOrder(dispoOrderId: string, dispoOrderUpdateModel: DispoOrderUpdateModel, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<DispoOrderInfoModel>;\n    updateDispoOrder(dispoOrderId: string, dispoOrderUpdateModel: DispoOrderUpdateModel, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<HttpResponse<DispoOrderInfoModel>>;\n    updateDispoOrder(dispoOrderId: string, dispoOrderUpdateModel: DispoOrderUpdateModel, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json' | 'application/problem+json';\n    }): Observable<HttpEvent<DispoOrderInfoModel>>;\n}\n"]}