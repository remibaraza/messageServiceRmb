{"ast":null,"code":"import { MessageModel } from \"./models/message.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/freeApiService\";\nimport * as i2 from \"./services/servicemessage\";\nimport * as i3 from \"angular-auth-oidc-client\";\nimport * as i4 from \"@angular/common/http\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"./message/message.component\";\nimport * as i7 from \"./header/header.component\";\n\nfunction AppComponent_app_message_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-message\", 1);\n  }\n\n  if (rf & 2) {\n    const m_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"messageModel\", m_r1);\n  }\n}\n\nexport class AppComponent {\n  constructor(_freeApiService, messageService, oidcSecurityService, httpClient) {\n    this._freeApiService = _freeApiService;\n    this.messageService = messageService;\n    this.oidcSecurityService = oidcSecurityService;\n    this.httpClient = httpClient;\n    this.posData = {\n      test: 'my content'\n    };\n    this.url = \"https://api.dev.railmybox.io\";\n  }\n\n  ngOnInit() {\n    this.myMessage = [new MessageModel()];\n    this.oidcSecurityService.checkAuth().subscribe(({\n      isAuthenticated,\n      userData,\n      accessToken,\n      idToken\n    }) => {\n      if (!isAuthenticated) {\n        this.login();\n      }\n    });\n  }\n\n  login() {\n    this.oidcSecurityService.authorize();\n  }\n\n  logout() {\n    this.oidcSecurityService.logoff();\n  }\n\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.freeApiService), i0.ɵɵdirectiveInject(i2.ServiceMessage), i0.ɵɵdirectiveInject(i3.OidcSecurityService), i0.ɵɵdirectiveInject(i4.HttpClient));\n};\n\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 5,\n  vars: 4,\n  consts: [[3, \"messageModel\", 4, \"ngFor\", \"ngForOf\"], [3, \"messageModel\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-header\");\n      i0.ɵɵelementStart(1, \"h1\");\n      i0.ɵɵtext(2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, AppComponent_app_message_4_Template, 1, 1, \"app-message\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 2, ctx.interval));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.myMessage);\n    }\n  },\n  dependencies: [i5.NgForOf, i6.MessageComponent, i7.HeaderComponent, i5.AsyncPipe],\n  styles: [\"body[_ngcontent-%COMP%] {\\n  font-family: \\\"Convergence\\\", sans-serif;\\n  align-items: center;\\n  background-color: red;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHNDQUFBO0VBQ0EsbUJBQUE7RUFDQSxxQkFBQTtBQUNGIiwiZmlsZSI6ImFwcC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImJvZHl7XG4gIGZvbnQtZmFtaWx5OiBcIkNvbnZlcmdlbmNlXCIsc2Fucy1zZXJpZjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xuXG5cbn1cblxuIl19 */\"]\n});","map":{"version":3,"mappings":"AAGA,SAAQA,YAAR,QAA2B,wBAA3B;;;;;;;;;;;;ICDAC;;;;;IAAyCA;;;;ADWzC,OAAM,MAAOC,YAAP,CAAmB;EASvBC,YAAoBC,eAApB,EAA6DC,cAA7D,EAAoGC,mBAApG,EACWC,UADX,EACiC;IADb;IAAyC;IAAuC;IACzF;IARX,eAAU;MACRC,IAAI,EAAE;IADE,CAAV;IAKQ,WAAM,8BAAN;EAIP;;EAEDC,QAAQ;IAGN,KAAKC,SAAL,GAAiB,CAAC,IAAIV,YAAJ,EAAD,CAAjB;IACA,KAAKM,mBAAL,CAAyBK,SAAzB,GAAqCC,SAArC,CAA+C,CAAC;MAACC,eAAD;MAAkBC,QAAlB;MAA4BC,WAA5B;MAAyCC;IAAzC,CAAD,KAAsD;MACnG,IAAI,CAACH,eAAL,EAAsB;QACpB,KAAKI,KAAL;MACD;IACF,CAJD;EAMD;;EAEDA,KAAK;IACH,KAAKX,mBAAL,CAAyBY,SAAzB;EACD;;EAEDC,MAAM;IACJ,KAAKb,mBAAL,CAAyBc,MAAzB;EACD;;AA/BsB;;;mBAAZlB,cAAYD;AAAA;;;QAAZC;EAAYmB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCbzBxB;MACAA;MAAIA;;MAAoBA;MACxBA;;;;MADIA;MAAAA;MACuBA;MAAAA","names":["MessageModel","i0","AppComponent","constructor","_freeApiService","messageService","oidcSecurityService","httpClient","test","ngOnInit","myMessage","checkAuth","subscribe","isAuthenticated","userData","accessToken","idToken","login","authorize","logout","logoff","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/home/remi/EUROGATE/rMbServiceMessage/message-service/src/app/app.component.ts","/home/remi/EUROGATE/rMbServiceMessage/message-service/src/app/app.component.html"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {freeApiService} from \"./services/freeApiService\";\nimport {MessageModel} from \"./models/message.model\";\nimport {ServiceMessage} from \"./services/servicemessage\";\nimport {OidcSecurityService} from \"angular-auth-oidc-client\";\nimport {Observable} from \"rxjs\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n\n  posData = {\n    test: 'my content'\n  }\n  interval ?: Observable<string>\n  myMessage !: MessageModel[];\n  private url = \"https://api.dev.railmybox.io\"\n\n  constructor(private _freeApiService: freeApiService, private messageService: ServiceMessage, public oidcSecurityService: OidcSecurityService\n    , public httpClient: HttpClient) {\n  }\n\n  ngOnInit(): void {\n\n\n    this.myMessage = [new MessageModel()]\n    this.oidcSecurityService.checkAuth().subscribe(({isAuthenticated, userData, accessToken, idToken}) => {\n      if (!isAuthenticated) {\n        this.login();\n      }\n    });\n\n  }\n\n  login() {\n    this.oidcSecurityService.authorize();\n  }\n\n  logout() {\n    this.oidcSecurityService.logoff();\n  }\n\n\n}\n\n\n","<app-header></app-header>\n<h1>{{interval | async}}</h1>\n<app-message *ngFor=\"let m of myMessage\" [messageModel]=\"m\"></app-message>\n"]},"metadata":{},"sourceType":"module"}