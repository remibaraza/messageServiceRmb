{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule, SkipSelf } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\n\nclass CustomHttpParameterCodec {\n  encodeKey(k) {\n    return encodeURIComponent(k);\n  }\n\n  encodeValue(v) {\n    return encodeURIComponent(v);\n  }\n\n  decodeKey(k) {\n    return decodeURIComponent(k);\n  }\n\n  decodeValue(v) {\n    return decodeURIComponent(v);\n  }\n\n}\n\nconst BASE_PATH = new InjectionToken('basePath');\nconst COLLECTION_FORMATS = {\n  'csv': ',',\n  'tsv': '   ',\n  'ssv': ' ',\n  'pipes': '|'\n};\n\nclass Configuration {\n  constructor(configurationParameters = {}) {\n    this.apiKeys = configurationParameters.apiKeys;\n    this.username = configurationParameters.username;\n    this.password = configurationParameters.password;\n    this.accessToken = configurationParameters.accessToken;\n    this.basePath = configurationParameters.basePath;\n    this.withCredentials = configurationParameters.withCredentials;\n    this.encoder = configurationParameters.encoder;\n\n    if (configurationParameters.credentials) {\n      this.credentials = configurationParameters.credentials;\n    } else {\n      this.credentials = {};\n    } // init default api_key credential\n\n\n    if (!this.credentials['api_key']) {\n      this.credentials['api_key'] = () => {\n        if (this.apiKeys === null || this.apiKeys === undefined) {\n          return undefined;\n        } else {\n          return this.apiKeys['api_key'] || this.apiKeys['x-api-key'];\n        }\n      };\n    } // init default main_auth credential\n\n\n    if (!this.credentials['main_auth']) {\n      this.credentials['main_auth'] = () => {\n        if (this.apiKeys === null || this.apiKeys === undefined) {\n          return undefined;\n        } else {\n          return this.apiKeys['main_auth'] || this.apiKeys['Authorization'];\n        }\n      };\n    }\n  }\n  /**\n   * Select the correct content-type to use for a request.\n   * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param contentTypes - the array of content types that are available for selection\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n\n\n  selectHeaderContentType(contentTypes) {\n    if (contentTypes.length === 0) {\n      return undefined;\n    }\n\n    const type = contentTypes.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return contentTypes[0];\n    }\n\n    return type;\n  }\n  /**\n   * Select the correct accept content-type to use for a request.\n   * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param accepts - the array of content types that are available for selection.\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n\n\n  selectHeaderAccept(accepts) {\n    if (accepts.length === 0) {\n      return undefined;\n    }\n\n    const type = accepts.find(x => this.isJsonMime(x));\n\n    if (type === undefined) {\n      return accepts[0];\n    }\n\n    return type;\n  }\n  /**\n   * Check if the given MIME is a JSON MIME.\n   * JSON MIME examples:\n   *   application/json\n   *   application/json; charset=UTF8\n   *   APPLICATION/JSON\n   *   application/vnd.company+json\n   * @param mime - MIME (Multipurpose Internet Mail Extensions)\n   * @return True if the given MIME is JSON, false otherwise.\n   */\n\n\n  isJsonMime(mime) {\n    const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n\n  lookupCredential(key) {\n    const value = this.credentials[key];\n    return typeof value === 'function' ? value() : value;\n  }\n\n}\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nclass AC03Service {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = 'http://api.dev.railmybox.io/dispo';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new Configuration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  processAc03Message(aC03MessageModel, observe = 'body', reportProgress = false, options) {\n    if (aC03MessageModel === null || aC03MessageModel === undefined) {\n      throw new Error('Required parameter aC03MessageModel was null or undefined when calling processAc03Message.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (api_key) required\n\n    credential = this.configuration.lookupCredential('api_key');\n\n    if (credential) {\n      headers = headers.set('x-api-key', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    } // to determine the Content-Type header\n\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/external/ac03`, aC03MessageModel, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n}\n\nAC03Service.ɵfac = function AC03Service_Factory(t) {\n  return new (t || AC03Service)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8));\n};\n\nAC03Service.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function AC03Service_Factory() {\n    return new AC03Service(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8));\n  },\n  token: AC03Service,\n  providedIn: \"root\"\n});\n\nAC03Service.ctorParameters = () => [{\n  type: HttpClient\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [BASE_PATH]\n  }]\n}, {\n  type: Configuration,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AC03Service, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [BASE_PATH]\n      }]\n    }, {\n      type: Configuration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nclass BOSISService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = 'http://api.dev.railmybox.io/dispo';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new Configuration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  processBosisMessage(bosisMessageModel, observe = 'body', reportProgress = false, options) {\n    if (bosisMessageModel === null || bosisMessageModel === undefined) {\n      throw new Error('Required parameter bosisMessageModel was null or undefined when calling processBosisMessage.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (api_key) required\n\n    credential = this.configuration.lookupCredential('api_key');\n\n    if (credential) {\n      headers = headers.set('x-api-key', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    } // to determine the Content-Type header\n\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/external/bosis`, bosisMessageModel, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n}\n\nBOSISService.ɵfac = function BOSISService_Factory(t) {\n  return new (t || BOSISService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8));\n};\n\nBOSISService.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function BOSISService_Factory() {\n    return new BOSISService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8));\n  },\n  token: BOSISService,\n  providedIn: \"root\"\n});\n\nBOSISService.ctorParameters = () => [{\n  type: HttpClient\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [BASE_PATH]\n  }]\n}, {\n  type: Configuration,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BOSISService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [BASE_PATH]\n      }]\n    }, {\n      type: Configuration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nclass CachesService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = 'http://api.dev.railmybox.io/dispo';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new Configuration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  invalidateCaches(observe = 'body', reportProgress = false, options) {\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/caches/invalidate`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n}\n\nCachesService.ɵfac = function CachesService_Factory(t) {\n  return new (t || CachesService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8));\n};\n\nCachesService.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function CachesService_Factory() {\n    return new CachesService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8));\n  },\n  token: CachesService,\n  providedIn: \"root\"\n});\n\nCachesService.ctorParameters = () => [{\n  type: HttpClient\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [BASE_PATH]\n  }]\n}, {\n  type: Configuration,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CachesService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [BASE_PATH]\n      }]\n    }, {\n      type: Configuration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nclass ChangesService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = 'http://api.dev.railmybox.io/dispo';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new Configuration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getChanges(dispoOrderId, observe = 'body', reportProgress = false, options) {\n    if (dispoOrderId === null || dispoOrderId === undefined) {\n      throw new Error('Required parameter dispoOrderId was null or undefined when calling getChanges.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/changes`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n}\n\nChangesService.ɵfac = function ChangesService_Factory(t) {\n  return new (t || ChangesService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8));\n};\n\nChangesService.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function ChangesService_Factory() {\n    return new ChangesService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8));\n  },\n  token: ChangesService,\n  providedIn: \"root\"\n});\n\nChangesService.ctorParameters = () => [{\n  type: HttpClient\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [BASE_PATH]\n  }]\n}, {\n  type: Configuration,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChangesService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [BASE_PATH]\n      }]\n    }, {\n      type: Configuration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nclass DispoService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = 'http://api.dev.railmybox.io/dispo';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new Configuration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getChanges(dispoOrderId, observe = 'body', reportProgress = false, options) {\n    if (dispoOrderId === null || dispoOrderId === undefined) {\n      throw new Error('Required parameter dispoOrderId was null or undefined when calling getChanges.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/changes`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getDispoOrder(dispoOrderId, observe = 'body', reportProgress = false, options) {\n    if (dispoOrderId === null || dispoOrderId === undefined) {\n      throw new Error('Required parameter dispoOrderId was null or undefined when calling getDispoOrder.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getDispoOrderForBooking(bookingref, dispoOrderId, observe = 'body', reportProgress = false, options) {\n    if (bookingref === null || bookingref === undefined) {\n      throw new Error('Required parameter bookingref was null or undefined when calling getDispoOrderForBooking.');\n    }\n\n    if (dispoOrderId === null || dispoOrderId === undefined) {\n      throw new Error('Required parameter dispoOrderId was null or undefined when calling getDispoOrderForBooking.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/dispo-orders/${encodeURIComponent(String(bookingref))}/${encodeURIComponent(String(dispoOrderId))}`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getDispoOrderMessages(dispoOrderId, observe = 'body', reportProgress = false, options) {\n    if (dispoOrderId === null || dispoOrderId === undefined) {\n      throw new Error('Required parameter dispoOrderId was null or undefined when calling getDispoOrderMessages.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/messages`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getProblems(dispoOrderId, observe = 'body', reportProgress = false, options) {\n    if (dispoOrderId === null || dispoOrderId === undefined) {\n      throw new Error('Required parameter dispoOrderId was null or undefined when calling getProblems.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/problems`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getScenarios(observe = 'body', reportProgress = false, options) {\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/troubleshooting/scenarios`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  listDispoOrdersForBooking(bookingref, observe = 'body', reportProgress = false, options) {\n    if (bookingref === null || bookingref === undefined) {\n      throw new Error('Required parameter bookingref was null or undefined when calling listDispoOrdersForBooking.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/dispo-orders/${encodeURIComponent(String(bookingref))}`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  searchDispoOrders(dispoOrderSearch, limit, offset, observe = 'body', reportProgress = false, options) {\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (dispoOrderSearch !== undefined && dispoOrderSearch !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, dispoOrderSearch, 'dispoOrderSearch');\n    }\n\n    if (limit !== undefined && limit !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, limit, 'limit');\n    }\n\n    if (offset !== undefined && offset !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, offset, 'offset');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders`, {\n      params: queryParameters,\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  updateDispoOrder(dispoOrderId, dispoOrderUpdateModel, observe = 'body', reportProgress = false, options) {\n    if (dispoOrderId === null || dispoOrderId === undefined) {\n      throw new Error('Required parameter dispoOrderId was null or undefined when calling updateDispoOrder.');\n    }\n\n    if (dispoOrderUpdateModel === null || dispoOrderUpdateModel === undefined) {\n      throw new Error('Required parameter dispoOrderUpdateModel was null or undefined when calling updateDispoOrder.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    } // to determine the Content-Type header\n\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.patch(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}`, dispoOrderUpdateModel, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n}\n\nDispoService.ɵfac = function DispoService_Factory(t) {\n  return new (t || DispoService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8));\n};\n\nDispoService.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function DispoService_Factory() {\n    return new DispoService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8));\n  },\n  token: DispoService,\n  providedIn: \"root\"\n});\n\nDispoService.ctorParameters = () => [{\n  type: HttpClient\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [BASE_PATH]\n  }]\n}, {\n  type: Configuration,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DispoService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [BASE_PATH]\n      }]\n    }, {\n      type: Configuration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nclass ExternalService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = 'http://api.dev.railmybox.io/dispo';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new Configuration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  processAc03Message(aC03MessageModel, observe = 'body', reportProgress = false, options) {\n    if (aC03MessageModel === null || aC03MessageModel === undefined) {\n      throw new Error('Required parameter aC03MessageModel was null or undefined when calling processAc03Message.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (api_key) required\n\n    credential = this.configuration.lookupCredential('api_key');\n\n    if (credential) {\n      headers = headers.set('x-api-key', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    } // to determine the Content-Type header\n\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/external/ac03`, aC03MessageModel, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  processBosisMessage(bosisMessageModel, observe = 'body', reportProgress = false, options) {\n    if (bosisMessageModel === null || bosisMessageModel === undefined) {\n      throw new Error('Required parameter bosisMessageModel was null or undefined when calling processBosisMessage.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (api_key) required\n\n    credential = this.configuration.lookupCredential('api_key');\n\n    if (credential) {\n      headers = headers.set('x-api-key', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    } // to determine the Content-Type header\n\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.post(`${this.configuration.basePath}/external/bosis`, bosisMessageModel, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n}\n\nExternalService.ɵfac = function ExternalService_Factory(t) {\n  return new (t || ExternalService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8));\n};\n\nExternalService.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function ExternalService_Factory() {\n    return new ExternalService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8));\n  },\n  token: ExternalService,\n  providedIn: \"root\"\n});\n\nExternalService.ctorParameters = () => [{\n  type: HttpClient\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [BASE_PATH]\n  }]\n}, {\n  type: Configuration,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExternalService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [BASE_PATH]\n      }]\n    }, {\n      type: Configuration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nclass HelpdeskService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = 'http://api.dev.railmybox.io/dispo';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new Configuration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getChanges(dispoOrderId, observe = 'body', reportProgress = false, options) {\n    if (dispoOrderId === null || dispoOrderId === undefined) {\n      throw new Error('Required parameter dispoOrderId was null or undefined when calling getChanges.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/changes`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getDispoOrder(dispoOrderId, observe = 'body', reportProgress = false, options) {\n    if (dispoOrderId === null || dispoOrderId === undefined) {\n      throw new Error('Required parameter dispoOrderId was null or undefined when calling getDispoOrder.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getDispoOrderMessages(dispoOrderId, observe = 'body', reportProgress = false, options) {\n    if (dispoOrderId === null || dispoOrderId === undefined) {\n      throw new Error('Required parameter dispoOrderId was null or undefined when calling getDispoOrderMessages.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/messages`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getProblems(dispoOrderId, observe = 'body', reportProgress = false, options) {\n    if (dispoOrderId === null || dispoOrderId === undefined) {\n      throw new Error('Required parameter dispoOrderId was null or undefined when calling getProblems.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/problems`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  searchDispoOrders(dispoOrderSearch, limit, offset, observe = 'body', reportProgress = false, options) {\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (dispoOrderSearch !== undefined && dispoOrderSearch !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, dispoOrderSearch, 'dispoOrderSearch');\n    }\n\n    if (limit !== undefined && limit !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, limit, 'limit');\n    }\n\n    if (offset !== undefined && offset !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, offset, 'offset');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders`, {\n      params: queryParameters,\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  updateDispoOrder(dispoOrderId, dispoOrderUpdateModel, observe = 'body', reportProgress = false, options) {\n    if (dispoOrderId === null || dispoOrderId === undefined) {\n      throw new Error('Required parameter dispoOrderId was null or undefined when calling updateDispoOrder.');\n    }\n\n    if (dispoOrderUpdateModel === null || dispoOrderUpdateModel === undefined) {\n      throw new Error('Required parameter dispoOrderUpdateModel was null or undefined when calling updateDispoOrder.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    } // to determine the Content-Type header\n\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.patch(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}`, dispoOrderUpdateModel, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n}\n\nHelpdeskService.ɵfac = function HelpdeskService_Factory(t) {\n  return new (t || HelpdeskService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8));\n};\n\nHelpdeskService.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function HelpdeskService_Factory() {\n    return new HelpdeskService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8));\n  },\n  token: HelpdeskService,\n  providedIn: \"root\"\n});\n\nHelpdeskService.ctorParameters = () => [{\n  type: HttpClient\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [BASE_PATH]\n  }]\n}, {\n  type: Configuration,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HelpdeskService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [BASE_PATH]\n      }]\n    }, {\n      type: Configuration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nclass OrdersService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = 'http://api.dev.railmybox.io/dispo';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new Configuration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getDispoOrderForBooking(bookingref, dispoOrderId, observe = 'body', reportProgress = false, options) {\n    if (bookingref === null || bookingref === undefined) {\n      throw new Error('Required parameter bookingref was null or undefined when calling getDispoOrderForBooking.');\n    }\n\n    if (dispoOrderId === null || dispoOrderId === undefined) {\n      throw new Error('Required parameter dispoOrderId was null or undefined when calling getDispoOrderForBooking.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/dispo-orders/${encodeURIComponent(String(bookingref))}/${encodeURIComponent(String(dispoOrderId))}`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  getScenarios(observe = 'body', reportProgress = false, options) {\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/troubleshooting/scenarios`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  listDispoOrdersForBooking(bookingref, observe = 'body', reportProgress = false, options) {\n    if (bookingref === null || bookingref === undefined) {\n      throw new Error('Required parameter bookingref was null or undefined when calling listDispoOrdersForBooking.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/dispo-orders/${encodeURIComponent(String(bookingref))}`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  updateDispoOrder(dispoOrderId, dispoOrderUpdateModel, observe = 'body', reportProgress = false, options) {\n    if (dispoOrderId === null || dispoOrderId === undefined) {\n      throw new Error('Required parameter dispoOrderId was null or undefined when calling updateDispoOrder.');\n    }\n\n    if (dispoOrderUpdateModel === null || dispoOrderUpdateModel === undefined) {\n      throw new Error('Required parameter dispoOrderUpdateModel was null or undefined when calling updateDispoOrder.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    } // to determine the Content-Type header\n\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.patch(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}`, dispoOrderUpdateModel, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n}\n\nOrdersService.ɵfac = function OrdersService_Factory(t) {\n  return new (t || OrdersService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8));\n};\n\nOrdersService.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function OrdersService_Factory() {\n    return new OrdersService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8));\n  },\n  token: OrdersService,\n  providedIn: \"root\"\n});\n\nOrdersService.ctorParameters = () => [{\n  type: HttpClient\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [BASE_PATH]\n  }]\n}, {\n  type: Configuration,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OrdersService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [BASE_PATH]\n      }]\n    }, {\n      type: Configuration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nclass ProblemService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = 'http://api.dev.railmybox.io/dispo';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new Configuration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getProblems(dispoOrderId, observe = 'body', reportProgress = false, options) {\n    if (dispoOrderId === null || dispoOrderId === undefined) {\n      throw new Error('Required parameter dispoOrderId was null or undefined when calling getProblems.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/problems`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n}\n\nProblemService.ɵfac = function ProblemService_Factory(t) {\n  return new (t || ProblemService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8));\n};\n\nProblemService.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function ProblemService_Factory() {\n    return new ProblemService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8));\n  },\n  token: ProblemService,\n  providedIn: \"root\"\n});\n\nProblemService.ctorParameters = () => [{\n  type: HttpClient\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [BASE_PATH]\n  }]\n}, {\n  type: Configuration,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProblemService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [BASE_PATH]\n      }]\n    }, {\n      type: Configuration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nclass TrainVisitService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = 'http://api.dev.railmybox.io/dispo';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new Configuration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getTrainVisit(trainVisitId, observe = 'body', reportProgress = false, options) {\n    if (trainVisitId === null || trainVisitId === undefined) {\n      throw new Error('Required parameter trainVisitId was null or undefined when calling getTrainVisit.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/train-visits/${encodeURIComponent(String(trainVisitId))}`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  searchTrainVisits(trainStatus, trainIdOperator, shippingDateStart, shippingDateEnd, limit, offset, observe = 'body', reportProgress = false, options) {\n    let queryParameters = new HttpParams({\n      encoder: this.encoder\n    });\n\n    if (trainStatus !== undefined && trainStatus !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, trainStatus, 'trainStatus');\n    }\n\n    if (trainIdOperator !== undefined && trainIdOperator !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, trainIdOperator, 'trainIdOperator');\n    }\n\n    if (shippingDateStart !== undefined && shippingDateStart !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, shippingDateStart, 'shippingDateStart');\n    }\n\n    if (shippingDateEnd !== undefined && shippingDateEnd !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, shippingDateEnd, 'shippingDateEnd');\n    }\n\n    if (limit !== undefined && limit !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, limit, 'limit');\n    }\n\n    if (offset !== undefined && offset !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, offset, 'offset');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/train-visits`, {\n      params: queryParameters,\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n  updateTrainVisit(trainVisitId, trainVisitModel, observe = 'body', reportProgress = false, options) {\n    if (trainVisitId === null || trainVisitId === undefined) {\n      throw new Error('Required parameter trainVisitId was null or undefined when calling updateTrainVisit.');\n    }\n\n    if (trainVisitModel === null || trainVisitModel === undefined) {\n      throw new Error('Required parameter trainVisitModel was null or undefined when calling updateTrainVisit.');\n    }\n\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    } // to determine the Content-Type header\n\n\n    const consumes = ['application/json'];\n    const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.put(`${this.configuration.basePath}/admin/train-visits/${encodeURIComponent(String(trainVisitId))}`, trainVisitModel, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n}\n\nTrainVisitService.ɵfac = function TrainVisitService_Factory(t) {\n  return new (t || TrainVisitService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8));\n};\n\nTrainVisitService.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function TrainVisitService_Factory() {\n    return new TrainVisitService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8));\n  },\n  token: TrainVisitService,\n  providedIn: \"root\"\n});\n\nTrainVisitService.ctorParameters = () => [{\n  type: HttpClient\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [BASE_PATH]\n  }]\n}, {\n  type: Configuration,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TrainVisitService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [BASE_PATH]\n      }]\n    }, {\n      type: Configuration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nclass TroubleshootingService {\n  constructor(httpClient, basePath, configuration) {\n    this.httpClient = httpClient;\n    this.basePath = 'http://api.dev.railmybox.io/dispo';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = new Configuration();\n\n    if (configuration) {\n      this.configuration = configuration;\n    }\n\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n\n      this.configuration.basePath = basePath;\n    }\n\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  addToHttpParams(httpParams, value, key) {\n    if (typeof value === \"object\" && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n\n    return httpParams;\n  }\n\n  addToHttpParamsRecursive(httpParams, value, key) {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === \"object\") {\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error(\"key may not be null if value is not object or array\");\n    }\n\n    return httpParams;\n  }\n\n  getScenarios(observe = 'body', reportProgress = false, options) {\n    let headers = this.defaultHeaders;\n    let credential; // authentication (main_auth) required\n\n    credential = this.configuration.lookupCredential('main_auth');\n\n    if (credential) {\n      headers = headers.set('Authorization', credential);\n    }\n\n    let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts = ['application/json', 'application/problem+json'];\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected);\n    }\n\n    let responseType_ = 'json';\n\n    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n      responseType_ = 'text';\n    }\n\n    return this.httpClient.get(`${this.configuration.basePath}/admin/troubleshooting/scenarios`, {\n      responseType: responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress\n    });\n  }\n\n}\n\nTroubleshootingService.ɵfac = function TroubleshootingService_Factory(t) {\n  return new (t || TroubleshootingService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8));\n};\n\nTroubleshootingService.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function TroubleshootingService_Factory() {\n    return new TroubleshootingService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8));\n  },\n  token: TroubleshootingService,\n  providedIn: \"root\"\n});\n\nTroubleshootingService.ctorParameters = () => [{\n  type: HttpClient\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [BASE_PATH]\n  }]\n}, {\n  type: Configuration,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TroubleshootingService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [BASE_PATH]\n      }]\n    }, {\n      type: Configuration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nconst APIS = [AC03Service, BOSISService, CachesService, ChangesService, DispoService, ExternalService, HelpdeskService, OrdersService, ProblemService, TrainVisitService, TroubleshootingService];\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nvar AC03MessageModel;\n\n(function (AC03MessageModel) {\n  AC03MessageModel.ReferenceTypeEnum = {\n    Response: 'Response',\n    Error: 'Error',\n    StatusInformation: 'StatusInformation',\n    ErrorMessage: 'ErrorMessage',\n    Deletion: 'Deletion'\n  };\n})(AC03MessageModel || (AC03MessageModel = {}));\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nconst AddressTypeModel = {\n  Location: 'LOCATION',\n  Loadpoint: 'LOADPOINT',\n  Station: 'STATION',\n  Depot: 'DEPOT',\n  Customs: 'CUSTOMS',\n  Vet: 'VET',\n  Weighing: 'WEIGHING',\n  Cpa: 'CPA',\n  Port: 'PORT'\n};\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nconst BookingStatusTypeModel = {\n  InCapture: 'IN_CAPTURE',\n  Verification: 'VERIFICATION',\n  Accepted: 'ACCEPTED',\n  MissingData: 'MISSING_DATA',\n  MissingDataUrgent: 'MISSING_DATA_URGENT',\n  Denied: 'DENIED',\n  Rebooking: 'REBOOKING',\n  Cancelled: 'CANCELLED',\n  Dispatched: 'DISPATCHED',\n  BookingClosed: 'BOOKING_CLOSED',\n  InProgress: 'IN_PROGRESS',\n  TransportProblem: 'TRANSPORT_PROBLEM',\n  Done: 'DONE',\n  Invoiced: 'INVOICED',\n  UnderReview: 'UNDER_REVIEW',\n  RequestCancellation: 'REQUEST_CANCELLATION',\n  Arrived: 'ARRIVED'\n};\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nconst ChangeTypeModel = {\n  Add: 'ADD',\n  Change: 'CHANGE',\n  Delete: 'DELETE'\n};\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nconst ContainerStatusTypeModel = {\n  Done: 'DONE',\n  Accepted: 'ACCEPTED'\n};\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nconst CustomsTypeModel = {\n  Empty: 'EMPTY',\n  Community: 'COMMUNITY',\n  Dgcons: 'DGCONS'\n};\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nvar DispoOrderStatusModel;\n\n(function (DispoOrderStatusModel) {\n  DispoOrderStatusModel.StatusTypeEnum = {\n    SendOrder: 'SendOrder',\n    StatusInformation: 'StatusInformation',\n    ErrorMessage: 'ErrorMessage'\n  };\n})(DispoOrderStatusModel || (DispoOrderStatusModel = {}));\n\nvar DispoOrderStatusSendOrderAllOfModel;\n\n(function (DispoOrderStatusSendOrderAllOfModel) {\n  DispoOrderStatusSendOrderAllOfModel.MessageStatusEnum = {\n    New: 'NEW',\n    Send: 'SEND',\n    Done: 'DONE',\n    Error: 'ERROR'\n  };\n})(DispoOrderStatusSendOrderAllOfModel || (DispoOrderStatusSendOrderAllOfModel = {}));\n\nvar DispoOrderStatusSendOrderModel;\n\n(function (DispoOrderStatusSendOrderModel) {\n  DispoOrderStatusSendOrderModel.MessageStatusEnum = {\n    New: 'NEW',\n    Send: 'SEND',\n    Done: 'DONE',\n    Error: 'ERROR'\n  };\n})(DispoOrderStatusSendOrderModel || (DispoOrderStatusSendOrderModel = {}));\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nconst DispoOrderStatusTypeModel = {\n  Verification: 'VERIFICATION',\n  Accepted: 'ACCEPTED',\n  MissingData: 'MISSING_DATA',\n  Denied: 'DENIED',\n  Cancelled: 'CANCELLED',\n  Dispatched: 'DISPATCHED',\n  BookingClosed: 'BOOKING_CLOSED',\n  InProgress: 'IN_PROGRESS',\n  TransportProblem: 'TRANSPORT_PROBLEM',\n  Rebooking: 'REBOOKING',\n  Done: 'DONE',\n  RequestCancellation: 'REQUEST_CANCELLATION',\n  RebookingCancelled: 'REBOOKING_CANCELLED',\n  Arrived: 'ARRIVED'\n};\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nconst ProblemCategoryTypeModel = {\n  LoadingPoint: 'LOADING_POINT',\n  Damages: 'DAMAGES',\n  Traffic: 'TRAFFIC'\n};\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nconst ProblemStatusTypeModel = {\n  Open: 'OPEN',\n  Reopened: 'REOPENED',\n  Pending: 'PENDING',\n  Done: 'DONE',\n  Cancelled: 'CANCELLED'\n};\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nconst SendMessageTypeModel = {\n  TransportOrder: 'TRANSPORT_ORDER',\n  Cancel: 'CANCEL'\n};\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nconst TrainStatusTypeModel = {\n  Active: 'ACTIVE',\n  InProgress: 'IN_PROGRESS',\n  Done: 'DONE',\n  Cancelled: 'CANCELLED',\n  Delayed: 'DELAYED'\n};\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nconst TransportSectionModel = {\n  Vesselrun: 'VESSELRUN',\n  Prerun: 'PRERUN',\n  Mainrun: 'MAINRUN',\n  Postrun: 'POSTRUN'\n};\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nclass ApiModule {\n  constructor(parentModule, http) {\n    if (parentModule) {\n      throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n    }\n\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' + 'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n\n  static forRoot(configurationFactory) {\n    return {\n      ngModule: ApiModule,\n      providers: [{\n        provide: Configuration,\n        useFactory: configurationFactory\n      }]\n    };\n  }\n\n}\n\nApiModule.ɵfac = function ApiModule_Factory(t) {\n  return new (t || ApiModule)(ɵngcc0.ɵɵinject(ApiModule, 12), ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8));\n};\n\nApiModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: ApiModule\n});\nApiModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n\nApiModule.ctorParameters = () => [{\n  type: ApiModule,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}, {\n  type: HttpClient,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ApiModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [],\n      exports: [],\n      providers: []\n    }]\n  }], function () {\n    return [{\n      type: ApiModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AC03MessageModel, AC03Service, APIS, AddressTypeModel, ApiModule, BASE_PATH, BOSISService, BookingStatusTypeModel, COLLECTION_FORMATS, CachesService, ChangeTypeModel, ChangesService, Configuration, ContainerStatusTypeModel, CustomsTypeModel, DispoOrderStatusModel, DispoOrderStatusSendOrderAllOfModel, DispoOrderStatusSendOrderModel, DispoOrderStatusTypeModel, DispoService, ExternalService, HelpdeskService, OrdersService, ProblemCategoryTypeModel, ProblemService, ProblemStatusTypeModel, SendMessageTypeModel, TrainStatusTypeModel, TrainVisitService, TransportSectionModel, TroubleshootingService };","map":{"version":3,"names":["i0","InjectionToken","Injectable","Optional","Inject","NgModule","SkipSelf","i1","HttpHeaders","HttpClient","HttpParams","ɵngcc0","ɵngcc1","CustomHttpParameterCodec","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","BASE_PATH","COLLECTION_FORMATS","Configuration","constructor","configurationParameters","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","undefined","selectHeaderContentType","contentTypes","length","type","find","x","isJsonMime","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","AC03Service","httpClient","configuration","defaultHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","append","toISOString","substr","Error","Object","keys","processAc03Message","aC03MessageModel","observe","reportProgress","options","headers","credential","set","httpHeaderAcceptSelected","httpHeaderAccept","httpHeaderAccepts","consumes","httpContentTypeSelected","responseType_","startsWith","post","responseType","ɵfac","AC03Service_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ctorParameters","String","decorators","args","ngDevMode","ɵsetClassMetadata","BOSISService","processBosisMessage","bosisMessageModel","BOSISService_Factory","CachesService","invalidateCaches","get","CachesService_Factory","ChangesService","getChanges","dispoOrderId","ChangesService_Factory","DispoService","getDispoOrder","getDispoOrderForBooking","bookingref","getDispoOrderMessages","getProblems","getScenarios","listDispoOrdersForBooking","searchDispoOrders","dispoOrderSearch","limit","offset","queryParameters","params","updateDispoOrder","dispoOrderUpdateModel","patch","DispoService_Factory","ExternalService","ExternalService_Factory","HelpdeskService","HelpdeskService_Factory","OrdersService","OrdersService_Factory","ProblemService","ProblemService_Factory","TrainVisitService","getTrainVisit","trainVisitId","searchTrainVisits","trainStatus","trainIdOperator","shippingDateStart","shippingDateEnd","updateTrainVisit","trainVisitModel","put","TrainVisitService_Factory","TroubleshootingService","TroubleshootingService_Factory","APIS","AC03MessageModel","ReferenceTypeEnum","Response","StatusInformation","ErrorMessage","Deletion","AddressTypeModel","Location","Loadpoint","Station","Depot","Customs","Vet","Weighing","Cpa","Port","BookingStatusTypeModel","InCapture","Verification","Accepted","MissingData","MissingDataUrgent","Denied","Rebooking","Cancelled","Dispatched","BookingClosed","InProgress","TransportProblem","Done","Invoiced","UnderReview","RequestCancellation","Arrived","ChangeTypeModel","Add","Change","Delete","ContainerStatusTypeModel","CustomsTypeModel","Empty","Community","Dgcons","DispoOrderStatusModel","StatusTypeEnum","SendOrder","DispoOrderStatusSendOrderAllOfModel","MessageStatusEnum","New","Send","DispoOrderStatusSendOrderModel","DispoOrderStatusTypeModel","RebookingCancelled","ProblemCategoryTypeModel","LoadingPoint","Damages","Traffic","ProblemStatusTypeModel","Open","Reopened","Pending","SendMessageTypeModel","TransportOrder","Cancel","TrainStatusTypeModel","Active","Delayed","TransportSectionModel","Vesselrun","Prerun","Mainrun","Postrun","ApiModule","parentModule","http","forRoot","configurationFactory","ngModule","providers","provide","useFactory","ApiModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports"],"sources":["/home/remi/EUROGATE/messageServiceRmb/message-service/node_modules/@railmybox/api-dispo/__ivy_ngcc__/fesm2015/railmybox-api-dispo.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule, SkipSelf } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nclass CustomHttpParameterCodec {\n    encodeKey(k) {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v) {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k) {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v) {\n        return decodeURIComponent(v);\n    }\n}\n\nconst BASE_PATH = new InjectionToken('basePath');\nconst COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n};\n\nclass Configuration {\n    constructor(configurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n        // init default api_key credential\n        if (!this.credentials['api_key']) {\n            this.credentials['api_key'] = () => {\n                if (this.apiKeys === null || this.apiKeys === undefined) {\n                    return undefined;\n                }\n                else {\n                    return this.apiKeys['api_key'] || this.apiKeys['x-api-key'];\n                }\n            };\n        }\n        // init default main_auth credential\n        if (!this.credentials['main_auth']) {\n            this.credentials['main_auth'] = () => {\n                if (this.apiKeys === null || this.apiKeys === undefined) {\n                    return undefined;\n                }\n                else {\n                    return this.apiKeys['main_auth'] || this.apiKeys['Authorization'];\n                }\n            };\n        }\n    }\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    selectHeaderContentType(contentTypes) {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n        const type = contentTypes.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    selectHeaderAccept(accepts) {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n        const type = accepts.find((x) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    isJsonMime(mime) {\n        const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n    lookupCredential(key) {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nclass AC03Service {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = 'http://api.dev.railmybox.io/dispo';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new Configuration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    processAc03Message(aC03MessageModel, observe = 'body', reportProgress = false, options) {\n        if (aC03MessageModel === null || aC03MessageModel === undefined) {\n            throw new Error('Required parameter aC03MessageModel was null or undefined when calling processAc03Message.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (api_key) required\n        credential = this.configuration.lookupCredential('api_key');\n        if (credential) {\n            headers = headers.set('x-api-key', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        // to determine the Content-Type header\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/external/ac03`, aC03MessageModel, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n}\nAC03Service.ɵfac = function AC03Service_Factory(t) { return new (t || AC03Service)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8)); };\nAC03Service.ɵprov = i0.ɵɵdefineInjectable({ factory: function AC03Service_Factory() { return new AC03Service(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8)); }, token: AC03Service, providedIn: \"root\" });\nAC03Service.ctorParameters = () => [\n    { type: HttpClient },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },\n    { type: Configuration, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AC03Service, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [BASE_PATH]\n            }] }, { type: Configuration, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nclass BOSISService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = 'http://api.dev.railmybox.io/dispo';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new Configuration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    processBosisMessage(bosisMessageModel, observe = 'body', reportProgress = false, options) {\n        if (bosisMessageModel === null || bosisMessageModel === undefined) {\n            throw new Error('Required parameter bosisMessageModel was null or undefined when calling processBosisMessage.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (api_key) required\n        credential = this.configuration.lookupCredential('api_key');\n        if (credential) {\n            headers = headers.set('x-api-key', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        // to determine the Content-Type header\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/external/bosis`, bosisMessageModel, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n}\nBOSISService.ɵfac = function BOSISService_Factory(t) { return new (t || BOSISService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8)); };\nBOSISService.ɵprov = i0.ɵɵdefineInjectable({ factory: function BOSISService_Factory() { return new BOSISService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8)); }, token: BOSISService, providedIn: \"root\" });\nBOSISService.ctorParameters = () => [\n    { type: HttpClient },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },\n    { type: Configuration, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BOSISService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [BASE_PATH]\n            }] }, { type: Configuration, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nclass CachesService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = 'http://api.dev.railmybox.io/dispo';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new Configuration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    invalidateCaches(observe = 'body', reportProgress = false, options) {\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/caches/invalidate`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n}\nCachesService.ɵfac = function CachesService_Factory(t) { return new (t || CachesService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8)); };\nCachesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CachesService_Factory() { return new CachesService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8)); }, token: CachesService, providedIn: \"root\" });\nCachesService.ctorParameters = () => [\n    { type: HttpClient },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },\n    { type: Configuration, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CachesService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [BASE_PATH]\n            }] }, { type: Configuration, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nclass ChangesService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = 'http://api.dev.railmybox.io/dispo';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new Configuration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getChanges(dispoOrderId, observe = 'body', reportProgress = false, options) {\n        if (dispoOrderId === null || dispoOrderId === undefined) {\n            throw new Error('Required parameter dispoOrderId was null or undefined when calling getChanges.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/changes`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n}\nChangesService.ɵfac = function ChangesService_Factory(t) { return new (t || ChangesService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8)); };\nChangesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ChangesService_Factory() { return new ChangesService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8)); }, token: ChangesService, providedIn: \"root\" });\nChangesService.ctorParameters = () => [\n    { type: HttpClient },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },\n    { type: Configuration, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChangesService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [BASE_PATH]\n            }] }, { type: Configuration, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nclass DispoService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = 'http://api.dev.railmybox.io/dispo';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new Configuration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getChanges(dispoOrderId, observe = 'body', reportProgress = false, options) {\n        if (dispoOrderId === null || dispoOrderId === undefined) {\n            throw new Error('Required parameter dispoOrderId was null or undefined when calling getChanges.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/changes`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getDispoOrder(dispoOrderId, observe = 'body', reportProgress = false, options) {\n        if (dispoOrderId === null || dispoOrderId === undefined) {\n            throw new Error('Required parameter dispoOrderId was null or undefined when calling getDispoOrder.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getDispoOrderForBooking(bookingref, dispoOrderId, observe = 'body', reportProgress = false, options) {\n        if (bookingref === null || bookingref === undefined) {\n            throw new Error('Required parameter bookingref was null or undefined when calling getDispoOrderForBooking.');\n        }\n        if (dispoOrderId === null || dispoOrderId === undefined) {\n            throw new Error('Required parameter dispoOrderId was null or undefined when calling getDispoOrderForBooking.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/dispo-orders/${encodeURIComponent(String(bookingref))}/${encodeURIComponent(String(dispoOrderId))}`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getDispoOrderMessages(dispoOrderId, observe = 'body', reportProgress = false, options) {\n        if (dispoOrderId === null || dispoOrderId === undefined) {\n            throw new Error('Required parameter dispoOrderId was null or undefined when calling getDispoOrderMessages.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/messages`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getProblems(dispoOrderId, observe = 'body', reportProgress = false, options) {\n        if (dispoOrderId === null || dispoOrderId === undefined) {\n            throw new Error('Required parameter dispoOrderId was null or undefined when calling getProblems.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/problems`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getScenarios(observe = 'body', reportProgress = false, options) {\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/troubleshooting/scenarios`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    listDispoOrdersForBooking(bookingref, observe = 'body', reportProgress = false, options) {\n        if (bookingref === null || bookingref === undefined) {\n            throw new Error('Required parameter bookingref was null or undefined when calling listDispoOrdersForBooking.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/dispo-orders/${encodeURIComponent(String(bookingref))}`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    searchDispoOrders(dispoOrderSearch, limit, offset, observe = 'body', reportProgress = false, options) {\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (dispoOrderSearch !== undefined && dispoOrderSearch !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, dispoOrderSearch, 'dispoOrderSearch');\n        }\n        if (limit !== undefined && limit !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, limit, 'limit');\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, offset, 'offset');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders`, {\n            params: queryParameters,\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    updateDispoOrder(dispoOrderId, dispoOrderUpdateModel, observe = 'body', reportProgress = false, options) {\n        if (dispoOrderId === null || dispoOrderId === undefined) {\n            throw new Error('Required parameter dispoOrderId was null or undefined when calling updateDispoOrder.');\n        }\n        if (dispoOrderUpdateModel === null || dispoOrderUpdateModel === undefined) {\n            throw new Error('Required parameter dispoOrderUpdateModel was null or undefined when calling updateDispoOrder.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        // to determine the Content-Type header\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.patch(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}`, dispoOrderUpdateModel, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n}\nDispoService.ɵfac = function DispoService_Factory(t) { return new (t || DispoService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8)); };\nDispoService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DispoService_Factory() { return new DispoService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8)); }, token: DispoService, providedIn: \"root\" });\nDispoService.ctorParameters = () => [\n    { type: HttpClient },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },\n    { type: Configuration, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DispoService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [BASE_PATH]\n            }] }, { type: Configuration, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nclass ExternalService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = 'http://api.dev.railmybox.io/dispo';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new Configuration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    processAc03Message(aC03MessageModel, observe = 'body', reportProgress = false, options) {\n        if (aC03MessageModel === null || aC03MessageModel === undefined) {\n            throw new Error('Required parameter aC03MessageModel was null or undefined when calling processAc03Message.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (api_key) required\n        credential = this.configuration.lookupCredential('api_key');\n        if (credential) {\n            headers = headers.set('x-api-key', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        // to determine the Content-Type header\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/external/ac03`, aC03MessageModel, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    processBosisMessage(bosisMessageModel, observe = 'body', reportProgress = false, options) {\n        if (bosisMessageModel === null || bosisMessageModel === undefined) {\n            throw new Error('Required parameter bosisMessageModel was null or undefined when calling processBosisMessage.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (api_key) required\n        credential = this.configuration.lookupCredential('api_key');\n        if (credential) {\n            headers = headers.set('x-api-key', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        // to determine the Content-Type header\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.post(`${this.configuration.basePath}/external/bosis`, bosisMessageModel, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n}\nExternalService.ɵfac = function ExternalService_Factory(t) { return new (t || ExternalService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8)); };\nExternalService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ExternalService_Factory() { return new ExternalService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8)); }, token: ExternalService, providedIn: \"root\" });\nExternalService.ctorParameters = () => [\n    { type: HttpClient },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },\n    { type: Configuration, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExternalService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [BASE_PATH]\n            }] }, { type: Configuration, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nclass HelpdeskService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = 'http://api.dev.railmybox.io/dispo';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new Configuration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getChanges(dispoOrderId, observe = 'body', reportProgress = false, options) {\n        if (dispoOrderId === null || dispoOrderId === undefined) {\n            throw new Error('Required parameter dispoOrderId was null or undefined when calling getChanges.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/changes`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getDispoOrder(dispoOrderId, observe = 'body', reportProgress = false, options) {\n        if (dispoOrderId === null || dispoOrderId === undefined) {\n            throw new Error('Required parameter dispoOrderId was null or undefined when calling getDispoOrder.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getDispoOrderMessages(dispoOrderId, observe = 'body', reportProgress = false, options) {\n        if (dispoOrderId === null || dispoOrderId === undefined) {\n            throw new Error('Required parameter dispoOrderId was null or undefined when calling getDispoOrderMessages.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/messages`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getProblems(dispoOrderId, observe = 'body', reportProgress = false, options) {\n        if (dispoOrderId === null || dispoOrderId === undefined) {\n            throw new Error('Required parameter dispoOrderId was null or undefined when calling getProblems.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/problems`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    searchDispoOrders(dispoOrderSearch, limit, offset, observe = 'body', reportProgress = false, options) {\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (dispoOrderSearch !== undefined && dispoOrderSearch !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, dispoOrderSearch, 'dispoOrderSearch');\n        }\n        if (limit !== undefined && limit !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, limit, 'limit');\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, offset, 'offset');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders`, {\n            params: queryParameters,\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    updateDispoOrder(dispoOrderId, dispoOrderUpdateModel, observe = 'body', reportProgress = false, options) {\n        if (dispoOrderId === null || dispoOrderId === undefined) {\n            throw new Error('Required parameter dispoOrderId was null or undefined when calling updateDispoOrder.');\n        }\n        if (dispoOrderUpdateModel === null || dispoOrderUpdateModel === undefined) {\n            throw new Error('Required parameter dispoOrderUpdateModel was null or undefined when calling updateDispoOrder.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        // to determine the Content-Type header\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.patch(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}`, dispoOrderUpdateModel, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n}\nHelpdeskService.ɵfac = function HelpdeskService_Factory(t) { return new (t || HelpdeskService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8)); };\nHelpdeskService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HelpdeskService_Factory() { return new HelpdeskService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8)); }, token: HelpdeskService, providedIn: \"root\" });\nHelpdeskService.ctorParameters = () => [\n    { type: HttpClient },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },\n    { type: Configuration, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HelpdeskService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [BASE_PATH]\n            }] }, { type: Configuration, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nclass OrdersService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = 'http://api.dev.railmybox.io/dispo';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new Configuration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getDispoOrderForBooking(bookingref, dispoOrderId, observe = 'body', reportProgress = false, options) {\n        if (bookingref === null || bookingref === undefined) {\n            throw new Error('Required parameter bookingref was null or undefined when calling getDispoOrderForBooking.');\n        }\n        if (dispoOrderId === null || dispoOrderId === undefined) {\n            throw new Error('Required parameter dispoOrderId was null or undefined when calling getDispoOrderForBooking.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/dispo-orders/${encodeURIComponent(String(bookingref))}/${encodeURIComponent(String(dispoOrderId))}`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    getScenarios(observe = 'body', reportProgress = false, options) {\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/troubleshooting/scenarios`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    listDispoOrdersForBooking(bookingref, observe = 'body', reportProgress = false, options) {\n        if (bookingref === null || bookingref === undefined) {\n            throw new Error('Required parameter bookingref was null or undefined when calling listDispoOrdersForBooking.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/dispo-orders/${encodeURIComponent(String(bookingref))}`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    updateDispoOrder(dispoOrderId, dispoOrderUpdateModel, observe = 'body', reportProgress = false, options) {\n        if (dispoOrderId === null || dispoOrderId === undefined) {\n            throw new Error('Required parameter dispoOrderId was null or undefined when calling updateDispoOrder.');\n        }\n        if (dispoOrderUpdateModel === null || dispoOrderUpdateModel === undefined) {\n            throw new Error('Required parameter dispoOrderUpdateModel was null or undefined when calling updateDispoOrder.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        // to determine the Content-Type header\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.patch(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}`, dispoOrderUpdateModel, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n}\nOrdersService.ɵfac = function OrdersService_Factory(t) { return new (t || OrdersService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8)); };\nOrdersService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OrdersService_Factory() { return new OrdersService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8)); }, token: OrdersService, providedIn: \"root\" });\nOrdersService.ctorParameters = () => [\n    { type: HttpClient },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },\n    { type: Configuration, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OrdersService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [BASE_PATH]\n            }] }, { type: Configuration, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nclass ProblemService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = 'http://api.dev.railmybox.io/dispo';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new Configuration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getProblems(dispoOrderId, observe = 'body', reportProgress = false, options) {\n        if (dispoOrderId === null || dispoOrderId === undefined) {\n            throw new Error('Required parameter dispoOrderId was null or undefined when calling getProblems.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/dispo-orders/${encodeURIComponent(String(dispoOrderId))}/problems`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n}\nProblemService.ɵfac = function ProblemService_Factory(t) { return new (t || ProblemService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8)); };\nProblemService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProblemService_Factory() { return new ProblemService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8)); }, token: ProblemService, providedIn: \"root\" });\nProblemService.ctorParameters = () => [\n    { type: HttpClient },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },\n    { type: Configuration, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ProblemService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [BASE_PATH]\n            }] }, { type: Configuration, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nclass TrainVisitService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = 'http://api.dev.railmybox.io/dispo';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new Configuration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getTrainVisit(trainVisitId, observe = 'body', reportProgress = false, options) {\n        if (trainVisitId === null || trainVisitId === undefined) {\n            throw new Error('Required parameter trainVisitId was null or undefined when calling getTrainVisit.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/train-visits/${encodeURIComponent(String(trainVisitId))}`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    searchTrainVisits(trainStatus, trainIdOperator, shippingDateStart, shippingDateEnd, limit, offset, observe = 'body', reportProgress = false, options) {\n        let queryParameters = new HttpParams({ encoder: this.encoder });\n        if (trainStatus !== undefined && trainStatus !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, trainStatus, 'trainStatus');\n        }\n        if (trainIdOperator !== undefined && trainIdOperator !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, trainIdOperator, 'trainIdOperator');\n        }\n        if (shippingDateStart !== undefined && shippingDateStart !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, shippingDateStart, 'shippingDateStart');\n        }\n        if (shippingDateEnd !== undefined && shippingDateEnd !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, shippingDateEnd, 'shippingDateEnd');\n        }\n        if (limit !== undefined && limit !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, limit, 'limit');\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = this.addToHttpParams(queryParameters, offset, 'offset');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/train-visits`, {\n            params: queryParameters,\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n    updateTrainVisit(trainVisitId, trainVisitModel, observe = 'body', reportProgress = false, options) {\n        if (trainVisitId === null || trainVisitId === undefined) {\n            throw new Error('Required parameter trainVisitId was null or undefined when calling updateTrainVisit.');\n        }\n        if (trainVisitModel === null || trainVisitModel === undefined) {\n            throw new Error('Required parameter trainVisitModel was null or undefined when calling updateTrainVisit.');\n        }\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        // to determine the Content-Type header\n        const consumes = [\n            'application/json'\n        ];\n        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.put(`${this.configuration.basePath}/admin/train-visits/${encodeURIComponent(String(trainVisitId))}`, trainVisitModel, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n}\nTrainVisitService.ɵfac = function TrainVisitService_Factory(t) { return new (t || TrainVisitService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8)); };\nTrainVisitService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TrainVisitService_Factory() { return new TrainVisitService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8)); }, token: TrainVisitService, providedIn: \"root\" });\nTrainVisitService.ctorParameters = () => [\n    { type: HttpClient },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },\n    { type: Configuration, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TrainVisitService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [BASE_PATH]\n            }] }, { type: Configuration, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nclass TroubleshootingService {\n    constructor(httpClient, basePath, configuration) {\n        this.httpClient = httpClient;\n        this.basePath = 'http://api.dev.railmybox.io/dispo';\n        this.defaultHeaders = new HttpHeaders();\n        this.configuration = new Configuration();\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n    addToHttpParams(httpParams, value, key) {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        }\n        else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n    addToHttpParamsRecursive(httpParams, value, key) {\n        if (value == null) {\n            return httpParams;\n        }\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            }\n            else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));\n                }\n                else {\n                    throw Error(\"key may not be null if value is Date\");\n                }\n            }\n            else {\n                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        }\n        else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        }\n        else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n    getScenarios(observe = 'body', reportProgress = false, options) {\n        let headers = this.defaultHeaders;\n        let credential;\n        // authentication (main_auth) required\n        credential = this.configuration.lookupCredential('main_auth');\n        if (credential) {\n            headers = headers.set('Authorization', credential);\n        }\n        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts = [\n                'application/json',\n                'application/problem+json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n        let responseType_ = 'json';\n        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType_ = 'text';\n        }\n        return this.httpClient.get(`${this.configuration.basePath}/admin/troubleshooting/scenarios`, {\n            responseType: responseType_,\n            withCredentials: this.configuration.withCredentials,\n            headers: headers,\n            observe: observe,\n            reportProgress: reportProgress\n        });\n    }\n}\nTroubleshootingService.ɵfac = function TroubleshootingService_Factory(t) { return new (t || TroubleshootingService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(BASE_PATH, 8), ɵngcc0.ɵɵinject(Configuration, 8)); };\nTroubleshootingService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TroubleshootingService_Factory() { return new TroubleshootingService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(Configuration, 8)); }, token: TroubleshootingService, providedIn: \"root\" });\nTroubleshootingService.ctorParameters = () => [\n    { type: HttpClient },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] }] },\n    { type: Configuration, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TroubleshootingService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [BASE_PATH]\n            }] }, { type: Configuration, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\nconst APIS = [AC03Service, BOSISService, CachesService, ChangesService, DispoService, ExternalService, HelpdeskService, OrdersService, ProblemService, TrainVisitService, TroubleshootingService];\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar AC03MessageModel;\n(function (AC03MessageModel) {\n    AC03MessageModel.ReferenceTypeEnum = {\n        Response: 'Response',\n        Error: 'Error',\n        StatusInformation: 'StatusInformation',\n        ErrorMessage: 'ErrorMessage',\n        Deletion: 'Deletion'\n    };\n})(AC03MessageModel || (AC03MessageModel = {}));\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nconst AddressTypeModel = {\n    Location: 'LOCATION',\n    Loadpoint: 'LOADPOINT',\n    Station: 'STATION',\n    Depot: 'DEPOT',\n    Customs: 'CUSTOMS',\n    Vet: 'VET',\n    Weighing: 'WEIGHING',\n    Cpa: 'CPA',\n    Port: 'PORT'\n};\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nconst BookingStatusTypeModel = {\n    InCapture: 'IN_CAPTURE',\n    Verification: 'VERIFICATION',\n    Accepted: 'ACCEPTED',\n    MissingData: 'MISSING_DATA',\n    MissingDataUrgent: 'MISSING_DATA_URGENT',\n    Denied: 'DENIED',\n    Rebooking: 'REBOOKING',\n    Cancelled: 'CANCELLED',\n    Dispatched: 'DISPATCHED',\n    BookingClosed: 'BOOKING_CLOSED',\n    InProgress: 'IN_PROGRESS',\n    TransportProblem: 'TRANSPORT_PROBLEM',\n    Done: 'DONE',\n    Invoiced: 'INVOICED',\n    UnderReview: 'UNDER_REVIEW',\n    RequestCancellation: 'REQUEST_CANCELLATION',\n    Arrived: 'ARRIVED'\n};\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nconst ChangeTypeModel = {\n    Add: 'ADD',\n    Change: 'CHANGE',\n    Delete: 'DELETE'\n};\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nconst ContainerStatusTypeModel = {\n    Done: 'DONE',\n    Accepted: 'ACCEPTED'\n};\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nconst CustomsTypeModel = {\n    Empty: 'EMPTY',\n    Community: 'COMMUNITY',\n    Dgcons: 'DGCONS'\n};\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar DispoOrderStatusModel;\n(function (DispoOrderStatusModel) {\n    DispoOrderStatusModel.StatusTypeEnum = {\n        SendOrder: 'SendOrder',\n        StatusInformation: 'StatusInformation',\n        ErrorMessage: 'ErrorMessage'\n    };\n})(DispoOrderStatusModel || (DispoOrderStatusModel = {}));\n\nvar DispoOrderStatusSendOrderAllOfModel;\n(function (DispoOrderStatusSendOrderAllOfModel) {\n    DispoOrderStatusSendOrderAllOfModel.MessageStatusEnum = {\n        New: 'NEW',\n        Send: 'SEND',\n        Done: 'DONE',\n        Error: 'ERROR'\n    };\n})(DispoOrderStatusSendOrderAllOfModel || (DispoOrderStatusSendOrderAllOfModel = {}));\n\nvar DispoOrderStatusSendOrderModel;\n(function (DispoOrderStatusSendOrderModel) {\n    DispoOrderStatusSendOrderModel.MessageStatusEnum = {\n        New: 'NEW',\n        Send: 'SEND',\n        Done: 'DONE',\n        Error: 'ERROR'\n    };\n})(DispoOrderStatusSendOrderModel || (DispoOrderStatusSendOrderModel = {}));\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nconst DispoOrderStatusTypeModel = {\n    Verification: 'VERIFICATION',\n    Accepted: 'ACCEPTED',\n    MissingData: 'MISSING_DATA',\n    Denied: 'DENIED',\n    Cancelled: 'CANCELLED',\n    Dispatched: 'DISPATCHED',\n    BookingClosed: 'BOOKING_CLOSED',\n    InProgress: 'IN_PROGRESS',\n    TransportProblem: 'TRANSPORT_PROBLEM',\n    Rebooking: 'REBOOKING',\n    Done: 'DONE',\n    RequestCancellation: 'REQUEST_CANCELLATION',\n    RebookingCancelled: 'REBOOKING_CANCELLED',\n    Arrived: 'ARRIVED'\n};\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nconst ProblemCategoryTypeModel = {\n    LoadingPoint: 'LOADING_POINT',\n    Damages: 'DAMAGES',\n    Traffic: 'TRAFFIC'\n};\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nconst ProblemStatusTypeModel = {\n    Open: 'OPEN',\n    Reopened: 'REOPENED',\n    Pending: 'PENDING',\n    Done: 'DONE',\n    Cancelled: 'CANCELLED'\n};\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nconst SendMessageTypeModel = {\n    TransportOrder: 'TRANSPORT_ORDER',\n    Cancel: 'CANCEL'\n};\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nconst TrainStatusTypeModel = {\n    Active: 'ACTIVE',\n    InProgress: 'IN_PROGRESS',\n    Done: 'DONE',\n    Cancelled: 'CANCELLED',\n    Delayed: 'DELAYED'\n};\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nconst TransportSectionModel = {\n    Vesselrun: 'VESSELRUN',\n    Prerun: 'PRERUN',\n    Mainrun: 'MAINRUN',\n    Postrun: 'POSTRUN'\n};\n\n/**\n * Disposition\n * This is the OpenAPI description for the disposition service. The disposition service is used to communicate with other service providers.\n *\n * The version of the OpenAPI document: 1.0.52\n * Contact: developer@railmybox.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nclass ApiModule {\n    constructor(parentModule, http) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n                'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n    static forRoot(configurationFactory) {\n        return {\n            ngModule: ApiModule,\n            providers: [{ provide: Configuration, useFactory: configurationFactory }]\n        };\n    }\n}\nApiModule.ɵfac = function ApiModule_Factory(t) { return new (t || ApiModule)(ɵngcc0.ɵɵinject(ApiModule, 12), ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8)); };\nApiModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ApiModule });\nApiModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\nApiModule.ctorParameters = () => [\n    { type: ApiModule, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: HttpClient, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ApiModule, [{\n        type: NgModule,\n        args: [{\n                imports: [],\n                declarations: [],\n                exports: [],\n                providers: []\n            }]\n    }], function () { return [{ type: ApiModule, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AC03MessageModel, AC03Service, APIS, AddressTypeModel, ApiModule, BASE_PATH, BOSISService, BookingStatusTypeModel, COLLECTION_FORMATS, CachesService, ChangeTypeModel, ChangesService, Configuration, ContainerStatusTypeModel, CustomsTypeModel, DispoOrderStatusModel, DispoOrderStatusSendOrderAllOfModel, DispoOrderStatusSendOrderModel, DispoOrderStatusTypeModel, DispoService, ExternalService, HelpdeskService, OrdersService, ProblemCategoryTypeModel, ProblemService, ProblemStatusTypeModel, SendMessageTypeModel, TrainStatusTypeModel, TrainVisitService, TransportSectionModel, TroubleshootingService };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}